*) add "copy" custom function, external helper function or "class member method"
*) add "create" custom function, external helper function for creation of new object instances
*) add clean pre-step: before any generation of include or AutoGenWrap file clean previous any existing files (and command line argumen for removing the existing content)
*) modules support (ability to include another XML API description file from the current API description XML)

*) dynamic_cast support
*) exception support, exception policies: don't handle exceptions, ellipse handling & std::exception (primitive), exceptions from list
*) callbacks support
*) template support
*) standard module for wrapping STL classes (a huge topic, maybe start wrapping only some basic things)
*) standard module for wrapping boost classes (a huge topic, maybe start wrapping only some basic things)
*) flat type maps
===
*) implement Dynamic traits for Windows
*) const support for methods
*) const support for objects (constatant instances of wrapper classes)
*) avoid duplicated include files (implementation_header)
*) implement Dynamic traits for Unix
*) implement combined (dynamic & implib) mode
*) shuffle Capi mode
===
*) write more examples and tests:
    +) interoperability example (the same source code works both outside of library and inside the library)
    +) data_structures
    +) weak_ptr
    +) dynamic_cast
    +) dynamic_load
    +) exceptions_basic
    +) exceptions_list
*) develop automated testing system
*) test various cases: single_file, namespace_at_folder, implib_dynamic_load, no_namespace_header, all params (the same test, only parameters xml are different)
*) write documentation - manual and FAQ
*) develop generating input for Swig
*) doxygen documentation generation
*) update documentation
*) multiple inheritance?
*) update testing system and tests
*) inline optimization
*) C++ modes: C++ 98, C++2003, C++2011, for wrappers and for internals
*) add Python 2.7 support
*) return values of class type should be normal wrapper if it is possible, or it should be forward_pointer_holder if it is circular reference (?)
*) add automatic inclusion of dependent files (i.e. if ClassA uses ClassB then ClassA.h should include ClassB.h) (?)
