*) implement Dynamic traits for Windows
*) const support for methods
*) const support for objects (constatant instances of wrapper classes)
*) avoid duplicated include files (implementation_header)
*) implement Dynamic traits for Unix
*) implement combined (dynamic & implib) mode
*) write more examples and tests: hello_world, reference_counted, copy_semantic, move_semantic, virtual_interface, data_structures, shared_ptr, weak_ptr, dynamic_cast, dynamic_load, exceptions_basic, exceptions_list, single_load
*) exception support, exception policies: don't handle exceptions, ellipse handling & std::exception (primitive), exceptions from list
*) dynamic_cast support
*) develop automated testing system
*) test various cases: single_file, namespace_at_folder, implib_dynamic_load, no_namespace_header, all params (the same test, only parameters xml are different)
*) write documentation - manual and FAQ
*) develop generating input for Swig
*) update documentation
*) update testing system and tests
*) inline optimization
*) add Python 2.7 support
*) flat type maps
*) doxygen documentation generation
*) multiple inheritance?
*) C++ modes: C++ 98, C++2003, C++2011, for wrappers and for internals
*) callbacks support
*) allow including only some particular header, i.e. #include "Example/Geometry/Brep/Bode.h" without including "Example.h". Introduce some files like ExampleCapi.h.
*) Introduce some files like ExampleFwdRef.h.
*) access to implementation classes by -> operator instead of .
*) Object return type problem (addref or not)
*) add clean pre-step: before any generation of include or AutoGenWrap file clean previous any existing files
*) add "copy" custom function, external helper function or "class member method"
*) add constructor from forward_pointer_holder for move_semantic
*) add "FwdPtr" constant
*) add "FwdPtr" suffix option
*) add raw_pointer semantic
*) add automatic inclusion of dependent files (i.e. if ClassA uses ClassB then ClassA.h should include ClassB.h) (?)
*) return values of class type should be normal wrapper if it is possible, or it should be forward_pointer_holder if it is circular reference
*) wrappers destructors should check if pointer null
*) add IsNull() and IsNotNull() methods to wrappers classes