*) add "copy" custom function, external helper function or "class member method"
*) add "create" custom function, external helper function for creation of new object instances
*) flat type maps
*) copy semantic interop
*) validity checking and reporting:
    +) circular inheritance
    +) invalid base class
    +) invalid argument types
    +) check for the life cycle semantic coherence with base class
*) move constructors if target language supports C++ 11
*) noexcept methods if target language supports C++ 11
*) add std::nullptr_t constructor if target language supports C++ 11
*) down_cast for boost::shared_ptr (copy_semantic)
*) use typedef names where it is possible
*) add runtime check for binary compatibility
*) clash with argument names ("object_pointer", "self", "exception_info", "result")
*) c_2_implementation and implementation_2_c customization
*) place down_cast function to target type namespace
===
*) shuffle Capi mode
*) implement Dynamic traits for Windows
*) const support for objects (constatant instances of wrapper classes), const arguments, const return values
*) implement Dynamic traits for Unix
*) property for Get & Set
*) implement combined (dynamic & implib) mode
*) annotative C api (comments for enum types, typedefs for class types, i.e. typedef void* example_printer_t;)
===
*) callbacks support
  a) customization of generated methods and constructors names (?)
  b) customization of 'noexcept' flags for generated methods and constructors (?)
  c) small influence of life cycle logic to custom callbacks (?)
*) support function templates
*) write more examples and tests:
    +) interoperability example (the same source code works both outside of library and inside the library)
    +) data_structures
    +) weak_ptr
    +) dynamic_cast
    +) dynamic_load
    +) exceptions_basic
    +) exceptions_list
*) develop automated testing system
*) test various cases: single_file, namespace_at_folder, implib_dynamic_load, no_namespace_header, all params (the same test, only parameters xml are different)
*) write documentation - manual and FAQ
*) develop generating input for Swig
*) doxygen documentation generation
*) update documentation
*) multiple inheritance?
*) update testing system and tests
*) inline optimization
*) C++ modes: C++ 98, C++2003, C++2011, for wrappers and for internals
*) add Python 2.7 support (?)
*) if one of base classes throw exception in init or finish routine then threat it as throwing exception (?)
===
*) standard module for wrapping STL classes (a huge topic, maybe start wrapping only some basic things)
*) standard module for wrapping boost classes (a huge topic, maybe start wrapping only some basic things)
===
*) don't generate dynamic_casts if impl class is not polymorphic
*) rename "noexcept" to "no_except" (?)