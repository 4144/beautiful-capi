/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#ifndef MAPPEDTYPES_CAPI_INCLUDED
#define MAPPEDTYPES_CAPI_INCLUDED

#include <stddef.h>

#ifdef __cplusplus
    #define MAPPEDTYPES_CAPI_PREFIX extern "C"
#else /* __cplusplus */
    #define MAPPEDTYPES_CAPI_PREFIX
#endif /* __cplusplus */

#ifdef _WIN32
    #ifdef __GNUC__
        #define MAPPEDTYPES_API MAPPEDTYPES_CAPI_PREFIX __attribute__ ((dllimport))
        #define MAPPEDTYPES_API_CONVENTION __attribute__ ((cdecl))
    #else
        #define MAPPEDTYPES_API MAPPEDTYPES_CAPI_PREFIX __declspec(dllimport)
        #define MAPPEDTYPES_API_CONVENTION __cdecl
    #endif
#elif __APPLE__
    #if defined(__GNUC__) && __GNUC__ >= 4
        #define MAPPEDTYPES_API MAPPEDTYPES_CAPI_PREFIX __attribute__ ((visibility ("default")))
    #else
        #define MAPPEDTYPES_API MAPPEDTYPES_CAPI_PREFIX
    #endif
    #ifdef __i386__
        #define MAPPEDTYPES_API_CONVENTION __attribute__ ((cdecl))
    #else /* __i386__ */
        #define MAPPEDTYPES_API_CONVENTION
    #endif /* __i386__ */
#elif __unix__ || __linux__
    #if defined(__GNUC__) && __GNUC__ >= 4
        #define MAPPEDTYPES_API MAPPEDTYPES_CAPI_PREFIX __attribute__ ((visibility ("default")))
    #else
        #define MAPPEDTYPES_API MAPPEDTYPES_CAPI_PREFIX
    #endif
    #ifdef __i386__
        #define MAPPEDTYPES_API_CONVENTION __attribute__ ((cdecl))
    #else /* __i386__ */
        #define MAPPEDTYPES_API_CONVENTION
    #endif /* __i386__ */
#else
    #error "Unknown platform"
#endif

#define MAPPEDTYPES_MAJOR_VERSION 1
#define MAPPEDTYPES_MINOR_VERSION 0
#define MAPPEDTYPES_PATCH_VERSION 0

#ifdef __cplusplus
    #ifdef _MSC_VER
        #if _MSC_VER >= 1900
            #define MAPPEDTYPES_NOEXCEPT noexcept
        #else /* _MSC_VER >= 1900 */
            #define MAPPEDTYPES_NOEXCEPT
        #endif /* _MSC_VER >= 1900 */
        #if _MSC_VER >= 1600
            #define MAPPEDTYPES_CPP_COMPILER_HAS_RVALUE_REFERENCES
        #endif /* _MSC_VER >= 1600 */
        #if _MSC_VER >= 1800
            #define MAPPEDTYPES_CPP_COMPILER_HAS_MOVE_CONSTRUCTOR_DELETE
        #endif /* _MSC_VER >= 1800 */
    #else /* _MSC_VER */
        #if __cplusplus >= 201103L
            #define MAPPEDTYPES_NOEXCEPT noexcept
            #define MAPPEDTYPES_CPP_COMPILER_HAS_RVALUE_REFERENCES
            #define MAPPEDTYPES_CPP_COMPILER_HAS_MOVE_CONSTRUCTOR_DELETE
        #else /* __cplusplus >= 201103L */
            #define MAPPEDTYPES_NOEXCEPT
        #endif /* __cplusplus >= 201103L */
    #endif /* _MSC_VER */
#endif /* __cplusplus */

#ifndef MAPPEDTYPES_CAPI_USE_DYNAMIC_LOADER

    MAPPEDTYPES_API int32_t MAPPEDTYPES_API_CONVENTION mapped_types_get_major_version();
    MAPPEDTYPES_API int32_t MAPPEDTYPES_API_CONVENTION mapped_types_get_minor_version();
    MAPPEDTYPES_API int32_t MAPPEDTYPES_API_CONVENTION mapped_types_get_patch_version();
    MAPPEDTYPES_API void* MAPPEDTYPES_API_CONVENTION mapped_types_person_default();
    MAPPEDTYPES_API uint8_t MAPPEDTYPES_API_CONVENTION mapped_types_person_is_man_const(void* object_pointer);
    MAPPEDTYPES_API void MAPPEDTYPES_API_CONVENTION mapped_types_person_set_sex(void* object_pointer, uint8_t Sex);
    MAPPEDTYPES_API int32_t MAPPEDTYPES_API_CONVENTION mapped_types_person_get_age_const(void* object_pointer);
    MAPPEDTYPES_API void MAPPEDTYPES_API_CONVENTION mapped_types_person_set_age(void* object_pointer, int32_t age);
    MAPPEDTYPES_API const char* MAPPEDTYPES_API_CONVENTION mapped_types_person_get_first_name_const(void* object_pointer);
    MAPPEDTYPES_API void MAPPEDTYPES_API_CONVENTION mapped_types_person_set_first_name(void* object_pointer, const char* first_name);
    MAPPEDTYPES_API const char* MAPPEDTYPES_API_CONVENTION mapped_types_person_get_second_name_const(void* object_pointer);
    MAPPEDTYPES_API void MAPPEDTYPES_API_CONVENTION mapped_types_person_set_second_name(void* object_pointer, const char* second_name);
    MAPPEDTYPES_API void* MAPPEDTYPES_API_CONVENTION mapped_types_person_copy(void* object_pointer);
    MAPPEDTYPES_API void MAPPEDTYPES_API_CONVENTION mapped_types_person_delete(void* object_pointer);
    MAPPEDTYPES_API void* MAPPEDTYPES_API_CONVENTION mapped_types_device_default();
    MAPPEDTYPES_API const char* MAPPEDTYPES_API_CONVENTION mapped_types_device_get_name_const(void* object_pointer);
    MAPPEDTYPES_API void MAPPEDTYPES_API_CONVENTION mapped_types_device_set_name(void* object_pointer, const char* name);
    MAPPEDTYPES_API uint32_t MAPPEDTYPES_API_CONVENTION mapped_types_device_is_busy_const(void* object_pointer);
    MAPPEDTYPES_API void MAPPEDTYPES_API_CONVENTION mapped_types_device_set_busy(void* object_pointer, uint32_t busy);
    MAPPEDTYPES_API void* MAPPEDTYPES_API_CONVENTION mapped_types_device_copy(void* object_pointer);
    MAPPEDTYPES_API void MAPPEDTYPES_API_CONVENTION mapped_types_device_delete(void* object_pointer);

    #ifdef __cplusplus

    #include <stdexcept>
    #include <sstream>

    namespace MappedTypes
    {
        class Initialization
        {
        public:
            Initialization()
            {
                const int major_version = mapped_types_get_major_version();
                const int minor_version = mapped_types_get_minor_version();
                const int patch_version = mapped_types_get_patch_version();
                if (major_version != MAPPEDTYPES_MAJOR_VERSION || minor_version != MAPPEDTYPES_MINOR_VERSION || patch_version != MAPPEDTYPES_PATCH_VERSION)
                {
                    std::stringstream error_message;
                    error_message << "Incorrect version of library. ";
                    error_message << "Expected version is " << MAPPEDTYPES_MAJOR_VERSION << "." << MAPPEDTYPES_MINOR_VERSION << "." << MAPPEDTYPES_PATCH_VERSION << ". ";
                    error_message << "Found version is " << major_version << "." << minor_version << "." << patch_version << ".";
                    throw std::runtime_error(error_message.str());
                }
            }
        };
    }

    #endif /* __cplusplus */

#else /* MAPPEDTYPES_CAPI_USE_DYNAMIC_LOADER */

    typedef int32_t (MAPPEDTYPES_API_CONVENTION *mapped_types_get_major_version_function_type)();
    typedef int32_t (MAPPEDTYPES_API_CONVENTION *mapped_types_get_minor_version_function_type)();
    typedef int32_t (MAPPEDTYPES_API_CONVENTION *mapped_types_get_patch_version_function_type)();
    typedef void* (MAPPEDTYPES_API_CONVENTION *mapped_types_person_default_function_type)();
    typedef uint8_t (MAPPEDTYPES_API_CONVENTION *mapped_types_person_is_man_const_function_type)(void* object_pointer);
    typedef void (MAPPEDTYPES_API_CONVENTION *mapped_types_person_set_sex_function_type)(void* object_pointer, uint8_t Sex);
    typedef int32_t (MAPPEDTYPES_API_CONVENTION *mapped_types_person_get_age_const_function_type)(void* object_pointer);
    typedef void (MAPPEDTYPES_API_CONVENTION *mapped_types_person_set_age_function_type)(void* object_pointer, int32_t age);
    typedef const char* (MAPPEDTYPES_API_CONVENTION *mapped_types_person_get_first_name_const_function_type)(void* object_pointer);
    typedef void (MAPPEDTYPES_API_CONVENTION *mapped_types_person_set_first_name_function_type)(void* object_pointer, const char* first_name);
    typedef const char* (MAPPEDTYPES_API_CONVENTION *mapped_types_person_get_second_name_const_function_type)(void* object_pointer);
    typedef void (MAPPEDTYPES_API_CONVENTION *mapped_types_person_set_second_name_function_type)(void* object_pointer, const char* second_name);
    typedef void* (MAPPEDTYPES_API_CONVENTION *mapped_types_person_copy_function_type)(void* object_pointer);
    typedef void (MAPPEDTYPES_API_CONVENTION *mapped_types_person_delete_function_type)(void* object_pointer);
    typedef void* (MAPPEDTYPES_API_CONVENTION *mapped_types_device_default_function_type)();
    typedef const char* (MAPPEDTYPES_API_CONVENTION *mapped_types_device_get_name_const_function_type)(void* object_pointer);
    typedef void (MAPPEDTYPES_API_CONVENTION *mapped_types_device_set_name_function_type)(void* object_pointer, const char* name);
    typedef uint32_t (MAPPEDTYPES_API_CONVENTION *mapped_types_device_is_busy_const_function_type)(void* object_pointer);
    typedef void (MAPPEDTYPES_API_CONVENTION *mapped_types_device_set_busy_function_type)(void* object_pointer, uint32_t busy);
    typedef void* (MAPPEDTYPES_API_CONVENTION *mapped_types_device_copy_function_type)(void* object_pointer);
    typedef void (MAPPEDTYPES_API_CONVENTION *mapped_types_device_delete_function_type)(void* object_pointer);

    #ifdef MAPPEDTYPES_CAPI_DEFINE_FUNCTION_POINTERS

        #ifdef mapped_types_get_major_version_define_function_pointer_var
            mapped_types_get_major_version_define_function_pointer_var
        #else
            mapped_types_get_major_version_function_type mapped_types_get_major_version = 0;
        #endif
        #ifdef mapped_types_get_minor_version_define_function_pointer_var
            mapped_types_get_minor_version_define_function_pointer_var
        #else
            mapped_types_get_minor_version_function_type mapped_types_get_minor_version = 0;
        #endif
        #ifdef mapped_types_get_patch_version_define_function_pointer_var
            mapped_types_get_patch_version_define_function_pointer_var
        #else
            mapped_types_get_patch_version_function_type mapped_types_get_patch_version = 0;
        #endif
        #ifdef mapped_types_person_default_define_function_pointer_var
            mapped_types_person_default_define_function_pointer_var
        #else
            mapped_types_person_default_function_type mapped_types_person_default = 0;
        #endif
        #ifdef mapped_types_person_is_man_const_define_function_pointer_var
            mapped_types_person_is_man_const_define_function_pointer_var
        #else
            mapped_types_person_is_man_const_function_type mapped_types_person_is_man_const = 0;
        #endif
        #ifdef mapped_types_person_set_sex_define_function_pointer_var
            mapped_types_person_set_sex_define_function_pointer_var
        #else
            mapped_types_person_set_sex_function_type mapped_types_person_set_sex = 0;
        #endif
        #ifdef mapped_types_person_get_age_const_define_function_pointer_var
            mapped_types_person_get_age_const_define_function_pointer_var
        #else
            mapped_types_person_get_age_const_function_type mapped_types_person_get_age_const = 0;
        #endif
        #ifdef mapped_types_person_set_age_define_function_pointer_var
            mapped_types_person_set_age_define_function_pointer_var
        #else
            mapped_types_person_set_age_function_type mapped_types_person_set_age = 0;
        #endif
        #ifdef mapped_types_person_get_first_name_const_define_function_pointer_var
            mapped_types_person_get_first_name_const_define_function_pointer_var
        #else
            mapped_types_person_get_first_name_const_function_type mapped_types_person_get_first_name_const = 0;
        #endif
        #ifdef mapped_types_person_set_first_name_define_function_pointer_var
            mapped_types_person_set_first_name_define_function_pointer_var
        #else
            mapped_types_person_set_first_name_function_type mapped_types_person_set_first_name = 0;
        #endif
        #ifdef mapped_types_person_get_second_name_const_define_function_pointer_var
            mapped_types_person_get_second_name_const_define_function_pointer_var
        #else
            mapped_types_person_get_second_name_const_function_type mapped_types_person_get_second_name_const = 0;
        #endif
        #ifdef mapped_types_person_set_second_name_define_function_pointer_var
            mapped_types_person_set_second_name_define_function_pointer_var
        #else
            mapped_types_person_set_second_name_function_type mapped_types_person_set_second_name = 0;
        #endif
        #ifdef mapped_types_person_copy_define_function_pointer_var
            mapped_types_person_copy_define_function_pointer_var
        #else
            mapped_types_person_copy_function_type mapped_types_person_copy = 0;
        #endif
        #ifdef mapped_types_person_delete_define_function_pointer_var
            mapped_types_person_delete_define_function_pointer_var
        #else
            mapped_types_person_delete_function_type mapped_types_person_delete = 0;
        #endif
        #ifdef mapped_types_device_default_define_function_pointer_var
            mapped_types_device_default_define_function_pointer_var
        #else
            mapped_types_device_default_function_type mapped_types_device_default = 0;
        #endif
        #ifdef mapped_types_device_get_name_const_define_function_pointer_var
            mapped_types_device_get_name_const_define_function_pointer_var
        #else
            mapped_types_device_get_name_const_function_type mapped_types_device_get_name_const = 0;
        #endif
        #ifdef mapped_types_device_set_name_define_function_pointer_var
            mapped_types_device_set_name_define_function_pointer_var
        #else
            mapped_types_device_set_name_function_type mapped_types_device_set_name = 0;
        #endif
        #ifdef mapped_types_device_is_busy_const_define_function_pointer_var
            mapped_types_device_is_busy_const_define_function_pointer_var
        #else
            mapped_types_device_is_busy_const_function_type mapped_types_device_is_busy_const = 0;
        #endif
        #ifdef mapped_types_device_set_busy_define_function_pointer_var
            mapped_types_device_set_busy_define_function_pointer_var
        #else
            mapped_types_device_set_busy_function_type mapped_types_device_set_busy = 0;
        #endif
        #ifdef mapped_types_device_copy_define_function_pointer_var
            mapped_types_device_copy_define_function_pointer_var
        #else
            mapped_types_device_copy_function_type mapped_types_device_copy = 0;
        #endif
        #ifdef mapped_types_device_delete_define_function_pointer_var
            mapped_types_device_delete_define_function_pointer_var
        #else
            mapped_types_device_delete_function_type mapped_types_device_delete = 0;
        #endif

    #else /* MAPPEDTYPES_CAPI_DEFINE_FUNCTION_POINTERS */

        extern mapped_types_get_major_version_function_type mapped_types_get_major_version;
        extern mapped_types_get_minor_version_function_type mapped_types_get_minor_version;
        extern mapped_types_get_patch_version_function_type mapped_types_get_patch_version;
        extern mapped_types_person_default_function_type mapped_types_person_default;
        extern mapped_types_person_is_man_const_function_type mapped_types_person_is_man_const;
        extern mapped_types_person_set_sex_function_type mapped_types_person_set_sex;
        extern mapped_types_person_get_age_const_function_type mapped_types_person_get_age_const;
        extern mapped_types_person_set_age_function_type mapped_types_person_set_age;
        extern mapped_types_person_get_first_name_const_function_type mapped_types_person_get_first_name_const;
        extern mapped_types_person_set_first_name_function_type mapped_types_person_set_first_name;
        extern mapped_types_person_get_second_name_const_function_type mapped_types_person_get_second_name_const;
        extern mapped_types_person_set_second_name_function_type mapped_types_person_set_second_name;
        extern mapped_types_person_copy_function_type mapped_types_person_copy;
        extern mapped_types_person_delete_function_type mapped_types_person_delete;
        extern mapped_types_device_default_function_type mapped_types_device_default;
        extern mapped_types_device_get_name_const_function_type mapped_types_device_get_name_const;
        extern mapped_types_device_set_name_function_type mapped_types_device_set_name;
        extern mapped_types_device_is_busy_const_function_type mapped_types_device_is_busy_const;
        extern mapped_types_device_set_busy_function_type mapped_types_device_set_busy;
        extern mapped_types_device_copy_function_type mapped_types_device_copy;
        extern mapped_types_device_delete_function_type mapped_types_device_delete;

    #endif /* MAPPEDTYPES_CAPI_DEFINE_FUNCTION_POINTERS */

    #ifdef __cplusplus

    #include <stdexcept>
    #include <sstream>

    #ifdef _WIN32
        #include <Windows.h>
    #else /* _WIN32 */
        #include <dlfcn.h>
    #endif /* _WIN32 */

    namespace MappedTypes
    {
        class Initialization
        {
            #ifdef _WIN32
                HINSTANCE handle;
            #else /* _WIN32 */
                void* handle;
            #endif /* _WIN32 */

            template<class FunctionPointerType>
            void load_function(FunctionPointerType& to_init, const char* name)
            {
                #ifdef _WIN32
                    to_init = reinterpret_cast<FunctionPointerType>(GetProcAddress(handle, name));
                #else /* _WIN32 */
                    to_init = reinterpret_cast<FunctionPointerType>(dlsym(handle, name));
                #endif /* _WIN32 */
                if (!to_init)
                {
                    std::stringstream error_message;
                    error_message << "Can't obtain function " << name;
                    throw std::runtime_error(error_message.str());
                }
            }

            void load_module(const char* shared_library_name)
            {
                if (!shared_library_name) throw std::runtime_error("Null library name was passed");
                #ifdef _WIN32
                    handle = LoadLibraryA(shared_library_name);
                #else /* _WIN32 */
                    handle = dlopen(shared_library_name, RTLD_NOW);
                #endif /* _WIN32 */
                if (!handle)
                {
                    std::stringstream error_message;
                    error_message << "Can't load shared library " << shared_library_name;
                    throw std::runtime_error(error_message.str());
                }
                #ifdef mapped_types_get_major_version_load_function_call
                    mapped_types_get_major_version_load_function_call
                #else /* mapped_types_get_major_version_load_function_call */
                    load_function<mapped_types_get_major_version_function_type>(mapped_types_get_major_version, "mapped_types_get_major_version");
                #endif /* mapped_types_get_major_version_load_function_call */
                #ifdef mapped_types_get_minor_version_load_function_call
                    mapped_types_get_minor_version_load_function_call
                #else /* mapped_types_get_minor_version_load_function_call */
                    load_function<mapped_types_get_minor_version_function_type>(mapped_types_get_minor_version, "mapped_types_get_minor_version");
                #endif /* mapped_types_get_minor_version_load_function_call */
                #ifdef mapped_types_get_patch_version_load_function_call
                    mapped_types_get_patch_version_load_function_call
                #else /* mapped_types_get_patch_version_load_function_call */
                    load_function<mapped_types_get_patch_version_function_type>(mapped_types_get_patch_version, "mapped_types_get_patch_version");
                #endif /* mapped_types_get_patch_version_load_function_call */
                #ifdef mapped_types_person_default_load_function_call
                    mapped_types_person_default_load_function_call
                #else /* mapped_types_person_default_load_function_call */
                    load_function<mapped_types_person_default_function_type>(mapped_types_person_default, "mapped_types_person_default");
                #endif /* mapped_types_person_default_load_function_call */
                #ifdef mapped_types_person_is_man_const_load_function_call
                    mapped_types_person_is_man_const_load_function_call
                #else /* mapped_types_person_is_man_const_load_function_call */
                    load_function<mapped_types_person_is_man_const_function_type>(mapped_types_person_is_man_const, "mapped_types_person_is_man_const");
                #endif /* mapped_types_person_is_man_const_load_function_call */
                #ifdef mapped_types_person_set_sex_load_function_call
                    mapped_types_person_set_sex_load_function_call
                #else /* mapped_types_person_set_sex_load_function_call */
                    load_function<mapped_types_person_set_sex_function_type>(mapped_types_person_set_sex, "mapped_types_person_set_sex");
                #endif /* mapped_types_person_set_sex_load_function_call */
                #ifdef mapped_types_person_get_age_const_load_function_call
                    mapped_types_person_get_age_const_load_function_call
                #else /* mapped_types_person_get_age_const_load_function_call */
                    load_function<mapped_types_person_get_age_const_function_type>(mapped_types_person_get_age_const, "mapped_types_person_get_age_const");
                #endif /* mapped_types_person_get_age_const_load_function_call */
                #ifdef mapped_types_person_set_age_load_function_call
                    mapped_types_person_set_age_load_function_call
                #else /* mapped_types_person_set_age_load_function_call */
                    load_function<mapped_types_person_set_age_function_type>(mapped_types_person_set_age, "mapped_types_person_set_age");
                #endif /* mapped_types_person_set_age_load_function_call */
                #ifdef mapped_types_person_get_first_name_const_load_function_call
                    mapped_types_person_get_first_name_const_load_function_call
                #else /* mapped_types_person_get_first_name_const_load_function_call */
                    load_function<mapped_types_person_get_first_name_const_function_type>(mapped_types_person_get_first_name_const, "mapped_types_person_get_first_name_const");
                #endif /* mapped_types_person_get_first_name_const_load_function_call */
                #ifdef mapped_types_person_set_first_name_load_function_call
                    mapped_types_person_set_first_name_load_function_call
                #else /* mapped_types_person_set_first_name_load_function_call */
                    load_function<mapped_types_person_set_first_name_function_type>(mapped_types_person_set_first_name, "mapped_types_person_set_first_name");
                #endif /* mapped_types_person_set_first_name_load_function_call */
                #ifdef mapped_types_person_get_second_name_const_load_function_call
                    mapped_types_person_get_second_name_const_load_function_call
                #else /* mapped_types_person_get_second_name_const_load_function_call */
                    load_function<mapped_types_person_get_second_name_const_function_type>(mapped_types_person_get_second_name_const, "mapped_types_person_get_second_name_const");
                #endif /* mapped_types_person_get_second_name_const_load_function_call */
                #ifdef mapped_types_person_set_second_name_load_function_call
                    mapped_types_person_set_second_name_load_function_call
                #else /* mapped_types_person_set_second_name_load_function_call */
                    load_function<mapped_types_person_set_second_name_function_type>(mapped_types_person_set_second_name, "mapped_types_person_set_second_name");
                #endif /* mapped_types_person_set_second_name_load_function_call */
                #ifdef mapped_types_person_copy_load_function_call
                    mapped_types_person_copy_load_function_call
                #else /* mapped_types_person_copy_load_function_call */
                    load_function<mapped_types_person_copy_function_type>(mapped_types_person_copy, "mapped_types_person_copy");
                #endif /* mapped_types_person_copy_load_function_call */
                #ifdef mapped_types_person_delete_load_function_call
                    mapped_types_person_delete_load_function_call
                #else /* mapped_types_person_delete_load_function_call */
                    load_function<mapped_types_person_delete_function_type>(mapped_types_person_delete, "mapped_types_person_delete");
                #endif /* mapped_types_person_delete_load_function_call */
                #ifdef mapped_types_device_default_load_function_call
                    mapped_types_device_default_load_function_call
                #else /* mapped_types_device_default_load_function_call */
                    load_function<mapped_types_device_default_function_type>(mapped_types_device_default, "mapped_types_device_default");
                #endif /* mapped_types_device_default_load_function_call */
                #ifdef mapped_types_device_get_name_const_load_function_call
                    mapped_types_device_get_name_const_load_function_call
                #else /* mapped_types_device_get_name_const_load_function_call */
                    load_function<mapped_types_device_get_name_const_function_type>(mapped_types_device_get_name_const, "mapped_types_device_get_name_const");
                #endif /* mapped_types_device_get_name_const_load_function_call */
                #ifdef mapped_types_device_set_name_load_function_call
                    mapped_types_device_set_name_load_function_call
                #else /* mapped_types_device_set_name_load_function_call */
                    load_function<mapped_types_device_set_name_function_type>(mapped_types_device_set_name, "mapped_types_device_set_name");
                #endif /* mapped_types_device_set_name_load_function_call */
                #ifdef mapped_types_device_is_busy_const_load_function_call
                    mapped_types_device_is_busy_const_load_function_call
                #else /* mapped_types_device_is_busy_const_load_function_call */
                    load_function<mapped_types_device_is_busy_const_function_type>(mapped_types_device_is_busy_const, "mapped_types_device_is_busy_const");
                #endif /* mapped_types_device_is_busy_const_load_function_call */
                #ifdef mapped_types_device_set_busy_load_function_call
                    mapped_types_device_set_busy_load_function_call
                #else /* mapped_types_device_set_busy_load_function_call */
                    load_function<mapped_types_device_set_busy_function_type>(mapped_types_device_set_busy, "mapped_types_device_set_busy");
                #endif /* mapped_types_device_set_busy_load_function_call */
                #ifdef mapped_types_device_copy_load_function_call
                    mapped_types_device_copy_load_function_call
                #else /* mapped_types_device_copy_load_function_call */
                    load_function<mapped_types_device_copy_function_type>(mapped_types_device_copy, "mapped_types_device_copy");
                #endif /* mapped_types_device_copy_load_function_call */
                #ifdef mapped_types_device_delete_load_function_call
                    mapped_types_device_delete_load_function_call
                #else /* mapped_types_device_delete_load_function_call */
                    load_function<mapped_types_device_delete_function_type>(mapped_types_device_delete, "mapped_types_device_delete");
                #endif /* mapped_types_device_delete_load_function_call */
                const int major_version = mapped_types_get_major_version();
                const int minor_version = mapped_types_get_minor_version();
                const int patch_version = mapped_types_get_patch_version();
                if (major_version != MAPPEDTYPES_MAJOR_VERSION || minor_version != MAPPEDTYPES_MINOR_VERSION || patch_version != MAPPEDTYPES_PATCH_VERSION)
                {
                    std::stringstream error_message;
                    error_message << "Incorrect version of " << shared_library_name << " library. ";
                    error_message << "Expected version is " << MAPPEDTYPES_MAJOR_VERSION << "." << MAPPEDTYPES_MINOR_VERSION << "." << MAPPEDTYPES_PATCH_VERSION << ". ";
                    error_message << "Found version is " << major_version << "." << minor_version << "." << patch_version << ".";
                    throw std::runtime_error(error_message.str());
                }
            }

            Initialization();
            Initialization(const Initialization&);
            #ifdef MAPPEDTYPES_CPP_COMPILER_HAS_MOVE_CONSTRUCTOR_DELETE
                Initialization(Initialization &&) = delete;
            #endif /* MAPPEDTYPES_CPP_COMPILER_HAS_MOVE_CONSTRUCTOR_DELETE */
        public:
            Initialization(const char* shared_library_name)
            {
                load_module(shared_library_name);
            }
            ~Initialization()
            {
                #ifdef _WIN32
                    FreeLibrary(handle);
                #else /* _WIN32 */
                    dlclose(handle);
                #endif /* _WIN32 */
                #ifdef mapped_types_get_major_version_zero_function_pointer
                    mapped_types_get_major_version_zero_function_pointer
                #else /* mapped_types_get_major_version_zero_function_pointer */
                    mapped_types_get_major_version = 0;
                #endif /* mapped_types_get_major_version_zero_function_pointer */
                #ifdef mapped_types_get_minor_version_zero_function_pointer
                    mapped_types_get_minor_version_zero_function_pointer
                #else /* mapped_types_get_minor_version_zero_function_pointer */
                    mapped_types_get_minor_version = 0;
                #endif /* mapped_types_get_minor_version_zero_function_pointer */
                #ifdef mapped_types_get_patch_version_zero_function_pointer
                    mapped_types_get_patch_version_zero_function_pointer
                #else /* mapped_types_get_patch_version_zero_function_pointer */
                    mapped_types_get_patch_version = 0;
                #endif /* mapped_types_get_patch_version_zero_function_pointer */
                #ifdef mapped_types_person_default_zero_function_pointer
                    mapped_types_person_default_zero_function_pointer
                #else /* mapped_types_person_default_zero_function_pointer */
                    mapped_types_person_default = 0;
                #endif /* mapped_types_person_default_zero_function_pointer */
                #ifdef mapped_types_person_is_man_const_zero_function_pointer
                    mapped_types_person_is_man_const_zero_function_pointer
                #else /* mapped_types_person_is_man_const_zero_function_pointer */
                    mapped_types_person_is_man_const = 0;
                #endif /* mapped_types_person_is_man_const_zero_function_pointer */
                #ifdef mapped_types_person_set_sex_zero_function_pointer
                    mapped_types_person_set_sex_zero_function_pointer
                #else /* mapped_types_person_set_sex_zero_function_pointer */
                    mapped_types_person_set_sex = 0;
                #endif /* mapped_types_person_set_sex_zero_function_pointer */
                #ifdef mapped_types_person_get_age_const_zero_function_pointer
                    mapped_types_person_get_age_const_zero_function_pointer
                #else /* mapped_types_person_get_age_const_zero_function_pointer */
                    mapped_types_person_get_age_const = 0;
                #endif /* mapped_types_person_get_age_const_zero_function_pointer */
                #ifdef mapped_types_person_set_age_zero_function_pointer
                    mapped_types_person_set_age_zero_function_pointer
                #else /* mapped_types_person_set_age_zero_function_pointer */
                    mapped_types_person_set_age = 0;
                #endif /* mapped_types_person_set_age_zero_function_pointer */
                #ifdef mapped_types_person_get_first_name_const_zero_function_pointer
                    mapped_types_person_get_first_name_const_zero_function_pointer
                #else /* mapped_types_person_get_first_name_const_zero_function_pointer */
                    mapped_types_person_get_first_name_const = 0;
                #endif /* mapped_types_person_get_first_name_const_zero_function_pointer */
                #ifdef mapped_types_person_set_first_name_zero_function_pointer
                    mapped_types_person_set_first_name_zero_function_pointer
                #else /* mapped_types_person_set_first_name_zero_function_pointer */
                    mapped_types_person_set_first_name = 0;
                #endif /* mapped_types_person_set_first_name_zero_function_pointer */
                #ifdef mapped_types_person_get_second_name_const_zero_function_pointer
                    mapped_types_person_get_second_name_const_zero_function_pointer
                #else /* mapped_types_person_get_second_name_const_zero_function_pointer */
                    mapped_types_person_get_second_name_const = 0;
                #endif /* mapped_types_person_get_second_name_const_zero_function_pointer */
                #ifdef mapped_types_person_set_second_name_zero_function_pointer
                    mapped_types_person_set_second_name_zero_function_pointer
                #else /* mapped_types_person_set_second_name_zero_function_pointer */
                    mapped_types_person_set_second_name = 0;
                #endif /* mapped_types_person_set_second_name_zero_function_pointer */
                #ifdef mapped_types_person_copy_zero_function_pointer
                    mapped_types_person_copy_zero_function_pointer
                #else /* mapped_types_person_copy_zero_function_pointer */
                    mapped_types_person_copy = 0;
                #endif /* mapped_types_person_copy_zero_function_pointer */
                #ifdef mapped_types_person_delete_zero_function_pointer
                    mapped_types_person_delete_zero_function_pointer
                #else /* mapped_types_person_delete_zero_function_pointer */
                    mapped_types_person_delete = 0;
                #endif /* mapped_types_person_delete_zero_function_pointer */
                #ifdef mapped_types_device_default_zero_function_pointer
                    mapped_types_device_default_zero_function_pointer
                #else /* mapped_types_device_default_zero_function_pointer */
                    mapped_types_device_default = 0;
                #endif /* mapped_types_device_default_zero_function_pointer */
                #ifdef mapped_types_device_get_name_const_zero_function_pointer
                    mapped_types_device_get_name_const_zero_function_pointer
                #else /* mapped_types_device_get_name_const_zero_function_pointer */
                    mapped_types_device_get_name_const = 0;
                #endif /* mapped_types_device_get_name_const_zero_function_pointer */
                #ifdef mapped_types_device_set_name_zero_function_pointer
                    mapped_types_device_set_name_zero_function_pointer
                #else /* mapped_types_device_set_name_zero_function_pointer */
                    mapped_types_device_set_name = 0;
                #endif /* mapped_types_device_set_name_zero_function_pointer */
                #ifdef mapped_types_device_is_busy_const_zero_function_pointer
                    mapped_types_device_is_busy_const_zero_function_pointer
                #else /* mapped_types_device_is_busy_const_zero_function_pointer */
                    mapped_types_device_is_busy_const = 0;
                #endif /* mapped_types_device_is_busy_const_zero_function_pointer */
                #ifdef mapped_types_device_set_busy_zero_function_pointer
                    mapped_types_device_set_busy_zero_function_pointer
                #else /* mapped_types_device_set_busy_zero_function_pointer */
                    mapped_types_device_set_busy = 0;
                #endif /* mapped_types_device_set_busy_zero_function_pointer */
                #ifdef mapped_types_device_copy_zero_function_pointer
                    mapped_types_device_copy_zero_function_pointer
                #else /* mapped_types_device_copy_zero_function_pointer */
                    mapped_types_device_copy = 0;
                #endif /* mapped_types_device_copy_zero_function_pointer */
                #ifdef mapped_types_device_delete_zero_function_pointer
                    mapped_types_device_delete_zero_function_pointer
                #else /* mapped_types_device_delete_zero_function_pointer */
                    mapped_types_device_delete = 0;
                #endif /* mapped_types_device_delete_zero_function_pointer */
            }
        };
    }

    #endif /* __cplusplus */

#endif /* MAPPEDTYPES_CAPI_USE_DYNAMIC_LOADER */

#endif /* MAPPEDTYPES_CAPI_INCLUDED */

