/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#ifndef EXAMPLE_DOCUMENT_DEFINITION_INCLUDED
#define EXAMPLE_DOCUMENT_DEFINITION_INCLUDED

#include "Example/DocumentDecl.h"
#include "Example/Page.h"

#ifdef __cplusplus

inline Example::DocumentPtr::DocumentPtr()
{
    SetObject(example_document_default());
}

inline void Example::DocumentPtr::Show() const
{
    example_document_show(this->GetRawPointer());
}

inline Example::PagePtr Example::DocumentPtr::GetPage() const
{
    return Example::PagePtr(Example::PagePtr::force_creating_from_raw_pointer, example_document_get_page(this->GetRawPointer()), true);
}

inline void Example::DocumentPtr::SetPage(const Example::PagePtr& value)
{
    example_document_set_page(this->GetRawPointer(), value.GetRawPointer());
}

inline Example::DocumentPtr::DocumentPtr(const DocumentPtr& other)
{
    SetObject(other.mObject);
    if (other.mObject)
    {
        example_document_add_ref(other.mObject);
    }
}

inline Example::DocumentPtr::DocumentPtr(Example::DocumentPtr::ECreateFromRawPointer, void *object_pointer, bool add_ref_object)
{
    SetObject(object_pointer);
    if (add_ref_object && object_pointer)
    {
        example_document_add_ref(object_pointer);
    }
}

inline Example::DocumentPtr::~DocumentPtr()
{
    if (mObject)
    {
        example_document_release(mObject);
        SetObject(0);
    }
}

inline Example::DocumentPtr& Example::DocumentPtr::operator=(const Example::DocumentPtr& other)
{
    if (mObject != other.mObject)
    {
        if (mObject)
        {
            example_document_release(mObject);
            SetObject(0);
        }
        SetObject(other.mObject);
        if (other.mObject)
        {
            example_document_add_ref(other.mObject);
        }
    }
    return *this;
}

inline Example::DocumentPtr Example::DocumentPtr::Null()
{
    return Example::DocumentPtr(Example::DocumentPtr::force_creating_from_raw_pointer, 0, false);
}

inline bool Example::DocumentPtr::IsNull() const
{
    return !mObject;
}

inline bool Example::DocumentPtr::IsNotNull() const
{
    return mObject != 0;
}

inline bool Example::DocumentPtr::operator!() const
{
    return !mObject;
}

inline void* Example::DocumentPtr::Detach()
{
    void* result = mObject;
    SetObject(0);
    return result;
}

inline void* Example::DocumentPtr::GetRawPointer() const
{
    return mObject;
}

inline Example::DocumentPtr* Example::DocumentPtr::operator->()
{
    return this;
}

inline const Example::DocumentPtr* Example::DocumentPtr::operator->() const
{
    return this;
}

inline void Example::DocumentPtr::SetObject(void* object_pointer)
{
    mObject = object_pointer;
}

#endif /* __cplusplus */

#endif /* EXAMPLE_DOCUMENT_DEFINITION_INCLUDED */

