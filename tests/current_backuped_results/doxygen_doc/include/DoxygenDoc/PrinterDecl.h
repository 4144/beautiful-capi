/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#ifndef DOXYGENDOC_PRINTER_DECLARATION_INCLUDED
#define DOXYGENDOC_PRINTER_DECLARATION_INCLUDED

#include "DoxygenDocCapi.h"
#include "DoxygenDocFwd.h"

#ifdef __cplusplus

namespace DoxygenDoc {

class Printer
{
public:
    inline Printer();
    /**
     * @brief Prints the @ref DoxygenDoc::Name by value.
     * 
     * 
     * 
     * 
     * @param name  @ref DoxygenDoc::Name 
     */
    inline void Show(const DoxygenDoc::Name& name);
    /**
     * @brief Prints the @ref DoxygenDoc::Name by pointer.
     * 
     * 
     * 
     * 
     * @param name The pointer on @ref DoxygenDoc::Name .
     */
    inline void ShowByPointer(const DoxygenDoc::Name& name);
    /**
     * @brief Prints the @ref DoxygenDoc::Name by reference.
     * 
     * 
     * 
     * 
     * @param name The reference on @ref DoxygenDoc::Name .
     */
    inline void ShowByReference(const DoxygenDoc::Name& name);
    /**
     * @brief Prints the @ref DoxygenDoc::PersonRawPtr by value.
     * 
     * 
     * 
     * 
     * @param person  @ref DoxygenDoc::PersonRawPtr 
     */
    inline void Show(const DoxygenDoc::PersonRawPtr& person);
    /**
     * @brief Prints the @ref DoxygenDoc::PersonRawPtr by pointer.
     * 
     * 
     * 
     * 
     * @param person The pointer on @ref DoxygenDoc::PersonRawPtr .
     */
    inline void ShowByPointer(const DoxygenDoc::PersonRawPtr& person);
    /**
     * @brief Prints the @ref DoxygenDoc::PersonRawPtr by reference.
     * 
     * 
     * 
     * 
     * @param person The reference on @ref DoxygenDoc::PersonRawPtr .
     */
    inline void ShowByReference(const DoxygenDoc::PersonRawPtr& person);
    /**
     * @brief Prints the @ref DoxygenDoc::AddressPtr by value.
     * 
     * 
     * 
     * 
     * @param address  @ref DoxygenDoc::AddressPtr 
     */
    inline void Show(const DoxygenDoc::AddressPtr& address);
    /**
     * @brief Prints the @ref DoxygenDoc::AddressPtr by pointer.
     * 
     * 
     * 
     * 
     * @param address The pointer on @ref DoxygenDoc::AddressPtr .
     */
    inline void ShowByPointer(const DoxygenDoc::AddressPtr& address);
    /**
     * @brief Prints the @ref DoxygenDoc::AddressPtr by reference.
     * 
     * 
     * 
     * 
     * @param address The reference on @ref DoxygenDoc::AddressPtr .
     */
    inline void ShowByReference(const DoxygenDoc::AddressPtr& address);

    inline Printer(const Printer& other);
    #ifdef DOXYGENDOC_CPP_COMPILER_HAS_RVALUE_REFERENCES
    inline Printer(Printer&& other);
    #endif /* DOXYGENDOC_CPP_COMPILER_HAS_RVALUE_REFERENCES */
    enum ECreateFromRawPointer { force_creating_from_raw_pointer };
    inline Printer(ECreateFromRawPointer, void *object_pointer, bool copy_object);
    inline ~Printer();
    inline Printer& operator=(const Printer& other);
    #ifdef DOXYGENDOC_CPP_COMPILER_HAS_RVALUE_REFERENCES
    inline Printer& operator=(Printer&& other);
    #endif /* DOXYGENDOC_CPP_COMPILER_HAS_RVALUE_REFERENCES */
    static inline Printer Null();
    inline bool IsNull() const;
    inline bool IsNotNull() const;
    inline bool operator!() const;
    inline void* Detach();
    inline void* GetRawPointer() const;
protected:
    inline void SetObject(void* object_pointer);
    void* mObject;
};

}

#endif /* __cplusplus */

#endif /* DOXYGENDOC_PRINTER_DECLARATION_INCLUDED */

