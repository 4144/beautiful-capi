/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#ifndef DOXYGENDOC_PERSON_DECLARATION_INCLUDED
#define DOXYGENDOC_PERSON_DECLARATION_INCLUDED

#include "DoxygenDocCapi.h"
#include "DoxygenDocFwd.h"

#ifdef __cplusplus

namespace DoxygenDoc {

/**
 * @brief Represents a person.
 * 
 * 
 * 
 * 
 */
class PersonRawPtr
{
public:
    /**
     * @brief Creates a default person.
     * 
     * 
     * 
     * 
     */
    inline PersonRawPtr();
    /**
     * @brief Gets the @ref DoxygenDoc::Name .
     * 
     * 
     * 
     * 
     */
    inline DoxygenDoc::Name GetName() const;
    /**
     * @brief Sets the @ref DoxygenDoc::Name .
     * 
     * 
     * 
     * 
     */
    inline void SetName(const DoxygenDoc::Name& name);
    /**
     * @brief Gets the @ref DoxygenDoc::AddressPtr .
     * 
     * 
     * 
     * 
     */
    inline DoxygenDoc::AddressPtr GetAddress() const;
    /**
     * @brief Sets the @ref DoxygenDoc::AddressPtr .
     * 
     * 
     * 
     * 
     */
    inline void SetAddress(const DoxygenDoc::AddressPtr& address);
    /**
     * @brief Gets the day.
     * 
     * 
     * 
     * 
     */
    inline unsigned int GetDay() const;
    /**
     * @brief Sets the day.
     * 
     * 
     * 
     * 
     */
    inline void SetDay(unsigned int day);
    /**
     * @brief Gets the month.
     * 
     * 
     * 
     * 
     */
    inline unsigned int GetMonth() const;
    /**
     * @brief Sets the month.
     * 
     * 
     * 
     * 
     */
    inline void SetMonth(unsigned int month);
    /**
     * @brief Gets the year.
     * 
     * 
     * 
     * 
     */
    inline unsigned int GetYear() const;
    /**
     * @brief Sets the year.
     * 
     * 
     * 
     * 
     */
    inline void SetYear(unsigned int year);

    inline PersonRawPtr(const PersonRawPtr& other);
    #ifdef DOXYGENDOC_CPP_COMPILER_HAS_RVALUE_REFERENCES
    inline PersonRawPtr(PersonRawPtr&& other);
    #endif /* DOXYGENDOC_CPP_COMPILER_HAS_RVALUE_REFERENCES */
    enum ECreateFromRawPointer { force_creating_from_raw_pointer };
    inline PersonRawPtr(ECreateFromRawPointer, void *object_pointer, bool);
    inline void Delete();
    inline PersonRawPtr& operator=(const PersonRawPtr& other);
    #ifdef DOXYGENDOC_CPP_COMPILER_HAS_RVALUE_REFERENCES
    inline PersonRawPtr& operator=(PersonRawPtr&& other);
    #endif /* DOXYGENDOC_CPP_COMPILER_HAS_RVALUE_REFERENCES */
    static inline PersonRawPtr Null();
    inline bool IsNull() const;
    inline bool IsNotNull() const;
    inline bool operator!() const;
    inline void* Detach();
    inline void* GetRawPointer() const;
    inline PersonRawPtr* operator->();
    inline const PersonRawPtr* operator->() const;
protected:
    inline void SetObject(void* object_pointer);
    void* mObject;
};

}

#endif /* __cplusplus */

#endif /* DOXYGENDOC_PERSON_DECLARATION_INCLUDED */

