/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#ifndef OVERLOADSUFFIX_PRINTER_DEFINITION_INCLUDED
#define OVERLOADSUFFIX_PRINTER_DEFINITION_INCLUDED

#include "OverloadSuffix/PrinterDecl.h"

#ifdef __cplusplus

inline OverloadSuffix::Printer::Printer()
{
    SetObject(OverloadSuffix::Printer(OverloadSuffix::Printer::force_creating_from_raw_pointer, overload_suffix_printer_default(), false).Detach());
}

inline void OverloadSuffix::Printer::Show()
{
    overload_suffix_printer_show(GetRawPointer());
}

inline void OverloadSuffix::Printer::Show() const
{
    overload_suffix_printer_show_const(GetRawPointer());
}

inline void OverloadSuffix::Printer::Show(int a)
{
    overload_suffix_printer_show_int(GetRawPointer(), a);
}

inline void OverloadSuffix::Printer::Show(double a)
{
    overload_suffix_printer_show_1(GetRawPointer(), a);
}

inline OverloadSuffix::Printer::Printer(const Printer& other)
{
    if (other.GetRawPointer())
    {
        SetObject(overload_suffix_printer_copy(other.GetRawPointer()));
    }
    else
    {
        SetObject(0);
    }
}

#ifdef OVERLOADSUFFIX_CPP_COMPILER_HAS_RVALUE_REFERENCES
inline OverloadSuffix::Printer::Printer(Printer&& other)
{
    mObject = other.mObject;
    other.mObject = 0;
}
#endif /* OVERLOADSUFFIX_CPP_COMPILER_HAS_RVALUE_REFERENCES */

inline OverloadSuffix::Printer::Printer(OverloadSuffix::Printer::ECreateFromRawPointer, void *object_pointer, bool copy_object)
{
    if (object_pointer && copy_object)
    {
        SetObject(overload_suffix_printer_copy(object_pointer));
    }
    else
    {
        SetObject(object_pointer);
    }
}

inline OverloadSuffix::Printer::~Printer()
{
    if (GetRawPointer())
    {
        overload_suffix_printer_delete(GetRawPointer());
        SetObject(0);
    }
}

inline OverloadSuffix::Printer& OverloadSuffix::Printer::operator=(const OverloadSuffix::Printer& other)
{
    if (this != &other)
    {
        if (GetRawPointer())
        {
            overload_suffix_printer_delete(GetRawPointer());
            SetObject(0);
        }
        if (other.GetRawPointer())
        {
            SetObject(overload_suffix_printer_copy(other.mObject));
        }
        else
        {
            SetObject(0);
        }
    }
    return *this;
}

#ifdef OVERLOADSUFFIX_CPP_COMPILER_HAS_RVALUE_REFERENCES
inline OverloadSuffix::Printer& OverloadSuffix::Printer::operator=(OverloadSuffix::Printer&& other)
{
    if (this != &other)
    {
        if (GetRawPointer())
        {
            overload_suffix_printer_delete(GetRawPointer());
            SetObject(0);
        }
        mObject = other.mObject;
        other.mObject = 0;
    }
    return *this;
}
#endif /* OVERLOADSUFFIX_CPP_COMPILER_HAS_RVALUE_REFERENCES */

inline OverloadSuffix::Printer OverloadSuffix::Printer::Null()
{
    return OverloadSuffix::Printer(OverloadSuffix::Printer::force_creating_from_raw_pointer, static_cast<void*>(0), false);
}

inline bool OverloadSuffix::Printer::IsNull() const
{
    return !GetRawPointer();
}

inline bool OverloadSuffix::Printer::IsNotNull() const
{
    return GetRawPointer() != 0;
}

inline bool OverloadSuffix::Printer::operator!() const
{
    return !GetRawPointer();
}

inline void* OverloadSuffix::Printer::Detach()
{
    void* result = GetRawPointer();
    SetObject(0);
    return result;
}

inline void* OverloadSuffix::Printer::GetRawPointer() const
{
    return OverloadSuffix::Printer::mObject ? mObject: 0;
}

inline void OverloadSuffix::Printer::SetObject(void* object_pointer)
{
    mObject = object_pointer;
}

#endif /* __cplusplus */

#endif /* OVERLOADSUFFIX_PRINTER_DEFINITION_INCLUDED */

