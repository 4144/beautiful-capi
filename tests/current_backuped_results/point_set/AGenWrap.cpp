/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#include <stdexcept>
#include <cassert>
#include "PositionImpl.h"
#include "PointsImpl.h"
#include "PointSetImpl.h"

#ifdef _WIN32
    #ifdef __GNUC__
        #define POINTSET_API extern "C" __attribute__ ((dllexport))
        #define POINTSET_API_CONVENTION __attribute__ ((cdecl))
    #else
        #define POINTSET_API extern "C" __declspec(dllexport)
        #define POINTSET_API_CONVENTION __cdecl
    #endif
#elif __APPLE__
    #if defined(__GNUC__) && __GNUC__ >= 4
        #define POINTSET_API extern "C" __attribute__ ((visibility ("default")))
    #else
        #define POINTSET_API extern "C"
    #endif
    #ifdef __i386__
        #define POINTSET_API_CONVENTION __attribute__ ((cdecl))
    #else /* __i386__ */
        #define POINTSET_API_CONVENTION
    #endif /* __i386__ */
#elif __unix__ || __linux__
    #if defined(__GNUC__) && __GNUC__ >= 4
        #define POINTSET_API extern "C" __attribute__ ((visibility ("default")))
    #else
        #define POINTSET_API extern "C"
    #endif
    #ifdef __i386__
        #define POINTSET_API_CONVENTION __attribute__ ((cdecl))
    #else /* __i386__ */
        #define POINTSET_API_CONVENTION
    #endif /* __i386__ */
#else
    #error "Unknown platform"
#endif

int AutoGen_Internal_PointSet_PointSetGetMajorVersionImpl()
{
    return 1;
}

int AutoGen_Internal_PointSet_PointSetGetMinorVersionImpl()
{
    return 0;
}

int AutoGen_Internal_PointSet_PointSetGetPatchVersionImpl()
{
    return 0;
}

POINTSET_API int POINTSET_API_CONVENTION point_set_get_major_version()
{
    return AutoGen_Internal_PointSet_PointSetGetMajorVersionImpl();
}

POINTSET_API int POINTSET_API_CONVENTION point_set_get_minor_version()
{
    return AutoGen_Internal_PointSet_PointSetGetMinorVersionImpl();
}

POINTSET_API int POINTSET_API_CONVENTION point_set_get_patch_version()
{
    return AutoGen_Internal_PointSet_PointSetGetPatchVersionImpl();
}

POINTSET_API void* POINTSET_API_CONVENTION point_set_position_default()
{
    return new PointSet::PositionImpl();
}

POINTSET_API void* POINTSET_API_CONVENTION point_set_position_initialized(double X, double Y, double Z)
{
    return new PointSet::PositionImpl(X, Y, Z);
}

POINTSET_API double POINTSET_API_CONVENTION point_set_position_get_x_const(void* object_pointer)
{
    const PointSet::PositionImpl* self = static_cast<PointSet::PositionImpl*>(object_pointer);
    return self->GetX();
}

POINTSET_API void POINTSET_API_CONVENTION point_set_position_set_x(void* object_pointer, double value)
{
    PointSet::PositionImpl* self = static_cast<PointSet::PositionImpl*>(object_pointer);
    self->SetX(value);
}

POINTSET_API double POINTSET_API_CONVENTION point_set_position_get_y_const(void* object_pointer)
{
    const PointSet::PositionImpl* self = static_cast<PointSet::PositionImpl*>(object_pointer);
    return self->GetY();
}

POINTSET_API void POINTSET_API_CONVENTION point_set_position_set_y(void* object_pointer, double value)
{
    PointSet::PositionImpl* self = static_cast<PointSet::PositionImpl*>(object_pointer);
    self->SetY(value);
}

POINTSET_API double POINTSET_API_CONVENTION point_set_position_get_z_const(void* object_pointer)
{
    const PointSet::PositionImpl* self = static_cast<PointSet::PositionImpl*>(object_pointer);
    return self->GetZ();
}

POINTSET_API void POINTSET_API_CONVENTION point_set_position_set_z(void* object_pointer, double value)
{
    PointSet::PositionImpl* self = static_cast<PointSet::PositionImpl*>(object_pointer);
    self->SetZ(value);
}

POINTSET_API void* POINTSET_API_CONVENTION point_set_position_copy(void* object_pointer)
{
    return new PointSet::PositionImpl(*static_cast<PointSet::PositionImpl*>(object_pointer));
}

POINTSET_API void POINTSET_API_CONVENTION point_set_position_delete(void* object_pointer)
{
    delete static_cast<PointSet::PositionImpl*>(object_pointer);
}

POINTSET_API void* POINTSET_API_CONVENTION point_set_points_default()
{
    return new PointSet::PointsImpl();
}

POINTSET_API size_t POINTSET_API_CONVENTION point_set_points_size_const(void* object_pointer)
{
    const PointSet::PointsImpl* self = static_cast<PointSet::PointsImpl*>(object_pointer);
    return self->Size();
}

POINTSET_API void POINTSET_API_CONVENTION point_set_points_reserve(void* object_pointer, size_t capacity)
{
    PointSet::PointsImpl* self = static_cast<PointSet::PointsImpl*>(object_pointer);
    self->Reserve(capacity);
}

POINTSET_API void POINTSET_API_CONVENTION point_set_points_resize(void* object_pointer, size_t size, void* default_value)
{
    PointSet::PointsImpl* self = static_cast<PointSet::PointsImpl*>(object_pointer);
    self->Resize(size, *static_cast<PointSet::PositionImpl*>(default_value));
}

POINTSET_API void* POINTSET_API_CONVENTION point_set_points_get_element_const(void* object_pointer, size_t index)
{
    const PointSet::PointsImpl* self = static_cast<PointSet::PointsImpl*>(object_pointer);
    return new PointSet::PositionImpl(self->GetElement(index));
}

POINTSET_API void POINTSET_API_CONVENTION point_set_points_set_element(void* object_pointer, size_t index, void* value)
{
    PointSet::PointsImpl* self = static_cast<PointSet::PointsImpl*>(object_pointer);
    self->SetElement(index, *static_cast<PointSet::PositionImpl*>(value));
}

POINTSET_API void POINTSET_API_CONVENTION point_set_points_push_back(void* object_pointer, void* value)
{
    PointSet::PointsImpl* self = static_cast<PointSet::PointsImpl*>(object_pointer);
    self->PushBack(*static_cast<PointSet::PositionImpl*>(value));
}

POINTSET_API void POINTSET_API_CONVENTION point_set_points_clear(void* object_pointer)
{
    PointSet::PointsImpl* self = static_cast<PointSet::PointsImpl*>(object_pointer);
    self->Clear();
}

POINTSET_API void POINTSET_API_CONVENTION point_set_points_add_ref(void* object_pointer)
{
    intrusive_ptr_add_ref(static_cast<PointSet::PointsImpl*>(object_pointer));
}

POINTSET_API void POINTSET_API_CONVENTION point_set_points_release(void* object_pointer)
{
    intrusive_ptr_release(static_cast<PointSet::PointsImpl*>(object_pointer));
}

POINTSET_API void* POINTSET_API_CONVENTION point_set_point_set_default()
{
    return new PointSet::PointSetImpl();
}

POINTSET_API const char* POINTSET_API_CONVENTION point_set_point_set_get_name_const(void* object_pointer)
{
    const PointSet::PointSetImpl* self = static_cast<PointSet::PointSetImpl*>(object_pointer);
    return self->GetName();
}

POINTSET_API void POINTSET_API_CONVENTION point_set_point_set_set_name(void* object_pointer, const char* name)
{
    PointSet::PointSetImpl* self = static_cast<PointSet::PointSetImpl*>(object_pointer);
    self->SetName(name);
}

POINTSET_API void* POINTSET_API_CONVENTION point_set_point_set_get_points_const(void* object_pointer)
{
    const PointSet::PointSetImpl* self = static_cast<PointSet::PointSetImpl*>(object_pointer);
    return self->GetPoints();
}

POINTSET_API void POINTSET_API_CONVENTION point_set_point_set_set_points(void* object_pointer, void* value)
{
    PointSet::PointSetImpl* self = static_cast<PointSet::PointSetImpl*>(object_pointer);
    self->SetPoints(static_cast<PointSet::PointsImpl*>(value));
}

POINTSET_API void POINTSET_API_CONVENTION point_set_point_set_add_ref(void* object_pointer)
{
    intrusive_ptr_add_ref(static_cast<PointSet::PointSetImpl*>(object_pointer));
}

POINTSET_API void POINTSET_API_CONVENTION point_set_point_set_release(void* object_pointer)
{
    intrusive_ptr_release(static_cast<PointSet::PointSetImpl*>(object_pointer));
}
