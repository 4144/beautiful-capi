/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#ifndef POINTSET_CAPI_INCLUDED
#define POINTSET_CAPI_INCLUDED

#ifdef __cplusplus
    #define POINTSET_CAPI_PREFIX extern "C"
#else /* __cplusplus */
    #define POINTSET_CAPI_PREFIX
#endif /* __cplusplus */

#ifdef _WIN32
    #ifdef __GNUC__
        #define POINTSET_API POINTSET_CAPI_PREFIX __attribute__ ((dllimport))
        #define POINTSET_API_CONVENTION __attribute__ ((cdecl))
    #else
        #define POINTSET_API POINTSET_CAPI_PREFIX __declspec(dllimport)
        #define POINTSET_API_CONVENTION __cdecl
    #endif
#elif __APPLE__
    #if defined(__GNUC__) && __GNUC__ >= 4
        #define POINTSET_API POINTSET_CAPI_PREFIX __attribute__ ((visibility ("default")))
    #else
        #define POINTSET_API POINTSET_CAPI_PREFIX
    #endif
    #ifdef __i386__
        #define POINTSET_API_CONVENTION __attribute__ ((cdecl))
    #else /* __i386__ */
        #define POINTSET_API_CONVENTION
    #endif /* __i386__ */
#elif __unix__ || __linux__
    #if defined(__GNUC__) && __GNUC__ >= 4
        #define POINTSET_API POINTSET_CAPI_PREFIX __attribute__ ((visibility ("default")))
    #else
        #define POINTSET_API POINTSET_CAPI_PREFIX
    #endif
    #ifdef __i386__
        #define POINTSET_API_CONVENTION __attribute__ ((cdecl))
    #else /* __i386__ */
        #define POINTSET_API_CONVENTION
    #endif /* __i386__ */
#else
    #error "Unknown platform"
#endif

#ifdef __cplusplus

    #ifdef _MSC_VER
        #if _MSC_VER >= 1900
            #define POINTSET_NOEXCEPT noexcept
        #else /* _MSC_VER >= 1900 */
            #define POINTSET_NOEXCEPT
        #endif /* _MSC_VER >= 1900 */
        #if _MSC_VER >= 1800
            #define POINTSET_CPP_COMPILER_HAS_RVALUE_REFERENCES
        #endif /* _MSC_VER >= 1800 */
    #else /* _MSC_VER */
        #if __cplusplus >= 201103L
            #define POINTSET_NOEXCEPT noexcept
            #define POINTSET_CPP_COMPILER_HAS_RVALUE_REFERENCES
        #else /* __cplusplus >= 201103L */
            #define POINTSET_NOEXCEPT
        #endif /* __cplusplus >= 201103L */
    #endif /* _MSC_VER */

#endif /* __cplusplus */

#ifndef POINTSET_CAPI_USE_DYNAMIC_LOADER
    
    POINTSET_API void* POINTSET_API_CONVENTION point_set_position_default();
    POINTSET_API void* POINTSET_API_CONVENTION point_set_position_initialized(double X, double Y, double Z);
    POINTSET_API double POINTSET_API_CONVENTION point_set_position_get_x(void* object_pointer);
    POINTSET_API void POINTSET_API_CONVENTION point_set_position_set_x(void* object_pointer, double value);
    POINTSET_API double POINTSET_API_CONVENTION point_set_position_get_y(void* object_pointer);
    POINTSET_API void POINTSET_API_CONVENTION point_set_position_set_y(void* object_pointer, double value);
    POINTSET_API double POINTSET_API_CONVENTION point_set_position_get_z(void* object_pointer);
    POINTSET_API void POINTSET_API_CONVENTION point_set_position_set_z(void* object_pointer, double value);
    POINTSET_API void* POINTSET_API_CONVENTION point_set_position_copy(void* object_pointer);
    POINTSET_API void POINTSET_API_CONVENTION point_set_position_delete(void* object_pointer);
    POINTSET_API void* POINTSET_API_CONVENTION point_set_points_default();
    POINTSET_API size_t POINTSET_API_CONVENTION point_set_points_size(void* object_pointer);
    POINTSET_API void POINTSET_API_CONVENTION point_set_points_reserve(void* object_pointer, size_t capacity);
    POINTSET_API void POINTSET_API_CONVENTION point_set_points_resize(void* object_pointer, size_t size, void* default_value);
    POINTSET_API void* POINTSET_API_CONVENTION point_set_points_get_element(void* object_pointer, size_t index);
    POINTSET_API void POINTSET_API_CONVENTION point_set_points_set_element(void* object_pointer, size_t index, void* value);
    POINTSET_API void POINTSET_API_CONVENTION point_set_points_push_back(void* object_pointer, void* value);
    POINTSET_API void POINTSET_API_CONVENTION point_set_points_clear(void* object_pointer);
    POINTSET_API void POINTSET_API_CONVENTION point_set_points_add_ref(void* object_pointer);
    POINTSET_API void POINTSET_API_CONVENTION point_set_points_release(void* object_pointer);
    POINTSET_API void* POINTSET_API_CONVENTION point_set_point_set_default();
    POINTSET_API const char* POINTSET_API_CONVENTION point_set_point_set_get_name(void* object_pointer);
    POINTSET_API void POINTSET_API_CONVENTION point_set_point_set_set_name(void* object_pointer, const char* name);
    POINTSET_API void* POINTSET_API_CONVENTION point_set_point_set_get_points(void* object_pointer);
    POINTSET_API void POINTSET_API_CONVENTION point_set_point_set_set_points(void* object_pointer, void* value);
    POINTSET_API void POINTSET_API_CONVENTION point_set_point_set_add_ref(void* object_pointer);
    POINTSET_API void POINTSET_API_CONVENTION point_set_point_set_release(void* object_pointer);
    
#else /* POINTSET_CAPI_USE_DYNAMIC_LOADER */
    
    typedef void* (POINTSET_API_CONVENTION *point_set_position_default_function_type)();
    typedef void* (POINTSET_API_CONVENTION *point_set_position_initialized_function_type)(double X, double Y, double Z);
    typedef double (POINTSET_API_CONVENTION *point_set_position_get_x_function_type)(void* object_pointer);
    typedef void (POINTSET_API_CONVENTION *point_set_position_set_x_function_type)(void* object_pointer, double value);
    typedef double (POINTSET_API_CONVENTION *point_set_position_get_y_function_type)(void* object_pointer);
    typedef void (POINTSET_API_CONVENTION *point_set_position_set_y_function_type)(void* object_pointer, double value);
    typedef double (POINTSET_API_CONVENTION *point_set_position_get_z_function_type)(void* object_pointer);
    typedef void (POINTSET_API_CONVENTION *point_set_position_set_z_function_type)(void* object_pointer, double value);
    typedef void* (POINTSET_API_CONVENTION *point_set_position_copy_function_type)(void* object_pointer);
    typedef void (POINTSET_API_CONVENTION *point_set_position_delete_function_type)(void* object_pointer);
    typedef void* (POINTSET_API_CONVENTION *point_set_points_default_function_type)();
    typedef size_t (POINTSET_API_CONVENTION *point_set_points_size_function_type)(void* object_pointer);
    typedef void (POINTSET_API_CONVENTION *point_set_points_reserve_function_type)(void* object_pointer, size_t capacity);
    typedef void (POINTSET_API_CONVENTION *point_set_points_resize_function_type)(void* object_pointer, size_t size, void* default_value);
    typedef void* (POINTSET_API_CONVENTION *point_set_points_get_element_function_type)(void* object_pointer, size_t index);
    typedef void (POINTSET_API_CONVENTION *point_set_points_set_element_function_type)(void* object_pointer, size_t index, void* value);
    typedef void (POINTSET_API_CONVENTION *point_set_points_push_back_function_type)(void* object_pointer, void* value);
    typedef void (POINTSET_API_CONVENTION *point_set_points_clear_function_type)(void* object_pointer);
    typedef void (POINTSET_API_CONVENTION *point_set_points_add_ref_function_type)(void* object_pointer);
    typedef void (POINTSET_API_CONVENTION *point_set_points_release_function_type)(void* object_pointer);
    typedef void* (POINTSET_API_CONVENTION *point_set_point_set_default_function_type)();
    typedef const char* (POINTSET_API_CONVENTION *point_set_point_set_get_name_function_type)(void* object_pointer);
    typedef void (POINTSET_API_CONVENTION *point_set_point_set_set_name_function_type)(void* object_pointer, const char* name);
    typedef void* (POINTSET_API_CONVENTION *point_set_point_set_get_points_function_type)(void* object_pointer);
    typedef void (POINTSET_API_CONVENTION *point_set_point_set_set_points_function_type)(void* object_pointer, void* value);
    typedef void (POINTSET_API_CONVENTION *point_set_point_set_add_ref_function_type)(void* object_pointer);
    typedef void (POINTSET_API_CONVENTION *point_set_point_set_release_function_type)(void* object_pointer);
    
    #ifdef POINTSET_CAPI_DEFINE_FUNCTION_POINTERS
        
        extern point_set_position_default_function_type point_set_position_default = 0;
        extern point_set_position_initialized_function_type point_set_position_initialized = 0;
        extern point_set_position_get_x_function_type point_set_position_get_x = 0;
        extern point_set_position_set_x_function_type point_set_position_set_x = 0;
        extern point_set_position_get_y_function_type point_set_position_get_y = 0;
        extern point_set_position_set_y_function_type point_set_position_set_y = 0;
        extern point_set_position_get_z_function_type point_set_position_get_z = 0;
        extern point_set_position_set_z_function_type point_set_position_set_z = 0;
        extern point_set_position_copy_function_type point_set_position_copy = 0;
        extern point_set_position_delete_function_type point_set_position_delete = 0;
        extern point_set_points_default_function_type point_set_points_default = 0;
        extern point_set_points_size_function_type point_set_points_size = 0;
        extern point_set_points_reserve_function_type point_set_points_reserve = 0;
        extern point_set_points_resize_function_type point_set_points_resize = 0;
        extern point_set_points_get_element_function_type point_set_points_get_element = 0;
        extern point_set_points_set_element_function_type point_set_points_set_element = 0;
        extern point_set_points_push_back_function_type point_set_points_push_back = 0;
        extern point_set_points_clear_function_type point_set_points_clear = 0;
        extern point_set_points_add_ref_function_type point_set_points_add_ref = 0;
        extern point_set_points_release_function_type point_set_points_release = 0;
        extern point_set_point_set_default_function_type point_set_point_set_default = 0;
        extern point_set_point_set_get_name_function_type point_set_point_set_get_name = 0;
        extern point_set_point_set_set_name_function_type point_set_point_set_set_name = 0;
        extern point_set_point_set_get_points_function_type point_set_point_set_get_points = 0;
        extern point_set_point_set_set_points_function_type point_set_point_set_set_points = 0;
        extern point_set_point_set_add_ref_function_type point_set_point_set_add_ref = 0;
        extern point_set_point_set_release_function_type point_set_point_set_release = 0;
        
    #else /* POINTSET_CAPI_DEFINE_FUNCTION_POINTERS */
        
        extern point_set_position_default_function_type point_set_position_default;
        extern point_set_position_initialized_function_type point_set_position_initialized;
        extern point_set_position_get_x_function_type point_set_position_get_x;
        extern point_set_position_set_x_function_type point_set_position_set_x;
        extern point_set_position_get_y_function_type point_set_position_get_y;
        extern point_set_position_set_y_function_type point_set_position_set_y;
        extern point_set_position_get_z_function_type point_set_position_get_z;
        extern point_set_position_set_z_function_type point_set_position_set_z;
        extern point_set_position_copy_function_type point_set_position_copy;
        extern point_set_position_delete_function_type point_set_position_delete;
        extern point_set_points_default_function_type point_set_points_default;
        extern point_set_points_size_function_type point_set_points_size;
        extern point_set_points_reserve_function_type point_set_points_reserve;
        extern point_set_points_resize_function_type point_set_points_resize;
        extern point_set_points_get_element_function_type point_set_points_get_element;
        extern point_set_points_set_element_function_type point_set_points_set_element;
        extern point_set_points_push_back_function_type point_set_points_push_back;
        extern point_set_points_clear_function_type point_set_points_clear;
        extern point_set_points_add_ref_function_type point_set_points_add_ref;
        extern point_set_points_release_function_type point_set_points_release;
        extern point_set_point_set_default_function_type point_set_point_set_default;
        extern point_set_point_set_get_name_function_type point_set_point_set_get_name;
        extern point_set_point_set_set_name_function_type point_set_point_set_set_name;
        extern point_set_point_set_get_points_function_type point_set_point_set_get_points;
        extern point_set_point_set_set_points_function_type point_set_point_set_set_points;
        extern point_set_point_set_add_ref_function_type point_set_point_set_add_ref;
        extern point_set_point_set_release_function_type point_set_point_set_release;
        
    #endif /* POINTSET_CAPI_DEFINE_FUNCTION_POINTERS */
    
    #ifdef __cplusplus
    
    #include <stdexcept>
    #include <sstream>
    
    #ifdef _WIN32
        #include <Windows.h>
    #else /* _WIN32 */
        #include <dlfcn.h>
    #endif /* _WIN32 */
    
    namespace PointSet
    {
        class Initialization
        {
            #ifdef _WIN32
                HINSTANCE handle;
            #else /* _WIN32 */
                void* handle;
            #endif /* _WIN32 */
            
            template<class FunctionPointerType>
            void load_function(FunctionPointerType& to_init, const char* name)
            {
                #ifdef _WIN32
                    to_init = reinterpret_cast<FunctionPointerType>(GetProcAddress(handle, name));
                #else /* _WIN32 */
                    to_init = reinterpret_cast<FunctionPointerType>(dlsym(handle, name));
                #endif /* _WIN32 */
                if (!to_init)
                {
                    std::stringstream error_message;
                    error_message << "Can't obtain function " << name;
                    throw std::runtime_error(error_message.str());
                }
            }
            
            void load_module(const char* shared_library_name)
            {
                if (!shared_library_name) throw std::runtime_error("Null library name was passed");
                #ifdef _WIN32
                    handle = LoadLibraryA(shared_library_name);
                #else /* _WIN32 */
                    handle = dlopen(shared_library_name, RTLD_NOW);
                #endif /* _WIN32 */
                if (!handle)
                {
                    std::stringstream error_message;
                    error_message << "Can't load shared library " << shared_library_name;
                    throw std::runtime_error(error_message.str());
                }
                load_function<point_set_position_default_function_type>(point_set_position_default, "point_set_position_default");
                load_function<point_set_position_initialized_function_type>(point_set_position_initialized, "point_set_position_initialized");
                load_function<point_set_position_get_x_function_type>(point_set_position_get_x, "point_set_position_get_x");
                load_function<point_set_position_set_x_function_type>(point_set_position_set_x, "point_set_position_set_x");
                load_function<point_set_position_get_y_function_type>(point_set_position_get_y, "point_set_position_get_y");
                load_function<point_set_position_set_y_function_type>(point_set_position_set_y, "point_set_position_set_y");
                load_function<point_set_position_get_z_function_type>(point_set_position_get_z, "point_set_position_get_z");
                load_function<point_set_position_set_z_function_type>(point_set_position_set_z, "point_set_position_set_z");
                load_function<point_set_position_copy_function_type>(point_set_position_copy, "point_set_position_copy");
                load_function<point_set_position_delete_function_type>(point_set_position_delete, "point_set_position_delete");
                load_function<point_set_points_default_function_type>(point_set_points_default, "point_set_points_default");
                load_function<point_set_points_size_function_type>(point_set_points_size, "point_set_points_size");
                load_function<point_set_points_reserve_function_type>(point_set_points_reserve, "point_set_points_reserve");
                load_function<point_set_points_resize_function_type>(point_set_points_resize, "point_set_points_resize");
                load_function<point_set_points_get_element_function_type>(point_set_points_get_element, "point_set_points_get_element");
                load_function<point_set_points_set_element_function_type>(point_set_points_set_element, "point_set_points_set_element");
                load_function<point_set_points_push_back_function_type>(point_set_points_push_back, "point_set_points_push_back");
                load_function<point_set_points_clear_function_type>(point_set_points_clear, "point_set_points_clear");
                load_function<point_set_points_add_ref_function_type>(point_set_points_add_ref, "point_set_points_add_ref");
                load_function<point_set_points_release_function_type>(point_set_points_release, "point_set_points_release");
                load_function<point_set_point_set_default_function_type>(point_set_point_set_default, "point_set_point_set_default");
                load_function<point_set_point_set_get_name_function_type>(point_set_point_set_get_name, "point_set_point_set_get_name");
                load_function<point_set_point_set_set_name_function_type>(point_set_point_set_set_name, "point_set_point_set_set_name");
                load_function<point_set_point_set_get_points_function_type>(point_set_point_set_get_points, "point_set_point_set_get_points");
                load_function<point_set_point_set_set_points_function_type>(point_set_point_set_set_points, "point_set_point_set_set_points");
                load_function<point_set_point_set_add_ref_function_type>(point_set_point_set_add_ref, "point_set_point_set_add_ref");
                load_function<point_set_point_set_release_function_type>(point_set_point_set_release, "point_set_point_set_release");
            }
            
            Initialization();
            Initialization(const Initialization&);
            #ifdef POINTSET_CPP_COMPILER_HAS_RVALUE_REFERENCES
                Initialization(Initialization &&) = delete;
            #endif /* POINTSET_CPP_COMPILER_HAS_RVALUE_REFERENCES */
        public:
            Initialization(const char* shared_library_name)
            {
                load_module(shared_library_name);
            }
            ~Initialization()
            {
                #ifdef _WIN32
                    FreeLibrary(handle);
                #else /* _WIN32 */
                    dlclose(handle);
                #endif /* _WIN32 */
                point_set_position_default = 0;
                point_set_position_initialized = 0;
                point_set_position_get_x = 0;
                point_set_position_set_x = 0;
                point_set_position_get_y = 0;
                point_set_position_set_y = 0;
                point_set_position_get_z = 0;
                point_set_position_set_z = 0;
                point_set_position_copy = 0;
                point_set_position_delete = 0;
                point_set_points_default = 0;
                point_set_points_size = 0;
                point_set_points_reserve = 0;
                point_set_points_resize = 0;
                point_set_points_get_element = 0;
                point_set_points_set_element = 0;
                point_set_points_push_back = 0;
                point_set_points_clear = 0;
                point_set_points_add_ref = 0;
                point_set_points_release = 0;
                point_set_point_set_default = 0;
                point_set_point_set_get_name = 0;
                point_set_point_set_set_name = 0;
                point_set_point_set_get_points = 0;
                point_set_point_set_set_points = 0;
                point_set_point_set_add_ref = 0;
                point_set_point_set_release = 0;
            }
        };
    }
    
    #endif /* __cplusplus */
    
#endif /* POINTSET_CAPI_USE_DYNAMIC_LOADER */

#endif /* POINTSET_CAPI_INCLUDED */

