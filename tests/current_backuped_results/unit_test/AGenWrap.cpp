/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#include <stdexcept>
#include <cassert>
#include "NameImpl.h"
#include "AddressImpl.h"
#include "PersonImpl.h"

#ifdef _WIN32
    #ifdef __GNUC__
        #define UNITTEST_API extern "C" __attribute__ ((dllexport))
        #define UNITTEST_API_CONVENTION __attribute__ ((cdecl))
    #else
        #define UNITTEST_API extern "C" __declspec(dllexport)
        #define UNITTEST_API_CONVENTION __cdecl
    #endif
#elif __APPLE__
    #if defined(__GNUC__) && __GNUC__ >= 4
        #define UNITTEST_API extern "C" __attribute__ ((visibility ("default")))
    #else
        #define UNITTEST_API extern "C"
    #endif
    #ifdef __i386__
        #define UNITTEST_API_CONVENTION __attribute__ ((cdecl))
    #else /* __i386__ */
        #define UNITTEST_API_CONVENTION
    #endif /* __i386__ */
#elif __unix__ || __linux__
    #if defined(__GNUC__) && __GNUC__ >= 4
        #define UNITTEST_API extern "C" __attribute__ ((visibility ("default")))
    #else
        #define UNITTEST_API extern "C"
    #endif
    #ifdef __i386__
        #define UNITTEST_API_CONVENTION __attribute__ ((cdecl))
    #else /* __i386__ */
        #define UNITTEST_API_CONVENTION
    #endif /* __i386__ */
#else
    #error "Unknown platform"
#endif

int AutoGen_Internal_UnitTest_UnitTestGetMajorVersionImpl()
{
    return 1;
}

int AutoGen_Internal_UnitTest_UnitTestGetMinorVersionImpl()
{
    return 0;
}

int AutoGen_Internal_UnitTest_UnitTestGetPatchVersionImpl()
{
    return 0;
}

UNITTEST_API int UNITTEST_API_CONVENTION unit_test_get_major_version()
{
    return AutoGen_Internal_UnitTest_UnitTestGetMajorVersionImpl();
}

UNITTEST_API int UNITTEST_API_CONVENTION unit_test_get_minor_version()
{
    return AutoGen_Internal_UnitTest_UnitTestGetMinorVersionImpl();
}

UNITTEST_API int UNITTEST_API_CONVENTION unit_test_get_patch_version()
{
    return AutoGen_Internal_UnitTest_UnitTestGetPatchVersionImpl();
}

UNITTEST_API void* UNITTEST_API_CONVENTION unit_test_name_full_name(const char* FirstName, const char* MiddleName, const char* LastName)
{
    return new UnitTest::NameImpl(FirstName, MiddleName, LastName);
}

UNITTEST_API const char* UNITTEST_API_CONVENTION unit_test_name_get_full_name(void* object_pointer)
{
    UnitTest::NameImpl* self = static_cast<UnitTest::NameImpl*>(object_pointer);
    return self->GetFullName();
}

UNITTEST_API const char* UNITTEST_API_CONVENTION unit_test_name_get_first_name_const(void* object_pointer)
{
    const UnitTest::NameImpl* self = static_cast<UnitTest::NameImpl*>(object_pointer);
    return self->GetFirstName();
}

UNITTEST_API void UNITTEST_API_CONVENTION unit_test_name_set_first_name(void* object_pointer, const char* first_name)
{
    UnitTest::NameImpl* self = static_cast<UnitTest::NameImpl*>(object_pointer);
    self->SetFirstName(first_name);
}

UNITTEST_API const char* UNITTEST_API_CONVENTION unit_test_name_get_middle_name_const(void* object_pointer)
{
    const UnitTest::NameImpl* self = static_cast<UnitTest::NameImpl*>(object_pointer);
    return self->GetMiddleName();
}

UNITTEST_API void UNITTEST_API_CONVENTION unit_test_name_set_middle_name(void* object_pointer, const char* middle_name)
{
    UnitTest::NameImpl* self = static_cast<UnitTest::NameImpl*>(object_pointer);
    self->SetMiddleName(middle_name);
}

UNITTEST_API const char* UNITTEST_API_CONVENTION unit_test_name_get_last_name_const(void* object_pointer)
{
    const UnitTest::NameImpl* self = static_cast<UnitTest::NameImpl*>(object_pointer);
    return self->GetLastName();
}

UNITTEST_API void UNITTEST_API_CONVENTION unit_test_name_set_last_name(void* object_pointer, const char* last_name)
{
    UnitTest::NameImpl* self = static_cast<UnitTest::NameImpl*>(object_pointer);
    self->SetLastName(last_name);
}

UNITTEST_API void* UNITTEST_API_CONVENTION unit_test_name_copy(void* object_pointer)
{
    return new UnitTest::NameImpl(*static_cast<UnitTest::NameImpl*>(object_pointer));
}

UNITTEST_API void UNITTEST_API_CONVENTION unit_test_name_delete(void* object_pointer)
{
    delete static_cast<UnitTest::NameImpl*>(object_pointer);
}

UNITTEST_API void* UNITTEST_API_CONVENTION unit_test_address_default()
{
    return new UnitTest::AddressImpl();
}

UNITTEST_API const char* UNITTEST_API_CONVENTION unit_test_address_get_street_name_const(void* object_pointer)
{
    const UnitTest::AddressImpl* self = static_cast<UnitTest::AddressImpl*>(object_pointer);
    return self->GetStreetName();
}

UNITTEST_API void UNITTEST_API_CONVENTION unit_test_address_set_street_name(void* object_pointer, const char* street_name)
{
    UnitTest::AddressImpl* self = static_cast<UnitTest::AddressImpl*>(object_pointer);
    self->SetStreetName(street_name);
}

UNITTEST_API const char* UNITTEST_API_CONVENTION unit_test_address_get_city_const(void* object_pointer)
{
    const UnitTest::AddressImpl* self = static_cast<UnitTest::AddressImpl*>(object_pointer);
    return self->GetCity();
}

UNITTEST_API void UNITTEST_API_CONVENTION unit_test_address_set_city(void* object_pointer, const char* city)
{
    UnitTest::AddressImpl* self = static_cast<UnitTest::AddressImpl*>(object_pointer);
    self->SetCity(city);
}

UNITTEST_API unsigned int UNITTEST_API_CONVENTION unit_test_address_get_state_const(void* object_pointer)
{
    const UnitTest::AddressImpl* self = static_cast<UnitTest::AddressImpl*>(object_pointer);
    return self->GetState();
}

UNITTEST_API void UNITTEST_API_CONVENTION unit_test_address_set_state(void* object_pointer, unsigned int state)
{
    UnitTest::AddressImpl* self = static_cast<UnitTest::AddressImpl*>(object_pointer);
    self->SetState(state);
}

UNITTEST_API unsigned int UNITTEST_API_CONVENTION unit_test_address_get_zip_code_const(void* object_pointer)
{
    const UnitTest::AddressImpl* self = static_cast<UnitTest::AddressImpl*>(object_pointer);
    return self->GetZipCode();
}

UNITTEST_API void UNITTEST_API_CONVENTION unit_test_address_set_zip_code(void* object_pointer, unsigned int zip_code)
{
    UnitTest::AddressImpl* self = static_cast<UnitTest::AddressImpl*>(object_pointer);
    self->SetZipCode(zip_code);
}

UNITTEST_API void UNITTEST_API_CONVENTION unit_test_address_add_ref(void* object_pointer)
{
    intrusive_ptr_add_ref(static_cast<UnitTest::AddressImpl*>(object_pointer));
}

UNITTEST_API void UNITTEST_API_CONVENTION unit_test_address_release(void* object_pointer)
{
    intrusive_ptr_release(static_cast<UnitTest::AddressImpl*>(object_pointer));
}

UNITTEST_API void* UNITTEST_API_CONVENTION unit_test_person_default()
{
    return new UnitTest::PersonImpl();
}

UNITTEST_API void* UNITTEST_API_CONVENTION unit_test_person_get_name_const(void* object_pointer)
{
    const UnitTest::PersonImpl* self = static_cast<UnitTest::PersonImpl*>(object_pointer);
    return new UnitTest::NameImpl(self->GetName());
}

UNITTEST_API void UNITTEST_API_CONVENTION unit_test_person_set_name(void* object_pointer, void* name)
{
    UnitTest::PersonImpl* self = static_cast<UnitTest::PersonImpl*>(object_pointer);
    self->SetName(*static_cast<UnitTest::NameImpl*>(name));
}

UNITTEST_API void* UNITTEST_API_CONVENTION unit_test_person_get_address_const(void* object_pointer)
{
    const UnitTest::PersonImpl* self = static_cast<UnitTest::PersonImpl*>(object_pointer);
    return self->GetAddress();
}

UNITTEST_API void UNITTEST_API_CONVENTION unit_test_person_set_address(void* object_pointer, void* address)
{
    UnitTest::PersonImpl* self = static_cast<UnitTest::PersonImpl*>(object_pointer);
    self->SetAddress(static_cast<UnitTest::AddressImpl*>(address));
}

UNITTEST_API unsigned char UNITTEST_API_CONVENTION unit_test_person_get_age_const(void* object_pointer)
{
    const UnitTest::PersonImpl* self = static_cast<UnitTest::PersonImpl*>(object_pointer);
    return self->GetAge();
}

UNITTEST_API void UNITTEST_API_CONVENTION unit_test_person_set_age(void* object_pointer, unsigned char age)
{
    UnitTest::PersonImpl* self = static_cast<UnitTest::PersonImpl*>(object_pointer);
    self->SetAge(age);
}

UNITTEST_API unsigned int UNITTEST_API_CONVENTION unit_test_person_get_sex_const(void* object_pointer)
{
    const UnitTest::PersonImpl* self = static_cast<UnitTest::PersonImpl*>(object_pointer);
    return static_cast<unsigned int>(self->GetSex());
}

UNITTEST_API void UNITTEST_API_CONVENTION unit_test_person_set_sex(void* object_pointer, unsigned int sex)
{
    UnitTest::PersonImpl* self = static_cast<UnitTest::PersonImpl*>(object_pointer);
    self->SetSex(static_cast<UnitTest::PersonImpl::Sex>(sex));
}

UNITTEST_API void* UNITTEST_API_CONVENTION unit_test_person_get_mother_const(void* object_pointer)
{
    const UnitTest::PersonImpl* self = static_cast<UnitTest::PersonImpl*>(object_pointer);
    return self->GetMother();
}

UNITTEST_API void UNITTEST_API_CONVENTION unit_test_person_set_mother(void* object_pointer, void* mother)
{
    UnitTest::PersonImpl* self = static_cast<UnitTest::PersonImpl*>(object_pointer);
    self->SetMother(static_cast<UnitTest::PersonImpl*>(mother));
}

UNITTEST_API void* UNITTEST_API_CONVENTION unit_test_person_get_father_const(void* object_pointer)
{
    const UnitTest::PersonImpl* self = static_cast<UnitTest::PersonImpl*>(object_pointer);
    return self->GetFather();
}

UNITTEST_API void UNITTEST_API_CONVENTION unit_test_person_set_father(void* object_pointer, void* father)
{
    UnitTest::PersonImpl* self = static_cast<UnitTest::PersonImpl*>(object_pointer);
    self->SetFather(static_cast<UnitTest::PersonImpl*>(father));
}

UNITTEST_API void UNITTEST_API_CONVENTION unit_test_person_delete(void* object_pointer)
{
    delete static_cast<UnitTest::PersonImpl*>(object_pointer);
}
