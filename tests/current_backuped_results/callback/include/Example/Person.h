/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#ifndef EXAMPLE_PERSON_INCLUDED
#define EXAMPLE_PERSON_INCLUDED

#include "ExampleCapi.h"
#include "ExampleFwd.h"

#ifdef __cplusplus

namespace Example { 

class Person
{
protected:
    void* mObject;
    void SetObject(void* object_pointer)
    {
        mObject = object_pointer;
    }
public:
    enum ESex
    {
        male,
        female,
    };
    Person(const Person& other)
    {
        if (other.mObject)
        {
            beautiful_capi_callback_exception_info_t exception_info;
            SetObject(example_person_copy(&exception_info, other.mObject));
            beautiful_capi_Callback::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
        }
        else
        {
            SetObject(0);
        }
    }
    Person(void *object_pointer, bool copy_object)
    {
        if (object_pointer && copy_object)
        {
            beautiful_capi_callback_exception_info_t exception_info;
            SetObject(example_person_copy(&exception_info, object_pointer));
            beautiful_capi_Callback::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
        }
        else
        {
            SetObject(object_pointer);
        }
    }
    bool IsNull() const
    {
        return !mObject;
    }
    bool IsNotNull() const
    {
        return mObject != 0;
    }
    bool operator!() const
    {
        return !mObject;
    }
    Person* operator->()
    {
        return this;
    }
    const Person* operator->() const
    {
        return this;
    }
    void* Detach()
    {
        void* result = mObject;
        SetObject(0);
        return result;
    }
    Person operator=(const Person& other)
    {
        if (mObject != other.mObject)
        {
            if (mObject)
            {
                example_person_delete(mObject);
                SetObject(0);
            }
            if (other.mObject)
            {
                beautiful_capi_callback_exception_info_t exception_info;
                SetObject(example_person_copy(&exception_info, other.mObject));
                beautiful_capi_Callback::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
            }
            else
            {
                SetObject(0);
            }
        }
        return *this;
    }
    Person()
    {
        beautiful_capi_callback_exception_info_t exception_info;
        SetObject(example_person_default(&exception_info));
        beautiful_capi_Callback::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
    }
    ~Person()
    {
        if (mObject)
        {
            example_person_delete(mObject);
            SetObject(0);
        }
    }
    void SetFirstName(const char* first_name)
    {
        beautiful_capi_callback_exception_info_t exception_info;
        example_person_setfirstname(&exception_info, mObject, first_name);
        beautiful_capi_Callback::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
    }
    const char* GetFirstName() const
    {
        beautiful_capi_callback_exception_info_t exception_info;
        const char* result(example_person_getfirstname(&exception_info, mObject));
        beautiful_capi_Callback::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
        return result;
    }
    void SetSecondName(const char* second_name)
    {
        beautiful_capi_callback_exception_info_t exception_info;
        example_person_setsecondname(&exception_info, mObject, second_name);
        beautiful_capi_Callback::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
    }
    const char* GetSecondName() const
    {
        beautiful_capi_callback_exception_info_t exception_info;
        const char* result(example_person_getsecondname(&exception_info, mObject));
        beautiful_capi_Callback::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
        return result;
    }
    void SetAge(unsigned int age)
    {
        beautiful_capi_callback_exception_info_t exception_info;
        example_person_setage(&exception_info, mObject, age);
        beautiful_capi_Callback::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
    }
    unsigned int GetAge() const
    {
        beautiful_capi_callback_exception_info_t exception_info;
        unsigned int result(example_person_getage(&exception_info, mObject));
        beautiful_capi_Callback::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
        return result;
    }
    void SetSex(Example::Person::ESex sex)
    {
        beautiful_capi_callback_exception_info_t exception_info;
        example_person_setsex(&exception_info, mObject, static_cast<char>(sex));
        beautiful_capi_Callback::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
    }
    Example::Person::ESex GetSex() const
    {
        beautiful_capi_callback_exception_info_t exception_info;
        Example::Person::ESex result(static_cast<Example::Person::ESex>(example_person_getsex(&exception_info, mObject)));
        beautiful_capi_Callback::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
        return result;
    }
    void Dump(const Example::PrinterPtr& printer) const
    {
        struct raw_pointer_holder { void* raw_pointer; };
        beautiful_capi_callback_exception_info_t exception_info;
        example_person_dump(&exception_info, mObject, reinterpret_cast<const raw_pointer_holder*>(&printer)->raw_pointer);
        beautiful_capi_Callback::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
    }
    void Print(const Example::PrinterPtr& printer, const char* text) const
    {
        struct raw_pointer_holder { void* raw_pointer; };
        beautiful_capi_callback_exception_info_t exception_info;
        example_person_print(&exception_info, mObject, reinterpret_cast<const raw_pointer_holder*>(&printer)->raw_pointer, text);
        beautiful_capi_Callback::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
    }
};

}

#endif /* __cplusplus */

#endif /* EXAMPLE_PERSON_INCLUDED */

