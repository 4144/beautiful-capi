/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#ifndef EXAMPLE_CUSTOMPRINTER_INCLUDED
#define EXAMPLE_CUSTOMPRINTER_INCLUDED

#include "ExampleCapi.h"
#include "ExampleFwd.h"
#include "Exception/NullArgument.h"
#include "Exception/BadArgument.h"
#include "Exception/DivisionByZero.h"
#include "Exception/Generic.h"
#include "Example/Printer.h"

#ifdef __cplusplus

namespace Example { 

class CustomPrinterPtr : public Example::PrinterPtr
{
protected:
    void* mObject;
    void SetObject(void* object_pointer)
    {
        mObject = object_pointer;
        if (mObject)
        {
            Example::PrinterPtr::SetObject(example_customprinter_cast_to_base(mObject));
        }
        else
        {
            Example::PrinterPtr::SetObject(0);
        }
    }
public:
    CustomPrinterPtr(const CustomPrinterPtr& other) : Example::PrinterPtr(0, false)
    {
        SetObject(other.mObject);
        if (mObject)
        {
            example_customprinter_add_ref(mObject);
        }
    }
    CustomPrinterPtr(void *object_pointer, bool add_ref) : Example::PrinterPtr(0, false)
    {
        SetObject(object_pointer);
        if (add_ref && object_pointer)
        {
            example_customprinter_add_ref(mObject);
        }
    }
    bool IsNull() const
    {
        return !mObject;
    }
    bool IsNotNull() const
    {
        return mObject != 0;
    }
    bool operator!() const
    {
        return !mObject;
    }
    CustomPrinterPtr* operator->()
    {
        return this;
    }
    const CustomPrinterPtr* operator->() const
    {
        return this;
    }
    void* Detach()
    {
        void* result = mObject;
        SetObject(0);
        return result;
    }
    CustomPrinterPtr operator=(const CustomPrinterPtr& other)
    {
        if (mObject != other.mObject)
        {
            if (mObject)
            {
                example_customprinter_release(mObject);
                SetObject(0);
            }
            SetObject(other.mObject);
            if (mObject)
            {
                example_customprinter_add_ref(mObject);
            }
        }
        return *this;
    }
    CustomPrinterPtr() : Example::PrinterPtr(0, false)
    {
        beautiful_capi_callback_exception_info_t exception_info;
        SetObject(example_customprinter_default(&exception_info));
        beautiful_capi_Callback::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
    }
    ~CustomPrinterPtr()
    {
        if (mObject)
        {
            example_customprinter_release(mObject);
            SetObject(0);
        }
    }
    void SetObjectPointer(void* custom_object)
    {
        example_customprinter_setobjectpointer(mObject, custom_object);
    }
    void* GetObjectPointer()
    {
        return example_customprinter_getobjectpointer(mObject);
    }
    void SetCFunctionForPrint(example_customprinter_print_callback_type c_function_pointer)
    {
        example_customprinter_setcfunctionforprint(mObject, c_function_pointer);
    }
    void SetCFunctionForSetPrintingQuality(example_customprinter_setprintingquality_callback_type c_function_pointer)
    {
        example_customprinter_setcfunctionforsetprintingquality(mObject, c_function_pointer);
    }
    void SetCFunctionForGetPrintingQuality(example_customprinter_getprintingquality_callback_type c_function_pointer)
    {
        example_customprinter_setcfunctionforgetprintingquality(mObject, c_function_pointer);
    }
    void SetCFunctionForGetDeviceType(example_customprinter_getdevicetype_callback_type c_function_pointer)
    {
        example_customprinter_setcfunctionforgetdevicetype(mObject, c_function_pointer);
    }
};

template<typename ImplementationClass>
void callback_for_customprinter_print(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer, const char* text)
{
    ImplementationClass* self = static_cast<ImplementationClass*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        self->Print(text);
    }
    catch (Exception::NullArgument& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object.Detach();
        }
    }
    catch (Exception::BadArgument& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object.Detach();
        }
    }
    catch (Exception::DivisionByZero& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object.Detach();
        }
    }
    catch (Exception::Generic& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object.Detach();
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
}
template<typename ImplementationClass>
void callback_for_customprinter_setprintingquality(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer, int quality)
{
    ImplementationClass* self = static_cast<ImplementationClass*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        self->SetPrintingQuality(static_cast<Example::PrinterPtr::EQuality>(quality));
    }
    catch (Exception::NullArgument& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object.Detach();
        }
    }
    catch (Exception::BadArgument& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object.Detach();
        }
    }
    catch (Exception::DivisionByZero& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object.Detach();
        }
    }
    catch (Exception::Generic& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object.Detach();
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
}
template<typename ImplementationClass>
int callback_for_customprinter_getprintingquality(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer)
{
    ImplementationClass* self = static_cast<ImplementationClass*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return static_cast<int>(self->GetPrintingQuality());
    }
    catch (Exception::NullArgument& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object.Detach();
        }
    }
    catch (Exception::BadArgument& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object.Detach();
        }
    }
    catch (Exception::DivisionByZero& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object.Detach();
        }
    }
    catch (Exception::Generic& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object.Detach();
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
    return static_cast<int>(0);
}
template<typename ImplementationClass>
int callback_for_customprinter_getdevicetype(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer)
{
    ImplementationClass* self = static_cast<ImplementationClass*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return static_cast<int>(self->GetDeviceType());
    }
    catch (Exception::NullArgument& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object.Detach();
        }
    }
    catch (Exception::BadArgument& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object.Detach();
        }
    }
    catch (Exception::DivisionByZero& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object.Detach();
        }
    }
    catch (Exception::Generic& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object.Detach();
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
    return static_cast<int>(0);
}
template<typename ImplementationClass>
Example::CustomPrinterPtr create_callback_for_customprinter(ImplementationClass* implementation_class)
{
    Example::CustomPrinterPtr result;
    result.SetCFunctionForPrint(callback_for_customprinter_print<ImplementationClass>);
    result.SetCFunctionForSetPrintingQuality(callback_for_customprinter_setprintingquality<ImplementationClass>);
    result.SetCFunctionForGetPrintingQuality(callback_for_customprinter_getprintingquality<ImplementationClass>);
    result.SetCFunctionForGetDeviceType(callback_for_customprinter_getdevicetype<ImplementationClass>);
    result.SetObjectPointer(implementation_class);
    return result;
}
template<typename ImplementationClass>
Example::CustomPrinterPtr create_callback_for_customprinter(ImplementationClass& implementation_class)
{
    return create_callback_for_customprinter(&implementation_class);
}

}

#endif /* __cplusplus */

#endif /* EXAMPLE_CUSTOMPRINTER_INCLUDED */

