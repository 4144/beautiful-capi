/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#ifndef BEAUTIFUL_CAPI_CALLBACK_EXCEPTION_INFO_DEFINED
#define BEAUTIFUL_CAPI_CALLBACK_EXCEPTION_INFO_DEFINED

struct beautiful_capi_callback_exception_info_t
{
    int code; /* value from beautiful_capi_callback_exception_code_t enumeration */
    void* object_pointer;
};

enum beautiful_capi_callback_exception_code_t
{
    no_exception = 0,
    exception_generic = 1,
    exception_badargument = 2,
    exception_nullargument = 3,
    exception_divisionbyzero = 4,
    unknown_exception = -1
};

#endif /* BEAUTIFUL_CAPI_CALLBACK_EXCEPTION_INFO_DEFINED */

#include <stdexcept>
#include <cassert>
#include "DefaultPrinterImpl.h"
#include "Exception/NullArgumentImpl.h"
#include "Exception/BadArgumentImpl.h"
#include "Exception/DivisionByZeroImpl.h"
#include "Exception/GenericImpl.h"
#include "IPrinter.h"
#include "PersonImpl.h"

#ifdef _WIN32
    #ifdef __GNUC__
        #define EXAMPLE_API extern "C" __attribute__ ((dllexport))
        #define EXAMPLE_API_CONVENTION __attribute__ ((cdecl))
    #else
        #define EXAMPLE_API extern "C" __declspec(dllexport)
        #define EXAMPLE_API_CONVENTION __cdecl
    #endif
#elif __APPLE__
    #if defined(__GNUC__) && __GNUC__ >= 4
        #define EXAMPLE_API extern "C" __attribute__ ((visibility ("default")))
    #else
        #define EXAMPLE_API extern "C"
    #endif
    #if defined __i386__
        #define EXAMPLE_API_CONVENTION __attribute__ ((cdecl))
    #else
        #define EXAMPLE_API_CONVENTION
    #endif
#elif __unix__ || __linux__
    #if defined(__GNUC__) && __GNUC__ >= 4
        #define EXAMPLE_API extern "C" __attribute__ ((visibility ("default")))
    #else
        #define EXAMPLE_API extern "C"
    #endif
    #if defined __i386__
        #define EXAMPLE_API_CONVENTION __attribute__ ((cdecl))
    #else
        #define EXAMPLE_API_CONVENTION
    #endif
#else
    #error "Unknown platform"
#endif

typedef void (*example_customprinter_print_callback_type)(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer, const char* text);
typedef void (*example_customprinter_setprintingquality_callback_type)(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer, int quality);
typedef int (*example_customprinter_getprintingquality_callback_type)(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer);
typedef int (*example_customprinter_getdevicetype_callback_type)(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer);


namespace beautiful_capi_Callback
{
    inline void check_and_throw_exception(int exception_code, void* exception_object)
    {
        switch (exception_code)
        {
            case 0:
                return;
            case 1:
                {
                    Exception::GenericImpl* impl_exception_object = static_cast<Exception::GenericImpl*>(exception_object);
                    Exception::GenericImpl saved_exception_object = *impl_exception_object;
                    delete impl_exception_object;
                    throw saved_exception_object;
                }
            case 2:
                {
                    Exception::BadArgumentImpl* impl_exception_object = static_cast<Exception::BadArgumentImpl*>(exception_object);
                    Exception::BadArgumentImpl saved_exception_object = *impl_exception_object;
                    delete impl_exception_object;
                    throw saved_exception_object;
                }
            case 3:
                {
                    Exception::NullArgumentImpl* impl_exception_object = static_cast<Exception::NullArgumentImpl*>(exception_object);
                    Exception::NullArgumentImpl saved_exception_object = *impl_exception_object;
                    delete impl_exception_object;
                    throw saved_exception_object;
                }
            case 4:
                {
                    Exception::DivisionByZeroImpl* impl_exception_object = static_cast<Exception::DivisionByZeroImpl*>(exception_object);
                    Exception::DivisionByZeroImpl saved_exception_object = *impl_exception_object;
                    delete impl_exception_object;
                    throw saved_exception_object;
                }
            default:
                assert(false);
            case -1:
                throw std::runtime_error("unknown exception");
        }
    }
}
namespace Example
{
    class AutoGen_Callback_CustomPrinterImpl : public ::Example::PrinterBaseImpl
    {
        void* mObject;
        example_customprinter_print_callback_type print_callback;
        example_customprinter_setprintingquality_callback_type setprintingquality_callback;
        example_customprinter_getprintingquality_callback_type getprintingquality_callback;
        example_customprinter_getdevicetype_callback_type getdevicetype_callback;
    public:
        AutoGen_Callback_CustomPrinterImpl() :
            print_callback(0),
            setprintingquality_callback(0),
            getprintingquality_callback(0),
            getdevicetype_callback(0),
            mObject(0)
        {
        }
        AutoGen_Callback_CustomPrinterImpl(const AutoGen_Callback_CustomPrinterImpl& other)
        {
            print_callback = other.print_callback;
            setprintingquality_callback = other.setprintingquality_callback;
            getprintingquality_callback = other.getprintingquality_callback;
            getdevicetype_callback = other.getdevicetype_callback;
            mObject = other.mObject;
        }
        void SetObjectPointer(void* custom_object)
        {
            if (mObject != custom_object)
            {
                mObject = custom_object;
            }
        }
        void* GetObjectPointer()
        {
            return mObject;
        }
        void SetCFunctionForPrint(example_customprinter_print_callback_type c_function_pointer)
        {
            print_callback = c_function_pointer;
        }
        void SetCFunctionForSetPrintingQuality(example_customprinter_setprintingquality_callback_type c_function_pointer)
        {
            setprintingquality_callback = c_function_pointer;
        }
        void SetCFunctionForGetPrintingQuality(example_customprinter_getprintingquality_callback_type c_function_pointer)
        {
            getprintingquality_callback = c_function_pointer;
        }
        void SetCFunctionForGetDeviceType(example_customprinter_getdevicetype_callback_type c_function_pointer)
        {
            getdevicetype_callback = c_function_pointer;
        }
        void Print(const char* text) const
        {
            beautiful_capi_callback_exception_info_t exception_info;
            print_callback(&exception_info, mObject, text);
            beautiful_capi_Callback::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
        }
        void SetPrintingQuality(Example::IPrinter::EQuality quality)
        {
            beautiful_capi_callback_exception_info_t exception_info;
            setprintingquality_callback(&exception_info, mObject, static_cast<int>(quality));
            beautiful_capi_Callback::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
        }
        Example::IPrinter::EQuality GetPrintingQuality() const
        {
            beautiful_capi_callback_exception_info_t exception_info;
            Example::IPrinter::EQuality result(static_cast<Example::IPrinter::EQuality>(getprintingquality_callback(&exception_info, mObject)));
            beautiful_capi_Callback::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
            return result;
        }
        Example::EPrintingDevice GetDeviceType() const
        {
            beautiful_capi_callback_exception_info_t exception_info;
            Example::EPrintingDevice result(static_cast<Example::EPrintingDevice>(getdevicetype_callback(&exception_info, mObject)));
            beautiful_capi_Callback::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
            return result;
        }
    };
}
namespace Exception
{
}

EXAMPLE_API void* EXAMPLE_API_CONVENTION examplecreate_default_printer(beautiful_capi_callback_exception_info_t* exception_info, int printing_device)
{
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return Example::CreateDefaultPrinterImpl(static_cast<Example::EPrintingDevice>(printing_device));
    }
    catch (const Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
    return static_cast<void*>(0);
}

EXAMPLE_API void* EXAMPLE_API_CONVENTION example_printer_cast_to_example_customprinter(void* object_pointer)
{
    return dynamic_cast<Example::AutoGen_Callback_CustomPrinterImpl*>(static_cast<Example::IPrinter*>(object_pointer));
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_printer_add_ref(void* object_pointer)
{
    intrusive_ptr_add_ref(static_cast<Example::IPrinter*>(object_pointer));
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_printer_release(void* object_pointer)
{
    intrusive_ptr_release(static_cast<Example::IPrinter*>(object_pointer));
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_printer_print(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer, const char* text)
{
    const Example::IPrinter* self = static_cast<Example::IPrinter*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        self->Print(text);
    }
    catch (const Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_printer_setprintingquality(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer, int quality)
{
    Example::IPrinter* self = static_cast<Example::IPrinter*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        self->SetPrintingQuality(static_cast<Example::IPrinter::EQuality>(quality));
    }
    catch (const Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
}

EXAMPLE_API int EXAMPLE_API_CONVENTION example_printer_getprintingquality(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer)
{
    const Example::IPrinter* self = static_cast<Example::IPrinter*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return static_cast<int>(self->GetPrintingQuality());
    }
    catch (const Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
    return static_cast<int>(0);
}

EXAMPLE_API int EXAMPLE_API_CONVENTION example_printer_getdevicetype(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer)
{
    const Example::IPrinter* self = static_cast<Example::IPrinter*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return static_cast<int>(self->GetDeviceType());
    }
    catch (const Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
    return static_cast<int>(0);
}

EXAMPLE_API void* EXAMPLE_API_CONVENTION example_person_copy(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer)
{
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return new Example::PersonImpl(*static_cast<Example::PersonImpl*>(object_pointer));
    }
    catch (const Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
    return static_cast<void*>(0);
}

EXAMPLE_API void* EXAMPLE_API_CONVENTION example_person_default(beautiful_capi_callback_exception_info_t* exception_info)
{
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return new Example::PersonImpl();
    }
    catch (const Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
    return static_cast<void*>(0);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_person_delete(void* object_pointer)
{
    delete static_cast<Example::PersonImpl*>(object_pointer);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_person_setfirstname(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer, const char* first_name)
{
    Example::PersonImpl* self = static_cast<Example::PersonImpl*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        self->SetFirstName(first_name);
    }
    catch (const Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
}

EXAMPLE_API const char* EXAMPLE_API_CONVENTION example_person_getfirstname(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer)
{
    const Example::PersonImpl* self = static_cast<Example::PersonImpl*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return self->GetFirstName();
    }
    catch (const Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
    return static_cast<const char*>(0);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_person_setsecondname(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer, const char* second_name)
{
    Example::PersonImpl* self = static_cast<Example::PersonImpl*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        self->SetSecondName(second_name);
    }
    catch (const Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
}

EXAMPLE_API const char* EXAMPLE_API_CONVENTION example_person_getsecondname(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer)
{
    const Example::PersonImpl* self = static_cast<Example::PersonImpl*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return self->GetSecondName();
    }
    catch (const Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
    return static_cast<const char*>(0);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_person_setage(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer, unsigned int age)
{
    Example::PersonImpl* self = static_cast<Example::PersonImpl*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        self->SetAge(age);
    }
    catch (const Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
}

EXAMPLE_API unsigned int EXAMPLE_API_CONVENTION example_person_getage(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer)
{
    const Example::PersonImpl* self = static_cast<Example::PersonImpl*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return self->GetAge();
    }
    catch (const Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
    return static_cast<unsigned int>(0);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_person_setsex(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer, char sex)
{
    Example::PersonImpl* self = static_cast<Example::PersonImpl*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        self->SetSex(static_cast<Example::PersonImpl::ESex>(sex));
    }
    catch (const Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
}

EXAMPLE_API char EXAMPLE_API_CONVENTION example_person_getsex(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer)
{
    const Example::PersonImpl* self = static_cast<Example::PersonImpl*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return static_cast<char>(self->GetSex());
    }
    catch (const Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
    return static_cast<char>(0);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_person_dump(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer, void* printer)
{
    const Example::PersonImpl* self = static_cast<Example::PersonImpl*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        self->Dump(static_cast<Example::IPrinter*>(printer));
    }
    catch (const Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_person_print(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer, void* printer, const char* text)
{
    const Example::PersonImpl* self = static_cast<Example::PersonImpl*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        self->Print(static_cast<Example::IPrinter*>(printer), text);
    }
    catch (const Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
}

EXAMPLE_API void* EXAMPLE_API_CONVENTION example_customprinter_cast_to_base(void* object_pointer)
{
    return static_cast<Example::IPrinter*>(static_cast<Example::AutoGen_Callback_CustomPrinterImpl*>(object_pointer));
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_customprinter_add_ref(void* object_pointer)
{
    intrusive_ptr_add_ref(static_cast<Example::AutoGen_Callback_CustomPrinterImpl*>(object_pointer));
}

EXAMPLE_API void* EXAMPLE_API_CONVENTION example_customprinter_default(beautiful_capi_callback_exception_info_t* exception_info)
{
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return new Example::AutoGen_Callback_CustomPrinterImpl();
    }
    catch (const Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
    return static_cast<void*>(0);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_customprinter_release(void* object_pointer)
{
    intrusive_ptr_release(static_cast<Example::AutoGen_Callback_CustomPrinterImpl*>(object_pointer));
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_customprinter_setobjectpointer(void* object_pointer, void* custom_object)
{
    Example::AutoGen_Callback_CustomPrinterImpl* self = static_cast<Example::AutoGen_Callback_CustomPrinterImpl*>(object_pointer);
    self->SetObjectPointer(custom_object);
}

EXAMPLE_API void* EXAMPLE_API_CONVENTION example_customprinter_getobjectpointer(void* object_pointer)
{
    Example::AutoGen_Callback_CustomPrinterImpl* self = static_cast<Example::AutoGen_Callback_CustomPrinterImpl*>(object_pointer);
    return self->GetObjectPointer();
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_customprinter_setcfunctionforprint(void* object_pointer, example_customprinter_print_callback_type c_function_pointer)
{
    Example::AutoGen_Callback_CustomPrinterImpl* self = static_cast<Example::AutoGen_Callback_CustomPrinterImpl*>(object_pointer);
    self->SetCFunctionForPrint(c_function_pointer);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_customprinter_setcfunctionforsetprintingquality(void* object_pointer, example_customprinter_setprintingquality_callback_type c_function_pointer)
{
    Example::AutoGen_Callback_CustomPrinterImpl* self = static_cast<Example::AutoGen_Callback_CustomPrinterImpl*>(object_pointer);
    self->SetCFunctionForSetPrintingQuality(c_function_pointer);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_customprinter_setcfunctionforgetprintingquality(void* object_pointer, example_customprinter_getprintingquality_callback_type c_function_pointer)
{
    Example::AutoGen_Callback_CustomPrinterImpl* self = static_cast<Example::AutoGen_Callback_CustomPrinterImpl*>(object_pointer);
    self->SetCFunctionForGetPrintingQuality(c_function_pointer);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_customprinter_setcfunctionforgetdevicetype(void* object_pointer, example_customprinter_getdevicetype_callback_type c_function_pointer)
{
    Example::AutoGen_Callback_CustomPrinterImpl* self = static_cast<Example::AutoGen_Callback_CustomPrinterImpl*>(object_pointer);
    self->SetCFunctionForGetDeviceType(c_function_pointer);
}

#ifndef BEAUTIFUL_CAPI_CALLBACK_EXCEPTION_INFO_DEFINED
#define BEAUTIFUL_CAPI_CALLBACK_EXCEPTION_INFO_DEFINED

struct beautiful_capi_callback_exception_info_t
{
    int code; /* value from beautiful_capi_callback_exception_code_t enumeration */
    void* object_pointer;
};

enum beautiful_capi_callback_exception_code_t
{
    no_exception = 0,
    exception_generic = 1,
    exception_badargument = 2,
    exception_nullargument = 3,
    exception_divisionbyzero = 4,
    unknown_exception = -1
};

#endif /* BEAUTIFUL_CAPI_CALLBACK_EXCEPTION_INFO_DEFINED */


#ifdef _WIN32
    #ifdef __GNUC__
        #define EXCEPTION_API extern "C" __attribute__ ((dllexport))
        #define EXCEPTION_API_CONVENTION __attribute__ ((cdecl))
    #else
        #define EXCEPTION_API extern "C" __declspec(dllexport)
        #define EXCEPTION_API_CONVENTION __cdecl
    #endif
#elif __APPLE__
    #if defined(__GNUC__) && __GNUC__ >= 4
        #define EXCEPTION_API extern "C" __attribute__ ((visibility ("default")))
    #else
        #define EXCEPTION_API extern "C"
    #endif
    #if defined __i386__
        #define EXCEPTION_API_CONVENTION __attribute__ ((cdecl))
    #else
        #define EXCEPTION_API_CONVENTION
    #endif
#elif __unix__ || __linux__
    #if defined(__GNUC__) && __GNUC__ >= 4
        #define EXCEPTION_API extern "C" __attribute__ ((visibility ("default")))
    #else
        #define EXCEPTION_API extern "C"
    #endif
    #if defined __i386__
        #define EXCEPTION_API_CONVENTION __attribute__ ((cdecl))
    #else
        #define EXCEPTION_API_CONVENTION
    #endif
#else
    #error "Unknown platform"
#endif

EXCEPTION_API void* EXCEPTION_API_CONVENTION exception_generic_copy(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer)
{
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return new Exception::GenericImpl(*static_cast<Exception::GenericImpl*>(object_pointer));
    }
    catch (const Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
    return static_cast<void*>(0);
}

EXCEPTION_API void* EXCEPTION_API_CONVENTION exception_generic_new(beautiful_capi_callback_exception_info_t* exception_info)
{
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return new Exception::GenericImpl();
    }
    catch (const Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
    return static_cast<void*>(0);
}

EXCEPTION_API void EXCEPTION_API_CONVENTION exception_generic_delete(void* object_pointer)
{
    delete static_cast<Exception::GenericImpl*>(object_pointer);
}

EXCEPTION_API const char* EXCEPTION_API_CONVENTION exception_generic_geterrortext(void* object_pointer)
{
    const Exception::GenericImpl* self = static_cast<Exception::GenericImpl*>(object_pointer);
    return self->GetErrorText();
}

EXCEPTION_API void* EXCEPTION_API_CONVENTION exception_badargument_cast_to_base(void* object_pointer)
{
    return static_cast<Exception::GenericImpl*>(static_cast<Exception::BadArgumentImpl*>(object_pointer));
}

EXCEPTION_API void* EXCEPTION_API_CONVENTION exception_badargument_copy(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer)
{
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return new Exception::BadArgumentImpl(*static_cast<Exception::BadArgumentImpl*>(object_pointer));
    }
    catch (const Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
    return static_cast<void*>(0);
}

EXCEPTION_API void* EXCEPTION_API_CONVENTION exception_badargument_new(beautiful_capi_callback_exception_info_t* exception_info)
{
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return new Exception::BadArgumentImpl();
    }
    catch (const Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
    return static_cast<void*>(0);
}

EXCEPTION_API void EXCEPTION_API_CONVENTION exception_badargument_delete(void* object_pointer)
{
    delete static_cast<Exception::BadArgumentImpl*>(object_pointer);
}

EXCEPTION_API const char* EXCEPTION_API_CONVENTION exception_badargument_getargumentname(void* object_pointer)
{
    const Exception::BadArgumentImpl* self = static_cast<Exception::BadArgumentImpl*>(object_pointer);
    return self->GetArgumentName();
}

EXCEPTION_API void* EXCEPTION_API_CONVENTION exception_nullargument_cast_to_base(void* object_pointer)
{
    return static_cast<Exception::BadArgumentImpl*>(static_cast<Exception::NullArgumentImpl*>(object_pointer));
}

EXCEPTION_API void* EXCEPTION_API_CONVENTION exception_nullargument_copy(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer)
{
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return new Exception::NullArgumentImpl(*static_cast<Exception::NullArgumentImpl*>(object_pointer));
    }
    catch (const Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
    return static_cast<void*>(0);
}

EXCEPTION_API void* EXCEPTION_API_CONVENTION exception_nullargument_new(beautiful_capi_callback_exception_info_t* exception_info)
{
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return new Exception::NullArgumentImpl();
    }
    catch (const Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
    return static_cast<void*>(0);
}

EXCEPTION_API void EXCEPTION_API_CONVENTION exception_nullargument_delete(void* object_pointer)
{
    delete static_cast<Exception::NullArgumentImpl*>(object_pointer);
}

EXCEPTION_API void* EXCEPTION_API_CONVENTION exception_divisionbyzero_cast_to_base(void* object_pointer)
{
    return static_cast<Exception::GenericImpl*>(static_cast<Exception::DivisionByZeroImpl*>(object_pointer));
}

EXCEPTION_API void* EXCEPTION_API_CONVENTION exception_divisionbyzero_copy(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer)
{
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return new Exception::DivisionByZeroImpl(*static_cast<Exception::DivisionByZeroImpl*>(object_pointer));
    }
    catch (const Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
    return static_cast<void*>(0);
}

EXCEPTION_API void* EXCEPTION_API_CONVENTION exception_divisionbyzero_new(beautiful_capi_callback_exception_info_t* exception_info)
{
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return new Exception::DivisionByZeroImpl();
    }
    catch (const Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (const Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
            exception_info->object_pointer = 0;
        }
    }
    return static_cast<void*>(0);
}

EXCEPTION_API void EXCEPTION_API_CONVENTION exception_divisionbyzero_delete(void* object_pointer)
{
    delete static_cast<Exception::DivisionByZeroImpl*>(object_pointer);
}

