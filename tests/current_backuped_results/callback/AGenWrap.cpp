/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#include <stdexcept>
#include <cassert>
#include "DefaultPrinterImpl.h"
#include "IPrinter.h"
#include "PersonImpl.h"
#include "Exception/GenericImpl.h"
#include "Exception/BadArgumentImpl.h"
#include "Exception/NullArgumentImpl.h"
#include "Exception/DivisionByZeroImpl.h"

#ifndef BEAUTIFUL_CAPI_CALLBACK_EXCEPTION_INFO_DEFINED
#define BEAUTIFUL_CAPI_CALLBACK_EXCEPTION_INFO_DEFINED

struct beautiful_capi_callback_exception_info_t
{
    int code; /* value from beautiful_capi_callback_exception_code_t enumeration */
    void* object_pointer;
};

enum beautiful_capi_callback_exception_code_t
{
    no_exception = 0,
    exception_generic = 1,
    exception_bad_argument = 2,
    exception_null_argument = 3,
    exception_division_by_zero = 4,
    unknown_exception = -1
};

#endif /* BEAUTIFUL_CAPI_CALLBACK_EXCEPTION_INFO_DEFINED */

#ifdef _WIN32
    #ifdef __GNUC__
        #define EXCEPTION_API extern "C" __attribute__ ((dllexport))
        #define EXCEPTION_API_CONVENTION __attribute__ ((cdecl))
    #else
        #define EXCEPTION_API extern "C" __declspec(dllexport)
        #define EXCEPTION_API_CONVENTION __cdecl
    #endif
#elif __APPLE__
    #if defined(__GNUC__) && __GNUC__ >= 4
        #define EXCEPTION_API extern "C" __attribute__ ((visibility ("default")))
    #else
        #define EXCEPTION_API extern "C"
    #endif
    #if defined __i386__
        #define EXCEPTION_API_CONVENTION __attribute__ ((cdecl))
    #else
        #define EXCEPTION_API_CONVENTION
    #endif
#elif __unix__ || __linux__
    #if defined(__GNUC__) && __GNUC__ >= 4
        #define EXCEPTION_API extern "C" __attribute__ ((visibility ("default")))
    #else
        #define EXCEPTION_API extern "C"
    #endif
    #if defined __i386__
        #define EXCEPTION_API_CONVENTION __attribute__ ((cdecl))
    #else
        #define EXCEPTION_API_CONVENTION
    #endif
#else
    #error "Unknown platform"
#endif

#ifdef _WIN32
    #ifdef __GNUC__
        #define EXAMPLE_API extern "C" __attribute__ ((dllexport))
        #define EXAMPLE_API_CONVENTION __attribute__ ((cdecl))
    #else
        #define EXAMPLE_API extern "C" __declspec(dllexport)
        #define EXAMPLE_API_CONVENTION __cdecl
    #endif
#elif __APPLE__
    #if defined(__GNUC__) && __GNUC__ >= 4
        #define EXAMPLE_API extern "C" __attribute__ ((visibility ("default")))
    #else
        #define EXAMPLE_API extern "C"
    #endif
    #if defined __i386__
        #define EXAMPLE_API_CONVENTION __attribute__ ((cdecl))
    #else
        #define EXAMPLE_API_CONVENTION
    #endif
#elif __unix__ || __linux__
    #if defined(__GNUC__) && __GNUC__ >= 4
        #define EXAMPLE_API extern "C" __attribute__ ((visibility ("default")))
    #else
        #define EXAMPLE_API extern "C"
    #endif
    #if defined __i386__
        #define EXAMPLE_API_CONVENTION __attribute__ ((cdecl))
    #else
        #define EXAMPLE_API_CONVENTION
    #endif
#else
    #error "Unknown platform"
#endif

typedef void* (EXAMPLE_API_CONVENTION *example_printer_copy_callback_type)(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer);
typedef void (EXAMPLE_API_CONVENTION *example_printer_delete_callback_type)(void* object_pointer);
typedef void (EXAMPLE_API_CONVENTION *example_printer_print_callback_type)(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer, const char* text);
typedef void (EXAMPLE_API_CONVENTION *example_printer_set_printing_quality_callback_type)(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer, int quality);
typedef int (EXAMPLE_API_CONVENTION *example_printer_get_printing_quality_callback_type)(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer);
typedef int (EXAMPLE_API_CONVENTION *example_printer_get_device_type_callback_type)(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer);

namespace beautiful_capi_Callback
{
    inline void check_and_throw_exception(int exception_code, void* exception_object)
    {
        switch (exception_code)
        {
            case 0:
                return;
            case 1:
                {
                    Exception::GenericImpl* impl_exception_object = static_cast<Exception::GenericImpl*>(exception_object);
                    Exception::GenericImpl saved_exception_object = *impl_exception_object;
                    delete impl_exception_object;
                    throw saved_exception_object;
                }
            case 2:
                {
                    Exception::BadArgumentImpl* impl_exception_object = static_cast<Exception::BadArgumentImpl*>(exception_object);
                    Exception::BadArgumentImpl saved_exception_object = *impl_exception_object;
                    delete impl_exception_object;
                    throw saved_exception_object;
                }
            case 3:
                {
                    Exception::NullArgumentImpl* impl_exception_object = static_cast<Exception::NullArgumentImpl*>(exception_object);
                    Exception::NullArgumentImpl saved_exception_object = *impl_exception_object;
                    delete impl_exception_object;
                    throw saved_exception_object;
                }
            case 4:
                {
                    Exception::DivisionByZeroImpl* impl_exception_object = static_cast<Exception::DivisionByZeroImpl*>(exception_object);
                    Exception::DivisionByZeroImpl saved_exception_object = *impl_exception_object;
                    delete impl_exception_object;
                    throw saved_exception_object;
                }
            default:
                assert(false);
            case -1:
                throw std::runtime_error("unknown exception");
        }
    }
}

namespace Example {

class AutoGen_Callback_Callback_PrinterImpl : public Example::PrinterBaseImpl
{
    void* mObject;
    example_printer_copy_callback_type copy_callback;
    example_printer_delete_callback_type delete_callback;
    example_printer_print_callback_type print_callback;
    example_printer_set_printing_quality_callback_type set_printing_quality_callback;
    example_printer_get_printing_quality_callback_type get_printing_quality_callback;
    example_printer_get_device_type_callback_type get_device_type_callback;
public:
    AutoGen_Callback_Callback_PrinterImpl() :
        copy_callback(0),
        delete_callback(0),
        print_callback(0),
        set_printing_quality_callback(0),
        get_printing_quality_callback(0),
        get_device_type_callback(0),
        mObject(0)
    {
    }
    AutoGen_Callback_Callback_PrinterImpl(const AutoGen_Callback_Callback_PrinterImpl& other) :
        copy_callback(other.copy_callback),
        delete_callback(other.delete_callback),
        print_callback(other.print_callback),
        set_printing_quality_callback(other.set_printing_quality_callback),
        get_printing_quality_callback(other.get_printing_quality_callback),
        get_device_type_callback(other.get_device_type_callback),
        mObject(other.mObject)
    {
        if (mObject && copy_callback)
        {
            beautiful_capi_callback_exception_info_t exception_info;
            void* result(copy_callback(&exception_info, mObject));
            beautiful_capi_Callback::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
            mObject = result;
        }
    }
    ~AutoGen_Callback_Callback_PrinterImpl()
    {
        if (mObject && delete_callback)
        {
            delete_callback(mObject);
        }
    }
    void SetObjectPointer(void* object_pointer)
    {
        mObject = object_pointer;
        if (mObject && copy_callback)
        {
            beautiful_capi_callback_exception_info_t exception_info;
            void* result(copy_callback(&exception_info, mObject));
            beautiful_capi_Callback::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
            mObject = result;
        }
    }
    void* GetObjectPointer() const
    {
        return mObject;
    }
    void SetCFunctionForCopy(example_printer_copy_callback_type c_function_pointer)
    {
        copy_callback = c_function_pointer;
    }
    void SetCFunctionForDelete(example_printer_delete_callback_type c_function_pointer)
    {
        delete_callback = c_function_pointer;
    }
    void SetCFunctionForPrint(example_printer_print_callback_type c_function_pointer)
    {
        print_callback = c_function_pointer;
    }
    void SetCFunctionForSetPrintingQuality(example_printer_set_printing_quality_callback_type c_function_pointer)
    {
        set_printing_quality_callback = c_function_pointer;
    }
    void SetCFunctionForGetPrintingQuality(example_printer_get_printing_quality_callback_type c_function_pointer)
    {
        get_printing_quality_callback = c_function_pointer;
    }
    void SetCFunctionForGetDeviceType(example_printer_get_device_type_callback_type c_function_pointer)
    {
        get_device_type_callback = c_function_pointer;
    }
    void Print(const char* text) const
    {
        beautiful_capi_callback_exception_info_t exception_info;
        print_callback(&exception_info, mObject, text);
        beautiful_capi_Callback::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
    }
    void SetPrintingQuality(Example::IPrinter::EQuality quality)
    {
        beautiful_capi_callback_exception_info_t exception_info;
        set_printing_quality_callback(&exception_info, mObject, static_cast<int>(quality));
        beautiful_capi_Callback::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
    }
    Example::IPrinter::EQuality GetPrintingQuality() const
    {
        beautiful_capi_callback_exception_info_t exception_info;
        Example::IPrinter::EQuality result(static_cast<Example::IPrinter::EQuality>(get_printing_quality_callback(&exception_info, mObject)));
        beautiful_capi_Callback::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
        return result;
    }
    Example::EPrintingDevice GetDeviceType() const
    {
        beautiful_capi_callback_exception_info_t exception_info;
        Example::EPrintingDevice result(static_cast<Example::EPrintingDevice>(get_device_type_callback(&exception_info, mObject)));
        beautiful_capi_Callback::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
        return result;
    }
};

}

EXAMPLE_API void* EXAMPLE_API_CONVENTION exception_generic_new(beautiful_capi_callback_exception_info_t* exception_info)
{
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return new Exception::GenericImpl();
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            try
            {
                exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            try
            {
                exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            try
            {
                exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            try
            {
                exception_info->object_pointer = new Exception::GenericImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
        }
    }
    return static_cast<void*>(0);
}

EXAMPLE_API const char* EXAMPLE_API_CONVENTION exception_generic_get_error_text(void* object_pointer)
{
    const Exception::GenericImpl* self = static_cast<Exception::GenericImpl*>(object_pointer);
    return self->GetErrorText();
}

EXAMPLE_API void* EXAMPLE_API_CONVENTION exception_generic_copy(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer)
{
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return new Exception::GenericImpl(*static_cast<Exception::GenericImpl*>(object_pointer));
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            try
            {
                exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            try
            {
                exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            try
            {
                exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            try
            {
                exception_info->object_pointer = new Exception::GenericImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
        }
    }
    return static_cast<void*>(0);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION exception_generic_delete(void* object_pointer)
{
    delete static_cast<Exception::GenericImpl*>(object_pointer);
}

EXAMPLE_API void* EXAMPLE_API_CONVENTION exception_bad_argument_new(beautiful_capi_callback_exception_info_t* exception_info)
{
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return new Exception::BadArgumentImpl();
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            try
            {
                exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            try
            {
                exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            try
            {
                exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            try
            {
                exception_info->object_pointer = new Exception::GenericImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
        }
    }
    return static_cast<void*>(0);
}

EXAMPLE_API const char* EXAMPLE_API_CONVENTION exception_bad_argument_get_argument_name(void* object_pointer)
{
    const Exception::BadArgumentImpl* self = static_cast<Exception::BadArgumentImpl*>(object_pointer);
    return self->GetArgumentName();
}

EXAMPLE_API void* EXAMPLE_API_CONVENTION exception_bad_argument_copy(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer)
{
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return new Exception::BadArgumentImpl(*static_cast<Exception::BadArgumentImpl*>(object_pointer));
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            try
            {
                exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            try
            {
                exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            try
            {
                exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            try
            {
                exception_info->object_pointer = new Exception::GenericImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
        }
    }
    return static_cast<void*>(0);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION exception_bad_argument_delete(void* object_pointer)
{
    delete static_cast<Exception::BadArgumentImpl*>(object_pointer);
}

EXAMPLE_API void* EXAMPLE_API_CONVENTION exception_bad_argument_cast_to_base(void* object_pointer)
{
    return static_cast<Exception::GenericImpl*>(static_cast<Exception::BadArgumentImpl*>(object_pointer));
}

EXAMPLE_API void* EXAMPLE_API_CONVENTION exception_null_argument_new(beautiful_capi_callback_exception_info_t* exception_info)
{
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return new Exception::NullArgumentImpl();
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            try
            {
                exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            try
            {
                exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            try
            {
                exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            try
            {
                exception_info->object_pointer = new Exception::GenericImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
        }
    }
    return static_cast<void*>(0);
}

EXAMPLE_API void* EXAMPLE_API_CONVENTION exception_null_argument_copy(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer)
{
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return new Exception::NullArgumentImpl(*static_cast<Exception::NullArgumentImpl*>(object_pointer));
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            try
            {
                exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            try
            {
                exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            try
            {
                exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            try
            {
                exception_info->object_pointer = new Exception::GenericImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
        }
    }
    return static_cast<void*>(0);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION exception_null_argument_delete(void* object_pointer)
{
    delete static_cast<Exception::NullArgumentImpl*>(object_pointer);
}

EXAMPLE_API void* EXAMPLE_API_CONVENTION exception_null_argument_cast_to_base(void* object_pointer)
{
    return static_cast<Exception::BadArgumentImpl*>(static_cast<Exception::NullArgumentImpl*>(object_pointer));
}

EXAMPLE_API void* EXAMPLE_API_CONVENTION exception_division_by_zero_new(beautiful_capi_callback_exception_info_t* exception_info)
{
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return new Exception::DivisionByZeroImpl();
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            try
            {
                exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            try
            {
                exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            try
            {
                exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            try
            {
                exception_info->object_pointer = new Exception::GenericImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
        }
    }
    return static_cast<void*>(0);
}

EXAMPLE_API void* EXAMPLE_API_CONVENTION exception_division_by_zero_copy(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer)
{
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return new Exception::DivisionByZeroImpl(*static_cast<Exception::DivisionByZeroImpl*>(object_pointer));
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            try
            {
                exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            try
            {
                exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            try
            {
                exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            try
            {
                exception_info->object_pointer = new Exception::GenericImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
        }
    }
    return static_cast<void*>(0);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION exception_division_by_zero_delete(void* object_pointer)
{
    delete static_cast<Exception::DivisionByZeroImpl*>(object_pointer);
}

EXAMPLE_API void* EXAMPLE_API_CONVENTION exception_division_by_zero_cast_to_base(void* object_pointer)
{
    return static_cast<Exception::GenericImpl*>(static_cast<Exception::DivisionByZeroImpl*>(object_pointer));
}

EXAMPLE_API void* EXAMPLE_API_CONVENTION example_create_default_printer(beautiful_capi_callback_exception_info_t* exception_info, int printing_device)
{
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return Example::CreateDefaultPrinterImpl(static_cast<Example::EPrintingDevice>(printing_device));
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            try
            {
                exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            try
            {
                exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            try
            {
                exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            try
            {
                exception_info->object_pointer = new Exception::GenericImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
        }
    }
    return static_cast<void*>(0);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_printer_print(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer, const char* text)
{
    const Example::IPrinter* self = static_cast<Example::IPrinter*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        self->Print(text);
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            try
            {
                exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            try
            {
                exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            try
            {
                exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            try
            {
                exception_info->object_pointer = new Exception::GenericImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
        }
    }
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_printer_set_printing_quality(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer, int quality)
{
    Example::IPrinter* self = static_cast<Example::IPrinter*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        self->SetPrintingQuality(static_cast<Example::IPrinter::EQuality>(quality));
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            try
            {
                exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            try
            {
                exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            try
            {
                exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            try
            {
                exception_info->object_pointer = new Exception::GenericImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
        }
    }
}

EXAMPLE_API int EXAMPLE_API_CONVENTION example_printer_get_printing_quality(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer)
{
    const Example::IPrinter* self = static_cast<Example::IPrinter*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return static_cast<int>(self->GetPrintingQuality());
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            try
            {
                exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            try
            {
                exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            try
            {
                exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            try
            {
                exception_info->object_pointer = new Exception::GenericImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
        }
    }
    return static_cast<int>(0);
}

EXAMPLE_API int EXAMPLE_API_CONVENTION example_printer_get_device_type(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer)
{
    const Example::IPrinter* self = static_cast<Example::IPrinter*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return static_cast<int>(self->GetDeviceType());
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            try
            {
                exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            try
            {
                exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            try
            {
                exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            try
            {
                exception_info->object_pointer = new Exception::GenericImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
        }
    }
    return static_cast<int>(0);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_printer_add_ref(void* object_pointer)
{
    intrusive_ptr_add_ref(static_cast<Example::IPrinter*>(object_pointer));
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_printer_release(void* object_pointer)
{
    intrusive_ptr_release(static_cast<Example::IPrinter*>(object_pointer));
}

EXAMPLE_API void* EXAMPLE_API_CONVENTION example_person_default(beautiful_capi_callback_exception_info_t* exception_info)
{
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return new Example::PersonImpl();
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            try
            {
                exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            try
            {
                exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            try
            {
                exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            try
            {
                exception_info->object_pointer = new Exception::GenericImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
        }
    }
    return static_cast<void*>(0);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_person_set_first_name(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer, const char* first_name)
{
    Example::PersonImpl* self = static_cast<Example::PersonImpl*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        self->SetFirstName(first_name);
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            try
            {
                exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            try
            {
                exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            try
            {
                exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            try
            {
                exception_info->object_pointer = new Exception::GenericImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
        }
    }
}

EXAMPLE_API const char* EXAMPLE_API_CONVENTION example_person_get_first_name(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer)
{
    const Example::PersonImpl* self = static_cast<Example::PersonImpl*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return self->GetFirstName();
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            try
            {
                exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            try
            {
                exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            try
            {
                exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            try
            {
                exception_info->object_pointer = new Exception::GenericImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
        }
    }
    return static_cast<const char*>(0);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_person_set_second_name(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer, const char* second_name)
{
    Example::PersonImpl* self = static_cast<Example::PersonImpl*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        self->SetSecondName(second_name);
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            try
            {
                exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            try
            {
                exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            try
            {
                exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            try
            {
                exception_info->object_pointer = new Exception::GenericImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
        }
    }
}

EXAMPLE_API const char* EXAMPLE_API_CONVENTION example_person_get_second_name(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer)
{
    const Example::PersonImpl* self = static_cast<Example::PersonImpl*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return self->GetSecondName();
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            try
            {
                exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            try
            {
                exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            try
            {
                exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            try
            {
                exception_info->object_pointer = new Exception::GenericImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
        }
    }
    return static_cast<const char*>(0);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_person_set_age(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer, unsigned int age)
{
    Example::PersonImpl* self = static_cast<Example::PersonImpl*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        self->SetAge(age);
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            try
            {
                exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            try
            {
                exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            try
            {
                exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            try
            {
                exception_info->object_pointer = new Exception::GenericImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
        }
    }
}

EXAMPLE_API unsigned int EXAMPLE_API_CONVENTION example_person_get_age(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer)
{
    const Example::PersonImpl* self = static_cast<Example::PersonImpl*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return self->GetAge();
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            try
            {
                exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            try
            {
                exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            try
            {
                exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            try
            {
                exception_info->object_pointer = new Exception::GenericImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
        }
    }
    return static_cast<unsigned int>(0);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_person_set_sex(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer, char sex)
{
    Example::PersonImpl* self = static_cast<Example::PersonImpl*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        self->SetSex(static_cast<Example::PersonImpl::ESex>(sex));
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            try
            {
                exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            try
            {
                exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            try
            {
                exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            try
            {
                exception_info->object_pointer = new Exception::GenericImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
        }
    }
}

EXAMPLE_API char EXAMPLE_API_CONVENTION example_person_get_sex(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer)
{
    const Example::PersonImpl* self = static_cast<Example::PersonImpl*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return static_cast<char>(self->GetSex());
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            try
            {
                exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            try
            {
                exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            try
            {
                exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            try
            {
                exception_info->object_pointer = new Exception::GenericImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
        }
    }
    return static_cast<char>(0);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_person_dump(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer, void* printer)
{
    const Example::PersonImpl* self = static_cast<Example::PersonImpl*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        self->Dump(static_cast<Example::IPrinter*>(printer));
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            try
            {
                exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            try
            {
                exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            try
            {
                exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            try
            {
                exception_info->object_pointer = new Exception::GenericImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
        }
    }
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_person_print(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer, void* printer, const char* text)
{
    const Example::PersonImpl* self = static_cast<Example::PersonImpl*>(object_pointer);
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        self->Print(static_cast<Example::IPrinter*>(printer), text);
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            try
            {
                exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            try
            {
                exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            try
            {
                exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            try
            {
                exception_info->object_pointer = new Exception::GenericImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
        }
    }
}

EXAMPLE_API void* EXAMPLE_API_CONVENTION example_person_copy(beautiful_capi_callback_exception_info_t* exception_info, void* object_pointer)
{
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return new Example::PersonImpl(*static_cast<Example::PersonImpl*>(object_pointer));
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            try
            {
                exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            try
            {
                exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            try
            {
                exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            try
            {
                exception_info->object_pointer = new Exception::GenericImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
        }
    }
    return static_cast<void*>(0);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_person_delete(void* object_pointer)
{
    delete static_cast<Example::PersonImpl*>(object_pointer);
}

EXAMPLE_API void* EXAMPLE_API_CONVENTION example_printer_callback_default(beautiful_capi_callback_exception_info_t* exception_info)
{
    try
    {
        if (exception_info)
        {
            exception_info->code = 0;
            exception_info->object_pointer = 0;
        }
        return new Example::AutoGen_Callback_Callback_PrinterImpl();
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            try
            {
                exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 3;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            try
            {
                exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 2;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            try
            {
                exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 4;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (Exception::GenericImpl& exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            try
            {
                exception_info->object_pointer = new Exception::GenericImpl(exception_object);
            }
            catch (...)
            {
                exception_info->code = -1;
                assert(false);
            }
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        if (exception_info)
        {
            exception_info->code = 1;
            exception_info->object_pointer = exception_object;
        }
    }
    catch (...)
    {
        if (exception_info)
        {
            exception_info->code = -1;
        }
    }
    return static_cast<void*>(0);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_printer_callback_set_c_function_for_copy(void* object_pointer, example_printer_copy_callback_type c_function_pointer)
{
    Example::AutoGen_Callback_Callback_PrinterImpl* self = static_cast<Example::AutoGen_Callback_Callback_PrinterImpl*>(object_pointer);
    self->SetCFunctionForCopy(c_function_pointer);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_printer_callback_set_c_function_for_delete(void* object_pointer, example_printer_delete_callback_type c_function_pointer)
{
    Example::AutoGen_Callback_Callback_PrinterImpl* self = static_cast<Example::AutoGen_Callback_Callback_PrinterImpl*>(object_pointer);
    self->SetCFunctionForDelete(c_function_pointer);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_printer_callback_set_object_pointer(void* object_pointer, void* custom_object)
{
    Example::AutoGen_Callback_Callback_PrinterImpl* self = static_cast<Example::AutoGen_Callback_Callback_PrinterImpl*>(object_pointer);
    self->SetObjectPointer(custom_object);
}

EXAMPLE_API void* EXAMPLE_API_CONVENTION example_printer_callback_get_object_pointer(void* object_pointer)
{
    const Example::AutoGen_Callback_Callback_PrinterImpl* self = static_cast<Example::AutoGen_Callback_Callback_PrinterImpl*>(object_pointer);
    return self->GetObjectPointer();
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_printer_callback_set_c_function_for_print(void* object_pointer, example_printer_print_callback_type c_function_pointer)
{
    Example::AutoGen_Callback_Callback_PrinterImpl* self = static_cast<Example::AutoGen_Callback_Callback_PrinterImpl*>(object_pointer);
    self->SetCFunctionForPrint(c_function_pointer);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_printer_callback_set_c_function_for_set_printing_quality(void* object_pointer, example_printer_set_printing_quality_callback_type c_function_pointer)
{
    Example::AutoGen_Callback_Callback_PrinterImpl* self = static_cast<Example::AutoGen_Callback_Callback_PrinterImpl*>(object_pointer);
    self->SetCFunctionForSetPrintingQuality(c_function_pointer);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_printer_callback_set_c_function_for_get_printing_quality(void* object_pointer, example_printer_get_printing_quality_callback_type c_function_pointer)
{
    Example::AutoGen_Callback_Callback_PrinterImpl* self = static_cast<Example::AutoGen_Callback_Callback_PrinterImpl*>(object_pointer);
    self->SetCFunctionForGetPrintingQuality(c_function_pointer);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_printer_callback_set_c_function_for_get_device_type(void* object_pointer, example_printer_get_device_type_callback_type c_function_pointer)
{
    Example::AutoGen_Callback_Callback_PrinterImpl* self = static_cast<Example::AutoGen_Callback_Callback_PrinterImpl*>(object_pointer);
    self->SetCFunctionForGetDeviceType(c_function_pointer);
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_printer_callback_add_ref(void* object_pointer)
{
    intrusive_ptr_add_ref(static_cast<Example::AutoGen_Callback_Callback_PrinterImpl*>(object_pointer));
}

EXAMPLE_API void EXAMPLE_API_CONVENTION example_printer_callback_release(void* object_pointer)
{
    intrusive_ptr_release(static_cast<Example::AutoGen_Callback_Callback_PrinterImpl*>(object_pointer));
}

EXAMPLE_API void* EXAMPLE_API_CONVENTION example_printer_callback_cast_to_base(void* object_pointer)
{
    return static_cast<Example::IPrinter*>(static_cast<Example::AutoGen_Callback_Callback_PrinterImpl*>(object_pointer));
}

EXAMPLE_API void* EXAMPLE_API_CONVENTION example_printer_cast_to_example_printer_callback(void* source_object)
{
    if (source_object)
    {
        return dynamic_cast<Example::AutoGen_Callback_Callback_PrinterImpl*>(static_cast<Example::IPrinter*>(source_object));
    }
    else
    {
        return 0;
    }
}
