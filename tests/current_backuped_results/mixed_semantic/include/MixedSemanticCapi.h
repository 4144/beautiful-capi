/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#ifndef MIXEDSEMANTIC_CAPI_INCLUDED
#define MIXEDSEMANTIC_CAPI_INCLUDED

#include <stddef.h>

#ifdef __cplusplus
    #define MIXEDSEMANTIC_CAPI_PREFIX extern "C"
#else /* __cplusplus */
    #define MIXEDSEMANTIC_CAPI_PREFIX
#endif /* __cplusplus */

#ifdef _WIN32
    #ifdef __GNUC__
        #define MIXEDSEMANTIC_API MIXEDSEMANTIC_CAPI_PREFIX __attribute__ ((dllimport))
        #define MIXEDSEMANTIC_API_CONVENTION __attribute__ ((cdecl))
    #else
        #define MIXEDSEMANTIC_API MIXEDSEMANTIC_CAPI_PREFIX __declspec(dllimport)
        #define MIXEDSEMANTIC_API_CONVENTION __cdecl
    #endif
#elif __APPLE__
    #if defined(__GNUC__) && __GNUC__ >= 4
        #define MIXEDSEMANTIC_API MIXEDSEMANTIC_CAPI_PREFIX __attribute__ ((visibility ("default")))
    #else
        #define MIXEDSEMANTIC_API MIXEDSEMANTIC_CAPI_PREFIX
    #endif
    #ifdef __i386__
        #define MIXEDSEMANTIC_API_CONVENTION __attribute__ ((cdecl))
    #else /* __i386__ */
        #define MIXEDSEMANTIC_API_CONVENTION
    #endif /* __i386__ */
#elif __unix__ || __linux__
    #if defined(__GNUC__) && __GNUC__ >= 4
        #define MIXEDSEMANTIC_API MIXEDSEMANTIC_CAPI_PREFIX __attribute__ ((visibility ("default")))
    #else
        #define MIXEDSEMANTIC_API MIXEDSEMANTIC_CAPI_PREFIX
    #endif
    #ifdef __i386__
        #define MIXEDSEMANTIC_API_CONVENTION __attribute__ ((cdecl))
    #else /* __i386__ */
        #define MIXEDSEMANTIC_API_CONVENTION
    #endif /* __i386__ */
#else
    #error "Unknown platform"
#endif

#define MIXEDSEMANTIC_MAJOR_VERSION 1
#define MIXEDSEMANTIC_MINOR_VERSION 0
#define MIXEDSEMANTIC_PATCH_VERSION 0

#ifdef __cplusplus
    #ifdef _MSC_VER
        #if _MSC_VER >= 1900
            #define MIXEDSEMANTIC_NOEXCEPT noexcept
        #else /* _MSC_VER >= 1900 */
            #define MIXEDSEMANTIC_NOEXCEPT
        #endif /* _MSC_VER >= 1900 */
        #if _MSC_VER >= 1600
            #define MIXEDSEMANTIC_CPP_COMPILER_HAS_RVALUE_REFERENCES
        #endif /* _MSC_VER >= 1600 */
        #if _MSC_VER >= 1800
            #define MIXEDSEMANTIC_CPP_COMPILER_HAS_MOVE_CONSTRUCTOR_DELETE
        #endif /* _MSC_VER >= 1800 */
    #else /* _MSC_VER */
        #if __cplusplus >= 201103L
            #define MIXEDSEMANTIC_NOEXCEPT noexcept
            #define MIXEDSEMANTIC_CPP_COMPILER_HAS_RVALUE_REFERENCES
            #define MIXEDSEMANTIC_CPP_COMPILER_HAS_MOVE_CONSTRUCTOR_DELETE
        #else /* __cplusplus >= 201103L */
            #define MIXEDSEMANTIC_NOEXCEPT
        #endif /* __cplusplus >= 201103L */
    #endif /* _MSC_VER */
#endif /* __cplusplus */

#ifndef MIXEDSEMANTIC_CAPI_USE_DYNAMIC_LOADER

    MIXEDSEMANTIC_API int MIXEDSEMANTIC_API_CONVENTION mixed_semantic_get_major_version();
    MIXEDSEMANTIC_API int MIXEDSEMANTIC_API_CONVENTION mixed_semantic_get_minor_version();
    MIXEDSEMANTIC_API int MIXEDSEMANTIC_API_CONVENTION mixed_semantic_get_patch_version();
    MIXEDSEMANTIC_API void* MIXEDSEMANTIC_API_CONVENTION mixed_semantic_name_full_name(const char* FirstName, const char* FatherName, const char* LastName);
    MIXEDSEMANTIC_API const char* MIXEDSEMANTIC_API_CONVENTION mixed_semantic_name_get_first_name_const(void* object_pointer);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_name_set_first_name(void* object_pointer, const char* first_name);
    MIXEDSEMANTIC_API const char* MIXEDSEMANTIC_API_CONVENTION mixed_semantic_name_get_last_name_const(void* object_pointer);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_name_set_last_name(void* object_pointer, const char* last_name);
    MIXEDSEMANTIC_API void* MIXEDSEMANTIC_API_CONVENTION mixed_semantic_name_copy(void* object_pointer);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_name_delete(void* object_pointer);
    MIXEDSEMANTIC_API void* MIXEDSEMANTIC_API_CONVENTION mixed_semantic_address_default();
    MIXEDSEMANTIC_API const char* MIXEDSEMANTIC_API_CONVENTION mixed_semantic_address_get_street_name_const(void* object_pointer);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_address_set_street_name(void* object_pointer, const char* street_name);
    MIXEDSEMANTIC_API const char* MIXEDSEMANTIC_API_CONVENTION mixed_semantic_address_get_city_const(void* object_pointer);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_address_set_city(void* object_pointer, const char* city);
    MIXEDSEMANTIC_API unsigned int MIXEDSEMANTIC_API_CONVENTION mixed_semantic_address_get_state_const(void* object_pointer);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_address_set_state(void* object_pointer, unsigned int state);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_address_add_ref(void* object_pointer);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_address_release(void* object_pointer);
    MIXEDSEMANTIC_API void* MIXEDSEMANTIC_API_CONVENTION mixed_semantic_person_default();
    MIXEDSEMANTIC_API void* MIXEDSEMANTIC_API_CONVENTION mixed_semantic_person_get_address_const(void* object_pointer);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_person_set_address(void* object_pointer, void* address);
    MIXEDSEMANTIC_API void* MIXEDSEMANTIC_API_CONVENTION mixed_semantic_person_get_name_const(void* object_pointer);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_person_set_name(void* object_pointer, void* name);
    MIXEDSEMANTIC_API unsigned int MIXEDSEMANTIC_API_CONVENTION mixed_semantic_person_get_day_const(void* object_pointer);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_person_set_day(void* object_pointer, unsigned int day);
    MIXEDSEMANTIC_API unsigned int MIXEDSEMANTIC_API_CONVENTION mixed_semantic_person_get_month_const(void* object_pointer);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_person_set_month(void* object_pointer, unsigned int month);
    MIXEDSEMANTIC_API unsigned int MIXEDSEMANTIC_API_CONVENTION mixed_semantic_person_get_year_const(void* object_pointer);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_person_set_year(void* object_pointer, unsigned int year);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_person_delete(void* object_pointer);
    MIXEDSEMANTIC_API void* MIXEDSEMANTIC_API_CONVENTION mixed_semantic_printer_default();
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_printer_show(void* object_pointer, void* name);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_printer_show_by_pointer(void* object_pointer, void* name);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_printer_show_by_reference(void* object_pointer, void* name);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_printer_show_1(void* object_pointer, void* person);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_printer_show_by_pointer_1(void* object_pointer, void* person);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_printer_show_by_reference_1(void* object_pointer, void* person);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_printer_show_2(void* object_pointer, void* address);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_printer_show_by_pointer_2(void* object_pointer, void* address);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_printer_show_by_reference_2(void* object_pointer, void* address);
    MIXEDSEMANTIC_API void* MIXEDSEMANTIC_API_CONVENTION mixed_semantic_printer_copy(void* object_pointer);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_printer_delete(void* object_pointer);
    MIXEDSEMANTIC_API void* MIXEDSEMANTIC_API_CONVENTION mixed_semantic_mutator_default();
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_mutator_mutate(void* object_pointer, void* name);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_mutator_mutate_by_pointer(void* object_pointer, void* name);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_mutator_mutate_by_reference(void* object_pointer, void* name);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_mutator_mutate_1(void* object_pointer, void* person);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_mutator_mutate_by_pointer_1(void* object_pointer, void* person);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_mutator_mutate_by_reference_1(void* object_pointer, void* person);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_mutator_mutate_2(void* object_pointer, void* address);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_mutator_mutate_by_pointer_2(void* object_pointer, void* address);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_mutator_mutate_by_reference_2(void* object_pointer, void* address);
    MIXEDSEMANTIC_API void* MIXEDSEMANTIC_API_CONVENTION mixed_semantic_mutator_copy(void* object_pointer);
    MIXEDSEMANTIC_API void MIXEDSEMANTIC_API_CONVENTION mixed_semantic_mutator_delete(void* object_pointer);

    #ifdef __cplusplus

    #include <stdexcept>
    #include <sstream>

    namespace MixedSemantic
    {
        class Initialization
        {
        public:
            Initialization()
            {
                const int major_version = mixed_semantic_get_major_version();
                const int minor_version = mixed_semantic_get_minor_version();
                const int patch_version = mixed_semantic_get_patch_version();
                if (major_version != MIXEDSEMANTIC_MAJOR_VERSION || minor_version != MIXEDSEMANTIC_MINOR_VERSION || patch_version != MIXEDSEMANTIC_PATCH_VERSION)
                {
                    std::stringstream error_message;
                    error_message << "Incorrect version of library. ";
                    error_message << "Expected version is " << MIXEDSEMANTIC_MAJOR_VERSION << "." << MIXEDSEMANTIC_MINOR_VERSION << "." << MIXEDSEMANTIC_PATCH_VERSION << ". ";
                    error_message << "Found version is " << major_version << "." << minor_version << "." << patch_version << ".";
                    throw std::runtime_error(error_message.str());
                }
            }
        };
    }

    #endif /* __cplusplus */

#else /* MIXEDSEMANTIC_CAPI_USE_DYNAMIC_LOADER */

    typedef int (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_get_major_version_function_type)();
    typedef int (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_get_minor_version_function_type)();
    typedef int (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_get_patch_version_function_type)();
    typedef void* (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_name_full_name_function_type)(const char* FirstName, const char* FatherName, const char* LastName);
    typedef const char* (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_name_get_first_name_const_function_type)(void* object_pointer);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_name_set_first_name_function_type)(void* object_pointer, const char* first_name);
    typedef const char* (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_name_get_last_name_const_function_type)(void* object_pointer);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_name_set_last_name_function_type)(void* object_pointer, const char* last_name);
    typedef void* (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_name_copy_function_type)(void* object_pointer);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_name_delete_function_type)(void* object_pointer);
    typedef void* (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_address_default_function_type)();
    typedef const char* (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_address_get_street_name_const_function_type)(void* object_pointer);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_address_set_street_name_function_type)(void* object_pointer, const char* street_name);
    typedef const char* (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_address_get_city_const_function_type)(void* object_pointer);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_address_set_city_function_type)(void* object_pointer, const char* city);
    typedef unsigned int (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_address_get_state_const_function_type)(void* object_pointer);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_address_set_state_function_type)(void* object_pointer, unsigned int state);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_address_add_ref_function_type)(void* object_pointer);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_address_release_function_type)(void* object_pointer);
    typedef void* (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_person_default_function_type)();
    typedef void* (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_person_get_address_const_function_type)(void* object_pointer);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_person_set_address_function_type)(void* object_pointer, void* address);
    typedef void* (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_person_get_name_const_function_type)(void* object_pointer);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_person_set_name_function_type)(void* object_pointer, void* name);
    typedef unsigned int (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_person_get_day_const_function_type)(void* object_pointer);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_person_set_day_function_type)(void* object_pointer, unsigned int day);
    typedef unsigned int (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_person_get_month_const_function_type)(void* object_pointer);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_person_set_month_function_type)(void* object_pointer, unsigned int month);
    typedef unsigned int (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_person_get_year_const_function_type)(void* object_pointer);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_person_set_year_function_type)(void* object_pointer, unsigned int year);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_person_delete_function_type)(void* object_pointer);
    typedef void* (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_printer_default_function_type)();
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_printer_show_function_type)(void* object_pointer, void* name);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_printer_show_by_pointer_function_type)(void* object_pointer, void* name);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_printer_show_by_reference_function_type)(void* object_pointer, void* name);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_printer_show_1_function_type)(void* object_pointer, void* person);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_printer_show_by_pointer_1_function_type)(void* object_pointer, void* person);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_printer_show_by_reference_1_function_type)(void* object_pointer, void* person);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_printer_show_2_function_type)(void* object_pointer, void* address);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_printer_show_by_pointer_2_function_type)(void* object_pointer, void* address);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_printer_show_by_reference_2_function_type)(void* object_pointer, void* address);
    typedef void* (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_printer_copy_function_type)(void* object_pointer);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_printer_delete_function_type)(void* object_pointer);
    typedef void* (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_mutator_default_function_type)();
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_mutator_mutate_function_type)(void* object_pointer, void* name);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_mutator_mutate_by_pointer_function_type)(void* object_pointer, void* name);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_mutator_mutate_by_reference_function_type)(void* object_pointer, void* name);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_mutator_mutate_1_function_type)(void* object_pointer, void* person);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_mutator_mutate_by_pointer_1_function_type)(void* object_pointer, void* person);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_mutator_mutate_by_reference_1_function_type)(void* object_pointer, void* person);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_mutator_mutate_2_function_type)(void* object_pointer, void* address);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_mutator_mutate_by_pointer_2_function_type)(void* object_pointer, void* address);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_mutator_mutate_by_reference_2_function_type)(void* object_pointer, void* address);
    typedef void* (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_mutator_copy_function_type)(void* object_pointer);
    typedef void (MIXEDSEMANTIC_API_CONVENTION *mixed_semantic_mutator_delete_function_type)(void* object_pointer);

    #ifdef MIXEDSEMANTIC_CAPI_DEFINE_FUNCTION_POINTERS

        #ifdef mixed_semantic_get_major_version_define_function_pointer_var
            mixed_semantic_get_major_version_define_function_pointer_var
        #else
            mixed_semantic_get_major_version_function_type mixed_semantic_get_major_version = 0;
        #endif
        #ifdef mixed_semantic_get_minor_version_define_function_pointer_var
            mixed_semantic_get_minor_version_define_function_pointer_var
        #else
            mixed_semantic_get_minor_version_function_type mixed_semantic_get_minor_version = 0;
        #endif
        #ifdef mixed_semantic_get_patch_version_define_function_pointer_var
            mixed_semantic_get_patch_version_define_function_pointer_var
        #else
            mixed_semantic_get_patch_version_function_type mixed_semantic_get_patch_version = 0;
        #endif
        #ifdef mixed_semantic_name_full_name_define_function_pointer_var
            mixed_semantic_name_full_name_define_function_pointer_var
        #else
            mixed_semantic_name_full_name_function_type mixed_semantic_name_full_name = 0;
        #endif
        #ifdef mixed_semantic_name_get_first_name_const_define_function_pointer_var
            mixed_semantic_name_get_first_name_const_define_function_pointer_var
        #else
            mixed_semantic_name_get_first_name_const_function_type mixed_semantic_name_get_first_name_const = 0;
        #endif
        #ifdef mixed_semantic_name_set_first_name_define_function_pointer_var
            mixed_semantic_name_set_first_name_define_function_pointer_var
        #else
            mixed_semantic_name_set_first_name_function_type mixed_semantic_name_set_first_name = 0;
        #endif
        #ifdef mixed_semantic_name_get_last_name_const_define_function_pointer_var
            mixed_semantic_name_get_last_name_const_define_function_pointer_var
        #else
            mixed_semantic_name_get_last_name_const_function_type mixed_semantic_name_get_last_name_const = 0;
        #endif
        #ifdef mixed_semantic_name_set_last_name_define_function_pointer_var
            mixed_semantic_name_set_last_name_define_function_pointer_var
        #else
            mixed_semantic_name_set_last_name_function_type mixed_semantic_name_set_last_name = 0;
        #endif
        #ifdef mixed_semantic_name_copy_define_function_pointer_var
            mixed_semantic_name_copy_define_function_pointer_var
        #else
            mixed_semantic_name_copy_function_type mixed_semantic_name_copy = 0;
        #endif
        #ifdef mixed_semantic_name_delete_define_function_pointer_var
            mixed_semantic_name_delete_define_function_pointer_var
        #else
            mixed_semantic_name_delete_function_type mixed_semantic_name_delete = 0;
        #endif
        #ifdef mixed_semantic_address_default_define_function_pointer_var
            mixed_semantic_address_default_define_function_pointer_var
        #else
            mixed_semantic_address_default_function_type mixed_semantic_address_default = 0;
        #endif
        #ifdef mixed_semantic_address_get_street_name_const_define_function_pointer_var
            mixed_semantic_address_get_street_name_const_define_function_pointer_var
        #else
            mixed_semantic_address_get_street_name_const_function_type mixed_semantic_address_get_street_name_const = 0;
        #endif
        #ifdef mixed_semantic_address_set_street_name_define_function_pointer_var
            mixed_semantic_address_set_street_name_define_function_pointer_var
        #else
            mixed_semantic_address_set_street_name_function_type mixed_semantic_address_set_street_name = 0;
        #endif
        #ifdef mixed_semantic_address_get_city_const_define_function_pointer_var
            mixed_semantic_address_get_city_const_define_function_pointer_var
        #else
            mixed_semantic_address_get_city_const_function_type mixed_semantic_address_get_city_const = 0;
        #endif
        #ifdef mixed_semantic_address_set_city_define_function_pointer_var
            mixed_semantic_address_set_city_define_function_pointer_var
        #else
            mixed_semantic_address_set_city_function_type mixed_semantic_address_set_city = 0;
        #endif
        #ifdef mixed_semantic_address_get_state_const_define_function_pointer_var
            mixed_semantic_address_get_state_const_define_function_pointer_var
        #else
            mixed_semantic_address_get_state_const_function_type mixed_semantic_address_get_state_const = 0;
        #endif
        #ifdef mixed_semantic_address_set_state_define_function_pointer_var
            mixed_semantic_address_set_state_define_function_pointer_var
        #else
            mixed_semantic_address_set_state_function_type mixed_semantic_address_set_state = 0;
        #endif
        #ifdef mixed_semantic_address_add_ref_define_function_pointer_var
            mixed_semantic_address_add_ref_define_function_pointer_var
        #else
            mixed_semantic_address_add_ref_function_type mixed_semantic_address_add_ref = 0;
        #endif
        #ifdef mixed_semantic_address_release_define_function_pointer_var
            mixed_semantic_address_release_define_function_pointer_var
        #else
            mixed_semantic_address_release_function_type mixed_semantic_address_release = 0;
        #endif
        #ifdef mixed_semantic_person_default_define_function_pointer_var
            mixed_semantic_person_default_define_function_pointer_var
        #else
            mixed_semantic_person_default_function_type mixed_semantic_person_default = 0;
        #endif
        #ifdef mixed_semantic_person_get_address_const_define_function_pointer_var
            mixed_semantic_person_get_address_const_define_function_pointer_var
        #else
            mixed_semantic_person_get_address_const_function_type mixed_semantic_person_get_address_const = 0;
        #endif
        #ifdef mixed_semantic_person_set_address_define_function_pointer_var
            mixed_semantic_person_set_address_define_function_pointer_var
        #else
            mixed_semantic_person_set_address_function_type mixed_semantic_person_set_address = 0;
        #endif
        #ifdef mixed_semantic_person_get_name_const_define_function_pointer_var
            mixed_semantic_person_get_name_const_define_function_pointer_var
        #else
            mixed_semantic_person_get_name_const_function_type mixed_semantic_person_get_name_const = 0;
        #endif
        #ifdef mixed_semantic_person_set_name_define_function_pointer_var
            mixed_semantic_person_set_name_define_function_pointer_var
        #else
            mixed_semantic_person_set_name_function_type mixed_semantic_person_set_name = 0;
        #endif
        #ifdef mixed_semantic_person_get_day_const_define_function_pointer_var
            mixed_semantic_person_get_day_const_define_function_pointer_var
        #else
            mixed_semantic_person_get_day_const_function_type mixed_semantic_person_get_day_const = 0;
        #endif
        #ifdef mixed_semantic_person_set_day_define_function_pointer_var
            mixed_semantic_person_set_day_define_function_pointer_var
        #else
            mixed_semantic_person_set_day_function_type mixed_semantic_person_set_day = 0;
        #endif
        #ifdef mixed_semantic_person_get_month_const_define_function_pointer_var
            mixed_semantic_person_get_month_const_define_function_pointer_var
        #else
            mixed_semantic_person_get_month_const_function_type mixed_semantic_person_get_month_const = 0;
        #endif
        #ifdef mixed_semantic_person_set_month_define_function_pointer_var
            mixed_semantic_person_set_month_define_function_pointer_var
        #else
            mixed_semantic_person_set_month_function_type mixed_semantic_person_set_month = 0;
        #endif
        #ifdef mixed_semantic_person_get_year_const_define_function_pointer_var
            mixed_semantic_person_get_year_const_define_function_pointer_var
        #else
            mixed_semantic_person_get_year_const_function_type mixed_semantic_person_get_year_const = 0;
        #endif
        #ifdef mixed_semantic_person_set_year_define_function_pointer_var
            mixed_semantic_person_set_year_define_function_pointer_var
        #else
            mixed_semantic_person_set_year_function_type mixed_semantic_person_set_year = 0;
        #endif
        #ifdef mixed_semantic_person_delete_define_function_pointer_var
            mixed_semantic_person_delete_define_function_pointer_var
        #else
            mixed_semantic_person_delete_function_type mixed_semantic_person_delete = 0;
        #endif
        #ifdef mixed_semantic_printer_default_define_function_pointer_var
            mixed_semantic_printer_default_define_function_pointer_var
        #else
            mixed_semantic_printer_default_function_type mixed_semantic_printer_default = 0;
        #endif
        #ifdef mixed_semantic_printer_show_define_function_pointer_var
            mixed_semantic_printer_show_define_function_pointer_var
        #else
            mixed_semantic_printer_show_function_type mixed_semantic_printer_show = 0;
        #endif
        #ifdef mixed_semantic_printer_show_by_pointer_define_function_pointer_var
            mixed_semantic_printer_show_by_pointer_define_function_pointer_var
        #else
            mixed_semantic_printer_show_by_pointer_function_type mixed_semantic_printer_show_by_pointer = 0;
        #endif
        #ifdef mixed_semantic_printer_show_by_reference_define_function_pointer_var
            mixed_semantic_printer_show_by_reference_define_function_pointer_var
        #else
            mixed_semantic_printer_show_by_reference_function_type mixed_semantic_printer_show_by_reference = 0;
        #endif
        #ifdef mixed_semantic_printer_show_1_define_function_pointer_var
            mixed_semantic_printer_show_1_define_function_pointer_var
        #else
            mixed_semantic_printer_show_1_function_type mixed_semantic_printer_show_1 = 0;
        #endif
        #ifdef mixed_semantic_printer_show_by_pointer_1_define_function_pointer_var
            mixed_semantic_printer_show_by_pointer_1_define_function_pointer_var
        #else
            mixed_semantic_printer_show_by_pointer_1_function_type mixed_semantic_printer_show_by_pointer_1 = 0;
        #endif
        #ifdef mixed_semantic_printer_show_by_reference_1_define_function_pointer_var
            mixed_semantic_printer_show_by_reference_1_define_function_pointer_var
        #else
            mixed_semantic_printer_show_by_reference_1_function_type mixed_semantic_printer_show_by_reference_1 = 0;
        #endif
        #ifdef mixed_semantic_printer_show_2_define_function_pointer_var
            mixed_semantic_printer_show_2_define_function_pointer_var
        #else
            mixed_semantic_printer_show_2_function_type mixed_semantic_printer_show_2 = 0;
        #endif
        #ifdef mixed_semantic_printer_show_by_pointer_2_define_function_pointer_var
            mixed_semantic_printer_show_by_pointer_2_define_function_pointer_var
        #else
            mixed_semantic_printer_show_by_pointer_2_function_type mixed_semantic_printer_show_by_pointer_2 = 0;
        #endif
        #ifdef mixed_semantic_printer_show_by_reference_2_define_function_pointer_var
            mixed_semantic_printer_show_by_reference_2_define_function_pointer_var
        #else
            mixed_semantic_printer_show_by_reference_2_function_type mixed_semantic_printer_show_by_reference_2 = 0;
        #endif
        #ifdef mixed_semantic_printer_copy_define_function_pointer_var
            mixed_semantic_printer_copy_define_function_pointer_var
        #else
            mixed_semantic_printer_copy_function_type mixed_semantic_printer_copy = 0;
        #endif
        #ifdef mixed_semantic_printer_delete_define_function_pointer_var
            mixed_semantic_printer_delete_define_function_pointer_var
        #else
            mixed_semantic_printer_delete_function_type mixed_semantic_printer_delete = 0;
        #endif
        #ifdef mixed_semantic_mutator_default_define_function_pointer_var
            mixed_semantic_mutator_default_define_function_pointer_var
        #else
            mixed_semantic_mutator_default_function_type mixed_semantic_mutator_default = 0;
        #endif
        #ifdef mixed_semantic_mutator_mutate_define_function_pointer_var
            mixed_semantic_mutator_mutate_define_function_pointer_var
        #else
            mixed_semantic_mutator_mutate_function_type mixed_semantic_mutator_mutate = 0;
        #endif
        #ifdef mixed_semantic_mutator_mutate_by_pointer_define_function_pointer_var
            mixed_semantic_mutator_mutate_by_pointer_define_function_pointer_var
        #else
            mixed_semantic_mutator_mutate_by_pointer_function_type mixed_semantic_mutator_mutate_by_pointer = 0;
        #endif
        #ifdef mixed_semantic_mutator_mutate_by_reference_define_function_pointer_var
            mixed_semantic_mutator_mutate_by_reference_define_function_pointer_var
        #else
            mixed_semantic_mutator_mutate_by_reference_function_type mixed_semantic_mutator_mutate_by_reference = 0;
        #endif
        #ifdef mixed_semantic_mutator_mutate_1_define_function_pointer_var
            mixed_semantic_mutator_mutate_1_define_function_pointer_var
        #else
            mixed_semantic_mutator_mutate_1_function_type mixed_semantic_mutator_mutate_1 = 0;
        #endif
        #ifdef mixed_semantic_mutator_mutate_by_pointer_1_define_function_pointer_var
            mixed_semantic_mutator_mutate_by_pointer_1_define_function_pointer_var
        #else
            mixed_semantic_mutator_mutate_by_pointer_1_function_type mixed_semantic_mutator_mutate_by_pointer_1 = 0;
        #endif
        #ifdef mixed_semantic_mutator_mutate_by_reference_1_define_function_pointer_var
            mixed_semantic_mutator_mutate_by_reference_1_define_function_pointer_var
        #else
            mixed_semantic_mutator_mutate_by_reference_1_function_type mixed_semantic_mutator_mutate_by_reference_1 = 0;
        #endif
        #ifdef mixed_semantic_mutator_mutate_2_define_function_pointer_var
            mixed_semantic_mutator_mutate_2_define_function_pointer_var
        #else
            mixed_semantic_mutator_mutate_2_function_type mixed_semantic_mutator_mutate_2 = 0;
        #endif
        #ifdef mixed_semantic_mutator_mutate_by_pointer_2_define_function_pointer_var
            mixed_semantic_mutator_mutate_by_pointer_2_define_function_pointer_var
        #else
            mixed_semantic_mutator_mutate_by_pointer_2_function_type mixed_semantic_mutator_mutate_by_pointer_2 = 0;
        #endif
        #ifdef mixed_semantic_mutator_mutate_by_reference_2_define_function_pointer_var
            mixed_semantic_mutator_mutate_by_reference_2_define_function_pointer_var
        #else
            mixed_semantic_mutator_mutate_by_reference_2_function_type mixed_semantic_mutator_mutate_by_reference_2 = 0;
        #endif
        #ifdef mixed_semantic_mutator_copy_define_function_pointer_var
            mixed_semantic_mutator_copy_define_function_pointer_var
        #else
            mixed_semantic_mutator_copy_function_type mixed_semantic_mutator_copy = 0;
        #endif
        #ifdef mixed_semantic_mutator_delete_define_function_pointer_var
            mixed_semantic_mutator_delete_define_function_pointer_var
        #else
            mixed_semantic_mutator_delete_function_type mixed_semantic_mutator_delete = 0;
        #endif

    #else /* MIXEDSEMANTIC_CAPI_DEFINE_FUNCTION_POINTERS */

        extern mixed_semantic_get_major_version_function_type mixed_semantic_get_major_version;
        extern mixed_semantic_get_minor_version_function_type mixed_semantic_get_minor_version;
        extern mixed_semantic_get_patch_version_function_type mixed_semantic_get_patch_version;
        extern mixed_semantic_name_full_name_function_type mixed_semantic_name_full_name;
        extern mixed_semantic_name_get_first_name_const_function_type mixed_semantic_name_get_first_name_const;
        extern mixed_semantic_name_set_first_name_function_type mixed_semantic_name_set_first_name;
        extern mixed_semantic_name_get_last_name_const_function_type mixed_semantic_name_get_last_name_const;
        extern mixed_semantic_name_set_last_name_function_type mixed_semantic_name_set_last_name;
        extern mixed_semantic_name_copy_function_type mixed_semantic_name_copy;
        extern mixed_semantic_name_delete_function_type mixed_semantic_name_delete;
        extern mixed_semantic_address_default_function_type mixed_semantic_address_default;
        extern mixed_semantic_address_get_street_name_const_function_type mixed_semantic_address_get_street_name_const;
        extern mixed_semantic_address_set_street_name_function_type mixed_semantic_address_set_street_name;
        extern mixed_semantic_address_get_city_const_function_type mixed_semantic_address_get_city_const;
        extern mixed_semantic_address_set_city_function_type mixed_semantic_address_set_city;
        extern mixed_semantic_address_get_state_const_function_type mixed_semantic_address_get_state_const;
        extern mixed_semantic_address_set_state_function_type mixed_semantic_address_set_state;
        extern mixed_semantic_address_add_ref_function_type mixed_semantic_address_add_ref;
        extern mixed_semantic_address_release_function_type mixed_semantic_address_release;
        extern mixed_semantic_person_default_function_type mixed_semantic_person_default;
        extern mixed_semantic_person_get_address_const_function_type mixed_semantic_person_get_address_const;
        extern mixed_semantic_person_set_address_function_type mixed_semantic_person_set_address;
        extern mixed_semantic_person_get_name_const_function_type mixed_semantic_person_get_name_const;
        extern mixed_semantic_person_set_name_function_type mixed_semantic_person_set_name;
        extern mixed_semantic_person_get_day_const_function_type mixed_semantic_person_get_day_const;
        extern mixed_semantic_person_set_day_function_type mixed_semantic_person_set_day;
        extern mixed_semantic_person_get_month_const_function_type mixed_semantic_person_get_month_const;
        extern mixed_semantic_person_set_month_function_type mixed_semantic_person_set_month;
        extern mixed_semantic_person_get_year_const_function_type mixed_semantic_person_get_year_const;
        extern mixed_semantic_person_set_year_function_type mixed_semantic_person_set_year;
        extern mixed_semantic_person_delete_function_type mixed_semantic_person_delete;
        extern mixed_semantic_printer_default_function_type mixed_semantic_printer_default;
        extern mixed_semantic_printer_show_function_type mixed_semantic_printer_show;
        extern mixed_semantic_printer_show_by_pointer_function_type mixed_semantic_printer_show_by_pointer;
        extern mixed_semantic_printer_show_by_reference_function_type mixed_semantic_printer_show_by_reference;
        extern mixed_semantic_printer_show_1_function_type mixed_semantic_printer_show_1;
        extern mixed_semantic_printer_show_by_pointer_1_function_type mixed_semantic_printer_show_by_pointer_1;
        extern mixed_semantic_printer_show_by_reference_1_function_type mixed_semantic_printer_show_by_reference_1;
        extern mixed_semantic_printer_show_2_function_type mixed_semantic_printer_show_2;
        extern mixed_semantic_printer_show_by_pointer_2_function_type mixed_semantic_printer_show_by_pointer_2;
        extern mixed_semantic_printer_show_by_reference_2_function_type mixed_semantic_printer_show_by_reference_2;
        extern mixed_semantic_printer_copy_function_type mixed_semantic_printer_copy;
        extern mixed_semantic_printer_delete_function_type mixed_semantic_printer_delete;
        extern mixed_semantic_mutator_default_function_type mixed_semantic_mutator_default;
        extern mixed_semantic_mutator_mutate_function_type mixed_semantic_mutator_mutate;
        extern mixed_semantic_mutator_mutate_by_pointer_function_type mixed_semantic_mutator_mutate_by_pointer;
        extern mixed_semantic_mutator_mutate_by_reference_function_type mixed_semantic_mutator_mutate_by_reference;
        extern mixed_semantic_mutator_mutate_1_function_type mixed_semantic_mutator_mutate_1;
        extern mixed_semantic_mutator_mutate_by_pointer_1_function_type mixed_semantic_mutator_mutate_by_pointer_1;
        extern mixed_semantic_mutator_mutate_by_reference_1_function_type mixed_semantic_mutator_mutate_by_reference_1;
        extern mixed_semantic_mutator_mutate_2_function_type mixed_semantic_mutator_mutate_2;
        extern mixed_semantic_mutator_mutate_by_pointer_2_function_type mixed_semantic_mutator_mutate_by_pointer_2;
        extern mixed_semantic_mutator_mutate_by_reference_2_function_type mixed_semantic_mutator_mutate_by_reference_2;
        extern mixed_semantic_mutator_copy_function_type mixed_semantic_mutator_copy;
        extern mixed_semantic_mutator_delete_function_type mixed_semantic_mutator_delete;

    #endif /* MIXEDSEMANTIC_CAPI_DEFINE_FUNCTION_POINTERS */

    #ifdef __cplusplus

    #include <stdexcept>
    #include <sstream>

    #ifdef _WIN32
        #include <Windows.h>
    #else /* _WIN32 */
        #include <dlfcn.h>
    #endif /* _WIN32 */

    namespace MixedSemantic
    {
        class Initialization
        {
            #ifdef _WIN32
                HINSTANCE handle;
            #else /* _WIN32 */
                void* handle;
            #endif /* _WIN32 */

            template<class FunctionPointerType>
            void load_function(FunctionPointerType& to_init, const char* name)
            {
                #ifdef _WIN32
                    to_init = reinterpret_cast<FunctionPointerType>(GetProcAddress(handle, name));
                #else /* _WIN32 */
                    to_init = reinterpret_cast<FunctionPointerType>(dlsym(handle, name));
                #endif /* _WIN32 */
                if (!to_init)
                {
                    std::stringstream error_message;
                    error_message << "Can't obtain function " << name;
                    throw std::runtime_error(error_message.str());
                }
            }

            void load_module(const char* shared_library_name)
            {
                if (!shared_library_name) throw std::runtime_error("Null library name was passed");
                #ifdef _WIN32
                    handle = LoadLibraryA(shared_library_name);
                #else /* _WIN32 */
                    handle = dlopen(shared_library_name, RTLD_NOW);
                #endif /* _WIN32 */
                if (!handle)
                {
                    std::stringstream error_message;
                    error_message << "Can't load shared library " << shared_library_name;
                    throw std::runtime_error(error_message.str());
                }
                #ifdef mixed_semantic_get_major_version_load_function_call
                    mixed_semantic_get_major_version_load_function_call
                #else /* mixed_semantic_get_major_version_load_function_call */
                    load_function<mixed_semantic_get_major_version_function_type>(mixed_semantic_get_major_version, "mixed_semantic_get_major_version");
                #endif /* mixed_semantic_get_major_version_load_function_call */
                #ifdef mixed_semantic_get_minor_version_load_function_call
                    mixed_semantic_get_minor_version_load_function_call
                #else /* mixed_semantic_get_minor_version_load_function_call */
                    load_function<mixed_semantic_get_minor_version_function_type>(mixed_semantic_get_minor_version, "mixed_semantic_get_minor_version");
                #endif /* mixed_semantic_get_minor_version_load_function_call */
                #ifdef mixed_semantic_get_patch_version_load_function_call
                    mixed_semantic_get_patch_version_load_function_call
                #else /* mixed_semantic_get_patch_version_load_function_call */
                    load_function<mixed_semantic_get_patch_version_function_type>(mixed_semantic_get_patch_version, "mixed_semantic_get_patch_version");
                #endif /* mixed_semantic_get_patch_version_load_function_call */
                #ifdef mixed_semantic_name_full_name_load_function_call
                    mixed_semantic_name_full_name_load_function_call
                #else /* mixed_semantic_name_full_name_load_function_call */
                    load_function<mixed_semantic_name_full_name_function_type>(mixed_semantic_name_full_name, "mixed_semantic_name_full_name");
                #endif /* mixed_semantic_name_full_name_load_function_call */
                #ifdef mixed_semantic_name_get_first_name_const_load_function_call
                    mixed_semantic_name_get_first_name_const_load_function_call
                #else /* mixed_semantic_name_get_first_name_const_load_function_call */
                    load_function<mixed_semantic_name_get_first_name_const_function_type>(mixed_semantic_name_get_first_name_const, "mixed_semantic_name_get_first_name_const");
                #endif /* mixed_semantic_name_get_first_name_const_load_function_call */
                #ifdef mixed_semantic_name_set_first_name_load_function_call
                    mixed_semantic_name_set_first_name_load_function_call
                #else /* mixed_semantic_name_set_first_name_load_function_call */
                    load_function<mixed_semantic_name_set_first_name_function_type>(mixed_semantic_name_set_first_name, "mixed_semantic_name_set_first_name");
                #endif /* mixed_semantic_name_set_first_name_load_function_call */
                #ifdef mixed_semantic_name_get_last_name_const_load_function_call
                    mixed_semantic_name_get_last_name_const_load_function_call
                #else /* mixed_semantic_name_get_last_name_const_load_function_call */
                    load_function<mixed_semantic_name_get_last_name_const_function_type>(mixed_semantic_name_get_last_name_const, "mixed_semantic_name_get_last_name_const");
                #endif /* mixed_semantic_name_get_last_name_const_load_function_call */
                #ifdef mixed_semantic_name_set_last_name_load_function_call
                    mixed_semantic_name_set_last_name_load_function_call
                #else /* mixed_semantic_name_set_last_name_load_function_call */
                    load_function<mixed_semantic_name_set_last_name_function_type>(mixed_semantic_name_set_last_name, "mixed_semantic_name_set_last_name");
                #endif /* mixed_semantic_name_set_last_name_load_function_call */
                #ifdef mixed_semantic_name_copy_load_function_call
                    mixed_semantic_name_copy_load_function_call
                #else /* mixed_semantic_name_copy_load_function_call */
                    load_function<mixed_semantic_name_copy_function_type>(mixed_semantic_name_copy, "mixed_semantic_name_copy");
                #endif /* mixed_semantic_name_copy_load_function_call */
                #ifdef mixed_semantic_name_delete_load_function_call
                    mixed_semantic_name_delete_load_function_call
                #else /* mixed_semantic_name_delete_load_function_call */
                    load_function<mixed_semantic_name_delete_function_type>(mixed_semantic_name_delete, "mixed_semantic_name_delete");
                #endif /* mixed_semantic_name_delete_load_function_call */
                #ifdef mixed_semantic_address_default_load_function_call
                    mixed_semantic_address_default_load_function_call
                #else /* mixed_semantic_address_default_load_function_call */
                    load_function<mixed_semantic_address_default_function_type>(mixed_semantic_address_default, "mixed_semantic_address_default");
                #endif /* mixed_semantic_address_default_load_function_call */
                #ifdef mixed_semantic_address_get_street_name_const_load_function_call
                    mixed_semantic_address_get_street_name_const_load_function_call
                #else /* mixed_semantic_address_get_street_name_const_load_function_call */
                    load_function<mixed_semantic_address_get_street_name_const_function_type>(mixed_semantic_address_get_street_name_const, "mixed_semantic_address_get_street_name_const");
                #endif /* mixed_semantic_address_get_street_name_const_load_function_call */
                #ifdef mixed_semantic_address_set_street_name_load_function_call
                    mixed_semantic_address_set_street_name_load_function_call
                #else /* mixed_semantic_address_set_street_name_load_function_call */
                    load_function<mixed_semantic_address_set_street_name_function_type>(mixed_semantic_address_set_street_name, "mixed_semantic_address_set_street_name");
                #endif /* mixed_semantic_address_set_street_name_load_function_call */
                #ifdef mixed_semantic_address_get_city_const_load_function_call
                    mixed_semantic_address_get_city_const_load_function_call
                #else /* mixed_semantic_address_get_city_const_load_function_call */
                    load_function<mixed_semantic_address_get_city_const_function_type>(mixed_semantic_address_get_city_const, "mixed_semantic_address_get_city_const");
                #endif /* mixed_semantic_address_get_city_const_load_function_call */
                #ifdef mixed_semantic_address_set_city_load_function_call
                    mixed_semantic_address_set_city_load_function_call
                #else /* mixed_semantic_address_set_city_load_function_call */
                    load_function<mixed_semantic_address_set_city_function_type>(mixed_semantic_address_set_city, "mixed_semantic_address_set_city");
                #endif /* mixed_semantic_address_set_city_load_function_call */
                #ifdef mixed_semantic_address_get_state_const_load_function_call
                    mixed_semantic_address_get_state_const_load_function_call
                #else /* mixed_semantic_address_get_state_const_load_function_call */
                    load_function<mixed_semantic_address_get_state_const_function_type>(mixed_semantic_address_get_state_const, "mixed_semantic_address_get_state_const");
                #endif /* mixed_semantic_address_get_state_const_load_function_call */
                #ifdef mixed_semantic_address_set_state_load_function_call
                    mixed_semantic_address_set_state_load_function_call
                #else /* mixed_semantic_address_set_state_load_function_call */
                    load_function<mixed_semantic_address_set_state_function_type>(mixed_semantic_address_set_state, "mixed_semantic_address_set_state");
                #endif /* mixed_semantic_address_set_state_load_function_call */
                #ifdef mixed_semantic_address_add_ref_load_function_call
                    mixed_semantic_address_add_ref_load_function_call
                #else /* mixed_semantic_address_add_ref_load_function_call */
                    load_function<mixed_semantic_address_add_ref_function_type>(mixed_semantic_address_add_ref, "mixed_semantic_address_add_ref");
                #endif /* mixed_semantic_address_add_ref_load_function_call */
                #ifdef mixed_semantic_address_release_load_function_call
                    mixed_semantic_address_release_load_function_call
                #else /* mixed_semantic_address_release_load_function_call */
                    load_function<mixed_semantic_address_release_function_type>(mixed_semantic_address_release, "mixed_semantic_address_release");
                #endif /* mixed_semantic_address_release_load_function_call */
                #ifdef mixed_semantic_person_default_load_function_call
                    mixed_semantic_person_default_load_function_call
                #else /* mixed_semantic_person_default_load_function_call */
                    load_function<mixed_semantic_person_default_function_type>(mixed_semantic_person_default, "mixed_semantic_person_default");
                #endif /* mixed_semantic_person_default_load_function_call */
                #ifdef mixed_semantic_person_get_address_const_load_function_call
                    mixed_semantic_person_get_address_const_load_function_call
                #else /* mixed_semantic_person_get_address_const_load_function_call */
                    load_function<mixed_semantic_person_get_address_const_function_type>(mixed_semantic_person_get_address_const, "mixed_semantic_person_get_address_const");
                #endif /* mixed_semantic_person_get_address_const_load_function_call */
                #ifdef mixed_semantic_person_set_address_load_function_call
                    mixed_semantic_person_set_address_load_function_call
                #else /* mixed_semantic_person_set_address_load_function_call */
                    load_function<mixed_semantic_person_set_address_function_type>(mixed_semantic_person_set_address, "mixed_semantic_person_set_address");
                #endif /* mixed_semantic_person_set_address_load_function_call */
                #ifdef mixed_semantic_person_get_name_const_load_function_call
                    mixed_semantic_person_get_name_const_load_function_call
                #else /* mixed_semantic_person_get_name_const_load_function_call */
                    load_function<mixed_semantic_person_get_name_const_function_type>(mixed_semantic_person_get_name_const, "mixed_semantic_person_get_name_const");
                #endif /* mixed_semantic_person_get_name_const_load_function_call */
                #ifdef mixed_semantic_person_set_name_load_function_call
                    mixed_semantic_person_set_name_load_function_call
                #else /* mixed_semantic_person_set_name_load_function_call */
                    load_function<mixed_semantic_person_set_name_function_type>(mixed_semantic_person_set_name, "mixed_semantic_person_set_name");
                #endif /* mixed_semantic_person_set_name_load_function_call */
                #ifdef mixed_semantic_person_get_day_const_load_function_call
                    mixed_semantic_person_get_day_const_load_function_call
                #else /* mixed_semantic_person_get_day_const_load_function_call */
                    load_function<mixed_semantic_person_get_day_const_function_type>(mixed_semantic_person_get_day_const, "mixed_semantic_person_get_day_const");
                #endif /* mixed_semantic_person_get_day_const_load_function_call */
                #ifdef mixed_semantic_person_set_day_load_function_call
                    mixed_semantic_person_set_day_load_function_call
                #else /* mixed_semantic_person_set_day_load_function_call */
                    load_function<mixed_semantic_person_set_day_function_type>(mixed_semantic_person_set_day, "mixed_semantic_person_set_day");
                #endif /* mixed_semantic_person_set_day_load_function_call */
                #ifdef mixed_semantic_person_get_month_const_load_function_call
                    mixed_semantic_person_get_month_const_load_function_call
                #else /* mixed_semantic_person_get_month_const_load_function_call */
                    load_function<mixed_semantic_person_get_month_const_function_type>(mixed_semantic_person_get_month_const, "mixed_semantic_person_get_month_const");
                #endif /* mixed_semantic_person_get_month_const_load_function_call */
                #ifdef mixed_semantic_person_set_month_load_function_call
                    mixed_semantic_person_set_month_load_function_call
                #else /* mixed_semantic_person_set_month_load_function_call */
                    load_function<mixed_semantic_person_set_month_function_type>(mixed_semantic_person_set_month, "mixed_semantic_person_set_month");
                #endif /* mixed_semantic_person_set_month_load_function_call */
                #ifdef mixed_semantic_person_get_year_const_load_function_call
                    mixed_semantic_person_get_year_const_load_function_call
                #else /* mixed_semantic_person_get_year_const_load_function_call */
                    load_function<mixed_semantic_person_get_year_const_function_type>(mixed_semantic_person_get_year_const, "mixed_semantic_person_get_year_const");
                #endif /* mixed_semantic_person_get_year_const_load_function_call */
                #ifdef mixed_semantic_person_set_year_load_function_call
                    mixed_semantic_person_set_year_load_function_call
                #else /* mixed_semantic_person_set_year_load_function_call */
                    load_function<mixed_semantic_person_set_year_function_type>(mixed_semantic_person_set_year, "mixed_semantic_person_set_year");
                #endif /* mixed_semantic_person_set_year_load_function_call */
                #ifdef mixed_semantic_person_delete_load_function_call
                    mixed_semantic_person_delete_load_function_call
                #else /* mixed_semantic_person_delete_load_function_call */
                    load_function<mixed_semantic_person_delete_function_type>(mixed_semantic_person_delete, "mixed_semantic_person_delete");
                #endif /* mixed_semantic_person_delete_load_function_call */
                #ifdef mixed_semantic_printer_default_load_function_call
                    mixed_semantic_printer_default_load_function_call
                #else /* mixed_semantic_printer_default_load_function_call */
                    load_function<mixed_semantic_printer_default_function_type>(mixed_semantic_printer_default, "mixed_semantic_printer_default");
                #endif /* mixed_semantic_printer_default_load_function_call */
                #ifdef mixed_semantic_printer_show_load_function_call
                    mixed_semantic_printer_show_load_function_call
                #else /* mixed_semantic_printer_show_load_function_call */
                    load_function<mixed_semantic_printer_show_function_type>(mixed_semantic_printer_show, "mixed_semantic_printer_show");
                #endif /* mixed_semantic_printer_show_load_function_call */
                #ifdef mixed_semantic_printer_show_by_pointer_load_function_call
                    mixed_semantic_printer_show_by_pointer_load_function_call
                #else /* mixed_semantic_printer_show_by_pointer_load_function_call */
                    load_function<mixed_semantic_printer_show_by_pointer_function_type>(mixed_semantic_printer_show_by_pointer, "mixed_semantic_printer_show_by_pointer");
                #endif /* mixed_semantic_printer_show_by_pointer_load_function_call */
                #ifdef mixed_semantic_printer_show_by_reference_load_function_call
                    mixed_semantic_printer_show_by_reference_load_function_call
                #else /* mixed_semantic_printer_show_by_reference_load_function_call */
                    load_function<mixed_semantic_printer_show_by_reference_function_type>(mixed_semantic_printer_show_by_reference, "mixed_semantic_printer_show_by_reference");
                #endif /* mixed_semantic_printer_show_by_reference_load_function_call */
                #ifdef mixed_semantic_printer_show_1_load_function_call
                    mixed_semantic_printer_show_1_load_function_call
                #else /* mixed_semantic_printer_show_1_load_function_call */
                    load_function<mixed_semantic_printer_show_1_function_type>(mixed_semantic_printer_show_1, "mixed_semantic_printer_show_1");
                #endif /* mixed_semantic_printer_show_1_load_function_call */
                #ifdef mixed_semantic_printer_show_by_pointer_1_load_function_call
                    mixed_semantic_printer_show_by_pointer_1_load_function_call
                #else /* mixed_semantic_printer_show_by_pointer_1_load_function_call */
                    load_function<mixed_semantic_printer_show_by_pointer_1_function_type>(mixed_semantic_printer_show_by_pointer_1, "mixed_semantic_printer_show_by_pointer_1");
                #endif /* mixed_semantic_printer_show_by_pointer_1_load_function_call */
                #ifdef mixed_semantic_printer_show_by_reference_1_load_function_call
                    mixed_semantic_printer_show_by_reference_1_load_function_call
                #else /* mixed_semantic_printer_show_by_reference_1_load_function_call */
                    load_function<mixed_semantic_printer_show_by_reference_1_function_type>(mixed_semantic_printer_show_by_reference_1, "mixed_semantic_printer_show_by_reference_1");
                #endif /* mixed_semantic_printer_show_by_reference_1_load_function_call */
                #ifdef mixed_semantic_printer_show_2_load_function_call
                    mixed_semantic_printer_show_2_load_function_call
                #else /* mixed_semantic_printer_show_2_load_function_call */
                    load_function<mixed_semantic_printer_show_2_function_type>(mixed_semantic_printer_show_2, "mixed_semantic_printer_show_2");
                #endif /* mixed_semantic_printer_show_2_load_function_call */
                #ifdef mixed_semantic_printer_show_by_pointer_2_load_function_call
                    mixed_semantic_printer_show_by_pointer_2_load_function_call
                #else /* mixed_semantic_printer_show_by_pointer_2_load_function_call */
                    load_function<mixed_semantic_printer_show_by_pointer_2_function_type>(mixed_semantic_printer_show_by_pointer_2, "mixed_semantic_printer_show_by_pointer_2");
                #endif /* mixed_semantic_printer_show_by_pointer_2_load_function_call */
                #ifdef mixed_semantic_printer_show_by_reference_2_load_function_call
                    mixed_semantic_printer_show_by_reference_2_load_function_call
                #else /* mixed_semantic_printer_show_by_reference_2_load_function_call */
                    load_function<mixed_semantic_printer_show_by_reference_2_function_type>(mixed_semantic_printer_show_by_reference_2, "mixed_semantic_printer_show_by_reference_2");
                #endif /* mixed_semantic_printer_show_by_reference_2_load_function_call */
                #ifdef mixed_semantic_printer_copy_load_function_call
                    mixed_semantic_printer_copy_load_function_call
                #else /* mixed_semantic_printer_copy_load_function_call */
                    load_function<mixed_semantic_printer_copy_function_type>(mixed_semantic_printer_copy, "mixed_semantic_printer_copy");
                #endif /* mixed_semantic_printer_copy_load_function_call */
                #ifdef mixed_semantic_printer_delete_load_function_call
                    mixed_semantic_printer_delete_load_function_call
                #else /* mixed_semantic_printer_delete_load_function_call */
                    load_function<mixed_semantic_printer_delete_function_type>(mixed_semantic_printer_delete, "mixed_semantic_printer_delete");
                #endif /* mixed_semantic_printer_delete_load_function_call */
                #ifdef mixed_semantic_mutator_default_load_function_call
                    mixed_semantic_mutator_default_load_function_call
                #else /* mixed_semantic_mutator_default_load_function_call */
                    load_function<mixed_semantic_mutator_default_function_type>(mixed_semantic_mutator_default, "mixed_semantic_mutator_default");
                #endif /* mixed_semantic_mutator_default_load_function_call */
                #ifdef mixed_semantic_mutator_mutate_load_function_call
                    mixed_semantic_mutator_mutate_load_function_call
                #else /* mixed_semantic_mutator_mutate_load_function_call */
                    load_function<mixed_semantic_mutator_mutate_function_type>(mixed_semantic_mutator_mutate, "mixed_semantic_mutator_mutate");
                #endif /* mixed_semantic_mutator_mutate_load_function_call */
                #ifdef mixed_semantic_mutator_mutate_by_pointer_load_function_call
                    mixed_semantic_mutator_mutate_by_pointer_load_function_call
                #else /* mixed_semantic_mutator_mutate_by_pointer_load_function_call */
                    load_function<mixed_semantic_mutator_mutate_by_pointer_function_type>(mixed_semantic_mutator_mutate_by_pointer, "mixed_semantic_mutator_mutate_by_pointer");
                #endif /* mixed_semantic_mutator_mutate_by_pointer_load_function_call */
                #ifdef mixed_semantic_mutator_mutate_by_reference_load_function_call
                    mixed_semantic_mutator_mutate_by_reference_load_function_call
                #else /* mixed_semantic_mutator_mutate_by_reference_load_function_call */
                    load_function<mixed_semantic_mutator_mutate_by_reference_function_type>(mixed_semantic_mutator_mutate_by_reference, "mixed_semantic_mutator_mutate_by_reference");
                #endif /* mixed_semantic_mutator_mutate_by_reference_load_function_call */
                #ifdef mixed_semantic_mutator_mutate_1_load_function_call
                    mixed_semantic_mutator_mutate_1_load_function_call
                #else /* mixed_semantic_mutator_mutate_1_load_function_call */
                    load_function<mixed_semantic_mutator_mutate_1_function_type>(mixed_semantic_mutator_mutate_1, "mixed_semantic_mutator_mutate_1");
                #endif /* mixed_semantic_mutator_mutate_1_load_function_call */
                #ifdef mixed_semantic_mutator_mutate_by_pointer_1_load_function_call
                    mixed_semantic_mutator_mutate_by_pointer_1_load_function_call
                #else /* mixed_semantic_mutator_mutate_by_pointer_1_load_function_call */
                    load_function<mixed_semantic_mutator_mutate_by_pointer_1_function_type>(mixed_semantic_mutator_mutate_by_pointer_1, "mixed_semantic_mutator_mutate_by_pointer_1");
                #endif /* mixed_semantic_mutator_mutate_by_pointer_1_load_function_call */
                #ifdef mixed_semantic_mutator_mutate_by_reference_1_load_function_call
                    mixed_semantic_mutator_mutate_by_reference_1_load_function_call
                #else /* mixed_semantic_mutator_mutate_by_reference_1_load_function_call */
                    load_function<mixed_semantic_mutator_mutate_by_reference_1_function_type>(mixed_semantic_mutator_mutate_by_reference_1, "mixed_semantic_mutator_mutate_by_reference_1");
                #endif /* mixed_semantic_mutator_mutate_by_reference_1_load_function_call */
                #ifdef mixed_semantic_mutator_mutate_2_load_function_call
                    mixed_semantic_mutator_mutate_2_load_function_call
                #else /* mixed_semantic_mutator_mutate_2_load_function_call */
                    load_function<mixed_semantic_mutator_mutate_2_function_type>(mixed_semantic_mutator_mutate_2, "mixed_semantic_mutator_mutate_2");
                #endif /* mixed_semantic_mutator_mutate_2_load_function_call */
                #ifdef mixed_semantic_mutator_mutate_by_pointer_2_load_function_call
                    mixed_semantic_mutator_mutate_by_pointer_2_load_function_call
                #else /* mixed_semantic_mutator_mutate_by_pointer_2_load_function_call */
                    load_function<mixed_semantic_mutator_mutate_by_pointer_2_function_type>(mixed_semantic_mutator_mutate_by_pointer_2, "mixed_semantic_mutator_mutate_by_pointer_2");
                #endif /* mixed_semantic_mutator_mutate_by_pointer_2_load_function_call */
                #ifdef mixed_semantic_mutator_mutate_by_reference_2_load_function_call
                    mixed_semantic_mutator_mutate_by_reference_2_load_function_call
                #else /* mixed_semantic_mutator_mutate_by_reference_2_load_function_call */
                    load_function<mixed_semantic_mutator_mutate_by_reference_2_function_type>(mixed_semantic_mutator_mutate_by_reference_2, "mixed_semantic_mutator_mutate_by_reference_2");
                #endif /* mixed_semantic_mutator_mutate_by_reference_2_load_function_call */
                #ifdef mixed_semantic_mutator_copy_load_function_call
                    mixed_semantic_mutator_copy_load_function_call
                #else /* mixed_semantic_mutator_copy_load_function_call */
                    load_function<mixed_semantic_mutator_copy_function_type>(mixed_semantic_mutator_copy, "mixed_semantic_mutator_copy");
                #endif /* mixed_semantic_mutator_copy_load_function_call */
                #ifdef mixed_semantic_mutator_delete_load_function_call
                    mixed_semantic_mutator_delete_load_function_call
                #else /* mixed_semantic_mutator_delete_load_function_call */
                    load_function<mixed_semantic_mutator_delete_function_type>(mixed_semantic_mutator_delete, "mixed_semantic_mutator_delete");
                #endif /* mixed_semantic_mutator_delete_load_function_call */
                const int major_version = mixed_semantic_get_major_version();
                const int minor_version = mixed_semantic_get_minor_version();
                const int patch_version = mixed_semantic_get_patch_version();
                if (major_version != MIXEDSEMANTIC_MAJOR_VERSION || minor_version != MIXEDSEMANTIC_MINOR_VERSION || patch_version != MIXEDSEMANTIC_PATCH_VERSION)
                {
                    std::stringstream error_message;
                    error_message << "Incorrect version of " << shared_library_name << " library. ";
                    error_message << "Expected version is " << MIXEDSEMANTIC_MAJOR_VERSION << "." << MIXEDSEMANTIC_MINOR_VERSION << "." << MIXEDSEMANTIC_PATCH_VERSION << ". ";
                    error_message << "Found version is " << major_version << "." << minor_version << "." << patch_version << ".";
                    throw std::runtime_error(error_message.str());
                }
            }

            Initialization();
            Initialization(const Initialization&);
            #ifdef MIXEDSEMANTIC_CPP_COMPILER_HAS_MOVE_CONSTRUCTOR_DELETE
                Initialization(Initialization &&) = delete;
            #endif /* MIXEDSEMANTIC_CPP_COMPILER_HAS_MOVE_CONSTRUCTOR_DELETE */
        public:
            Initialization(const char* shared_library_name)
            {
                load_module(shared_library_name);
            }
            ~Initialization()
            {
                #ifdef _WIN32
                    FreeLibrary(handle);
                #else /* _WIN32 */
                    dlclose(handle);
                #endif /* _WIN32 */
                #ifdef mixed_semantic_get_major_version_zero_function_pointer
                    mixed_semantic_get_major_version_zero_function_pointer
                #else /* mixed_semantic_get_major_version_zero_function_pointer */
                    mixed_semantic_get_major_version = 0;
                #endif /* mixed_semantic_get_major_version_zero_function_pointer */
                #ifdef mixed_semantic_get_minor_version_zero_function_pointer
                    mixed_semantic_get_minor_version_zero_function_pointer
                #else /* mixed_semantic_get_minor_version_zero_function_pointer */
                    mixed_semantic_get_minor_version = 0;
                #endif /* mixed_semantic_get_minor_version_zero_function_pointer */
                #ifdef mixed_semantic_get_patch_version_zero_function_pointer
                    mixed_semantic_get_patch_version_zero_function_pointer
                #else /* mixed_semantic_get_patch_version_zero_function_pointer */
                    mixed_semantic_get_patch_version = 0;
                #endif /* mixed_semantic_get_patch_version_zero_function_pointer */
                #ifdef mixed_semantic_name_full_name_zero_function_pointer
                    mixed_semantic_name_full_name_zero_function_pointer
                #else /* mixed_semantic_name_full_name_zero_function_pointer */
                    mixed_semantic_name_full_name = 0;
                #endif /* mixed_semantic_name_full_name_zero_function_pointer */
                #ifdef mixed_semantic_name_get_first_name_const_zero_function_pointer
                    mixed_semantic_name_get_first_name_const_zero_function_pointer
                #else /* mixed_semantic_name_get_first_name_const_zero_function_pointer */
                    mixed_semantic_name_get_first_name_const = 0;
                #endif /* mixed_semantic_name_get_first_name_const_zero_function_pointer */
                #ifdef mixed_semantic_name_set_first_name_zero_function_pointer
                    mixed_semantic_name_set_first_name_zero_function_pointer
                #else /* mixed_semantic_name_set_first_name_zero_function_pointer */
                    mixed_semantic_name_set_first_name = 0;
                #endif /* mixed_semantic_name_set_first_name_zero_function_pointer */
                #ifdef mixed_semantic_name_get_last_name_const_zero_function_pointer
                    mixed_semantic_name_get_last_name_const_zero_function_pointer
                #else /* mixed_semantic_name_get_last_name_const_zero_function_pointer */
                    mixed_semantic_name_get_last_name_const = 0;
                #endif /* mixed_semantic_name_get_last_name_const_zero_function_pointer */
                #ifdef mixed_semantic_name_set_last_name_zero_function_pointer
                    mixed_semantic_name_set_last_name_zero_function_pointer
                #else /* mixed_semantic_name_set_last_name_zero_function_pointer */
                    mixed_semantic_name_set_last_name = 0;
                #endif /* mixed_semantic_name_set_last_name_zero_function_pointer */
                #ifdef mixed_semantic_name_copy_zero_function_pointer
                    mixed_semantic_name_copy_zero_function_pointer
                #else /* mixed_semantic_name_copy_zero_function_pointer */
                    mixed_semantic_name_copy = 0;
                #endif /* mixed_semantic_name_copy_zero_function_pointer */
                #ifdef mixed_semantic_name_delete_zero_function_pointer
                    mixed_semantic_name_delete_zero_function_pointer
                #else /* mixed_semantic_name_delete_zero_function_pointer */
                    mixed_semantic_name_delete = 0;
                #endif /* mixed_semantic_name_delete_zero_function_pointer */
                #ifdef mixed_semantic_address_default_zero_function_pointer
                    mixed_semantic_address_default_zero_function_pointer
                #else /* mixed_semantic_address_default_zero_function_pointer */
                    mixed_semantic_address_default = 0;
                #endif /* mixed_semantic_address_default_zero_function_pointer */
                #ifdef mixed_semantic_address_get_street_name_const_zero_function_pointer
                    mixed_semantic_address_get_street_name_const_zero_function_pointer
                #else /* mixed_semantic_address_get_street_name_const_zero_function_pointer */
                    mixed_semantic_address_get_street_name_const = 0;
                #endif /* mixed_semantic_address_get_street_name_const_zero_function_pointer */
                #ifdef mixed_semantic_address_set_street_name_zero_function_pointer
                    mixed_semantic_address_set_street_name_zero_function_pointer
                #else /* mixed_semantic_address_set_street_name_zero_function_pointer */
                    mixed_semantic_address_set_street_name = 0;
                #endif /* mixed_semantic_address_set_street_name_zero_function_pointer */
                #ifdef mixed_semantic_address_get_city_const_zero_function_pointer
                    mixed_semantic_address_get_city_const_zero_function_pointer
                #else /* mixed_semantic_address_get_city_const_zero_function_pointer */
                    mixed_semantic_address_get_city_const = 0;
                #endif /* mixed_semantic_address_get_city_const_zero_function_pointer */
                #ifdef mixed_semantic_address_set_city_zero_function_pointer
                    mixed_semantic_address_set_city_zero_function_pointer
                #else /* mixed_semantic_address_set_city_zero_function_pointer */
                    mixed_semantic_address_set_city = 0;
                #endif /* mixed_semantic_address_set_city_zero_function_pointer */
                #ifdef mixed_semantic_address_get_state_const_zero_function_pointer
                    mixed_semantic_address_get_state_const_zero_function_pointer
                #else /* mixed_semantic_address_get_state_const_zero_function_pointer */
                    mixed_semantic_address_get_state_const = 0;
                #endif /* mixed_semantic_address_get_state_const_zero_function_pointer */
                #ifdef mixed_semantic_address_set_state_zero_function_pointer
                    mixed_semantic_address_set_state_zero_function_pointer
                #else /* mixed_semantic_address_set_state_zero_function_pointer */
                    mixed_semantic_address_set_state = 0;
                #endif /* mixed_semantic_address_set_state_zero_function_pointer */
                #ifdef mixed_semantic_address_add_ref_zero_function_pointer
                    mixed_semantic_address_add_ref_zero_function_pointer
                #else /* mixed_semantic_address_add_ref_zero_function_pointer */
                    mixed_semantic_address_add_ref = 0;
                #endif /* mixed_semantic_address_add_ref_zero_function_pointer */
                #ifdef mixed_semantic_address_release_zero_function_pointer
                    mixed_semantic_address_release_zero_function_pointer
                #else /* mixed_semantic_address_release_zero_function_pointer */
                    mixed_semantic_address_release = 0;
                #endif /* mixed_semantic_address_release_zero_function_pointer */
                #ifdef mixed_semantic_person_default_zero_function_pointer
                    mixed_semantic_person_default_zero_function_pointer
                #else /* mixed_semantic_person_default_zero_function_pointer */
                    mixed_semantic_person_default = 0;
                #endif /* mixed_semantic_person_default_zero_function_pointer */
                #ifdef mixed_semantic_person_get_address_const_zero_function_pointer
                    mixed_semantic_person_get_address_const_zero_function_pointer
                #else /* mixed_semantic_person_get_address_const_zero_function_pointer */
                    mixed_semantic_person_get_address_const = 0;
                #endif /* mixed_semantic_person_get_address_const_zero_function_pointer */
                #ifdef mixed_semantic_person_set_address_zero_function_pointer
                    mixed_semantic_person_set_address_zero_function_pointer
                #else /* mixed_semantic_person_set_address_zero_function_pointer */
                    mixed_semantic_person_set_address = 0;
                #endif /* mixed_semantic_person_set_address_zero_function_pointer */
                #ifdef mixed_semantic_person_get_name_const_zero_function_pointer
                    mixed_semantic_person_get_name_const_zero_function_pointer
                #else /* mixed_semantic_person_get_name_const_zero_function_pointer */
                    mixed_semantic_person_get_name_const = 0;
                #endif /* mixed_semantic_person_get_name_const_zero_function_pointer */
                #ifdef mixed_semantic_person_set_name_zero_function_pointer
                    mixed_semantic_person_set_name_zero_function_pointer
                #else /* mixed_semantic_person_set_name_zero_function_pointer */
                    mixed_semantic_person_set_name = 0;
                #endif /* mixed_semantic_person_set_name_zero_function_pointer */
                #ifdef mixed_semantic_person_get_day_const_zero_function_pointer
                    mixed_semantic_person_get_day_const_zero_function_pointer
                #else /* mixed_semantic_person_get_day_const_zero_function_pointer */
                    mixed_semantic_person_get_day_const = 0;
                #endif /* mixed_semantic_person_get_day_const_zero_function_pointer */
                #ifdef mixed_semantic_person_set_day_zero_function_pointer
                    mixed_semantic_person_set_day_zero_function_pointer
                #else /* mixed_semantic_person_set_day_zero_function_pointer */
                    mixed_semantic_person_set_day = 0;
                #endif /* mixed_semantic_person_set_day_zero_function_pointer */
                #ifdef mixed_semantic_person_get_month_const_zero_function_pointer
                    mixed_semantic_person_get_month_const_zero_function_pointer
                #else /* mixed_semantic_person_get_month_const_zero_function_pointer */
                    mixed_semantic_person_get_month_const = 0;
                #endif /* mixed_semantic_person_get_month_const_zero_function_pointer */
                #ifdef mixed_semantic_person_set_month_zero_function_pointer
                    mixed_semantic_person_set_month_zero_function_pointer
                #else /* mixed_semantic_person_set_month_zero_function_pointer */
                    mixed_semantic_person_set_month = 0;
                #endif /* mixed_semantic_person_set_month_zero_function_pointer */
                #ifdef mixed_semantic_person_get_year_const_zero_function_pointer
                    mixed_semantic_person_get_year_const_zero_function_pointer
                #else /* mixed_semantic_person_get_year_const_zero_function_pointer */
                    mixed_semantic_person_get_year_const = 0;
                #endif /* mixed_semantic_person_get_year_const_zero_function_pointer */
                #ifdef mixed_semantic_person_set_year_zero_function_pointer
                    mixed_semantic_person_set_year_zero_function_pointer
                #else /* mixed_semantic_person_set_year_zero_function_pointer */
                    mixed_semantic_person_set_year = 0;
                #endif /* mixed_semantic_person_set_year_zero_function_pointer */
                #ifdef mixed_semantic_person_delete_zero_function_pointer
                    mixed_semantic_person_delete_zero_function_pointer
                #else /* mixed_semantic_person_delete_zero_function_pointer */
                    mixed_semantic_person_delete = 0;
                #endif /* mixed_semantic_person_delete_zero_function_pointer */
                #ifdef mixed_semantic_printer_default_zero_function_pointer
                    mixed_semantic_printer_default_zero_function_pointer
                #else /* mixed_semantic_printer_default_zero_function_pointer */
                    mixed_semantic_printer_default = 0;
                #endif /* mixed_semantic_printer_default_zero_function_pointer */
                #ifdef mixed_semantic_printer_show_zero_function_pointer
                    mixed_semantic_printer_show_zero_function_pointer
                #else /* mixed_semantic_printer_show_zero_function_pointer */
                    mixed_semantic_printer_show = 0;
                #endif /* mixed_semantic_printer_show_zero_function_pointer */
                #ifdef mixed_semantic_printer_show_by_pointer_zero_function_pointer
                    mixed_semantic_printer_show_by_pointer_zero_function_pointer
                #else /* mixed_semantic_printer_show_by_pointer_zero_function_pointer */
                    mixed_semantic_printer_show_by_pointer = 0;
                #endif /* mixed_semantic_printer_show_by_pointer_zero_function_pointer */
                #ifdef mixed_semantic_printer_show_by_reference_zero_function_pointer
                    mixed_semantic_printer_show_by_reference_zero_function_pointer
                #else /* mixed_semantic_printer_show_by_reference_zero_function_pointer */
                    mixed_semantic_printer_show_by_reference = 0;
                #endif /* mixed_semantic_printer_show_by_reference_zero_function_pointer */
                #ifdef mixed_semantic_printer_show_1_zero_function_pointer
                    mixed_semantic_printer_show_1_zero_function_pointer
                #else /* mixed_semantic_printer_show_1_zero_function_pointer */
                    mixed_semantic_printer_show_1 = 0;
                #endif /* mixed_semantic_printer_show_1_zero_function_pointer */
                #ifdef mixed_semantic_printer_show_by_pointer_1_zero_function_pointer
                    mixed_semantic_printer_show_by_pointer_1_zero_function_pointer
                #else /* mixed_semantic_printer_show_by_pointer_1_zero_function_pointer */
                    mixed_semantic_printer_show_by_pointer_1 = 0;
                #endif /* mixed_semantic_printer_show_by_pointer_1_zero_function_pointer */
                #ifdef mixed_semantic_printer_show_by_reference_1_zero_function_pointer
                    mixed_semantic_printer_show_by_reference_1_zero_function_pointer
                #else /* mixed_semantic_printer_show_by_reference_1_zero_function_pointer */
                    mixed_semantic_printer_show_by_reference_1 = 0;
                #endif /* mixed_semantic_printer_show_by_reference_1_zero_function_pointer */
                #ifdef mixed_semantic_printer_show_2_zero_function_pointer
                    mixed_semantic_printer_show_2_zero_function_pointer
                #else /* mixed_semantic_printer_show_2_zero_function_pointer */
                    mixed_semantic_printer_show_2 = 0;
                #endif /* mixed_semantic_printer_show_2_zero_function_pointer */
                #ifdef mixed_semantic_printer_show_by_pointer_2_zero_function_pointer
                    mixed_semantic_printer_show_by_pointer_2_zero_function_pointer
                #else /* mixed_semantic_printer_show_by_pointer_2_zero_function_pointer */
                    mixed_semantic_printer_show_by_pointer_2 = 0;
                #endif /* mixed_semantic_printer_show_by_pointer_2_zero_function_pointer */
                #ifdef mixed_semantic_printer_show_by_reference_2_zero_function_pointer
                    mixed_semantic_printer_show_by_reference_2_zero_function_pointer
                #else /* mixed_semantic_printer_show_by_reference_2_zero_function_pointer */
                    mixed_semantic_printer_show_by_reference_2 = 0;
                #endif /* mixed_semantic_printer_show_by_reference_2_zero_function_pointer */
                #ifdef mixed_semantic_printer_copy_zero_function_pointer
                    mixed_semantic_printer_copy_zero_function_pointer
                #else /* mixed_semantic_printer_copy_zero_function_pointer */
                    mixed_semantic_printer_copy = 0;
                #endif /* mixed_semantic_printer_copy_zero_function_pointer */
                #ifdef mixed_semantic_printer_delete_zero_function_pointer
                    mixed_semantic_printer_delete_zero_function_pointer
                #else /* mixed_semantic_printer_delete_zero_function_pointer */
                    mixed_semantic_printer_delete = 0;
                #endif /* mixed_semantic_printer_delete_zero_function_pointer */
                #ifdef mixed_semantic_mutator_default_zero_function_pointer
                    mixed_semantic_mutator_default_zero_function_pointer
                #else /* mixed_semantic_mutator_default_zero_function_pointer */
                    mixed_semantic_mutator_default = 0;
                #endif /* mixed_semantic_mutator_default_zero_function_pointer */
                #ifdef mixed_semantic_mutator_mutate_zero_function_pointer
                    mixed_semantic_mutator_mutate_zero_function_pointer
                #else /* mixed_semantic_mutator_mutate_zero_function_pointer */
                    mixed_semantic_mutator_mutate = 0;
                #endif /* mixed_semantic_mutator_mutate_zero_function_pointer */
                #ifdef mixed_semantic_mutator_mutate_by_pointer_zero_function_pointer
                    mixed_semantic_mutator_mutate_by_pointer_zero_function_pointer
                #else /* mixed_semantic_mutator_mutate_by_pointer_zero_function_pointer */
                    mixed_semantic_mutator_mutate_by_pointer = 0;
                #endif /* mixed_semantic_mutator_mutate_by_pointer_zero_function_pointer */
                #ifdef mixed_semantic_mutator_mutate_by_reference_zero_function_pointer
                    mixed_semantic_mutator_mutate_by_reference_zero_function_pointer
                #else /* mixed_semantic_mutator_mutate_by_reference_zero_function_pointer */
                    mixed_semantic_mutator_mutate_by_reference = 0;
                #endif /* mixed_semantic_mutator_mutate_by_reference_zero_function_pointer */
                #ifdef mixed_semantic_mutator_mutate_1_zero_function_pointer
                    mixed_semantic_mutator_mutate_1_zero_function_pointer
                #else /* mixed_semantic_mutator_mutate_1_zero_function_pointer */
                    mixed_semantic_mutator_mutate_1 = 0;
                #endif /* mixed_semantic_mutator_mutate_1_zero_function_pointer */
                #ifdef mixed_semantic_mutator_mutate_by_pointer_1_zero_function_pointer
                    mixed_semantic_mutator_mutate_by_pointer_1_zero_function_pointer
                #else /* mixed_semantic_mutator_mutate_by_pointer_1_zero_function_pointer */
                    mixed_semantic_mutator_mutate_by_pointer_1 = 0;
                #endif /* mixed_semantic_mutator_mutate_by_pointer_1_zero_function_pointer */
                #ifdef mixed_semantic_mutator_mutate_by_reference_1_zero_function_pointer
                    mixed_semantic_mutator_mutate_by_reference_1_zero_function_pointer
                #else /* mixed_semantic_mutator_mutate_by_reference_1_zero_function_pointer */
                    mixed_semantic_mutator_mutate_by_reference_1 = 0;
                #endif /* mixed_semantic_mutator_mutate_by_reference_1_zero_function_pointer */
                #ifdef mixed_semantic_mutator_mutate_2_zero_function_pointer
                    mixed_semantic_mutator_mutate_2_zero_function_pointer
                #else /* mixed_semantic_mutator_mutate_2_zero_function_pointer */
                    mixed_semantic_mutator_mutate_2 = 0;
                #endif /* mixed_semantic_mutator_mutate_2_zero_function_pointer */
                #ifdef mixed_semantic_mutator_mutate_by_pointer_2_zero_function_pointer
                    mixed_semantic_mutator_mutate_by_pointer_2_zero_function_pointer
                #else /* mixed_semantic_mutator_mutate_by_pointer_2_zero_function_pointer */
                    mixed_semantic_mutator_mutate_by_pointer_2 = 0;
                #endif /* mixed_semantic_mutator_mutate_by_pointer_2_zero_function_pointer */
                #ifdef mixed_semantic_mutator_mutate_by_reference_2_zero_function_pointer
                    mixed_semantic_mutator_mutate_by_reference_2_zero_function_pointer
                #else /* mixed_semantic_mutator_mutate_by_reference_2_zero_function_pointer */
                    mixed_semantic_mutator_mutate_by_reference_2 = 0;
                #endif /* mixed_semantic_mutator_mutate_by_reference_2_zero_function_pointer */
                #ifdef mixed_semantic_mutator_copy_zero_function_pointer
                    mixed_semantic_mutator_copy_zero_function_pointer
                #else /* mixed_semantic_mutator_copy_zero_function_pointer */
                    mixed_semantic_mutator_copy = 0;
                #endif /* mixed_semantic_mutator_copy_zero_function_pointer */
                #ifdef mixed_semantic_mutator_delete_zero_function_pointer
                    mixed_semantic_mutator_delete_zero_function_pointer
                #else /* mixed_semantic_mutator_delete_zero_function_pointer */
                    mixed_semantic_mutator_delete = 0;
                #endif /* mixed_semantic_mutator_delete_zero_function_pointer */
            }
        };
    }

    #endif /* __cplusplus */

#endif /* MIXEDSEMANTIC_CAPI_USE_DYNAMIC_LOADER */

#endif /* MIXEDSEMANTIC_CAPI_INCLUDED */

