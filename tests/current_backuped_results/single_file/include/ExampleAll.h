/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#ifndef BEAUTIFUL_CAPI_SINGLE_FILE_FORWARD_HOLDER_INCLUDED
#define BEAUTIFUL_CAPI_SINGLE_FILE_FORWARD_HOLDER_INCLUDED

#ifdef __cplusplus

namespace beautiful_capi_single_file
{
    template<typename WrappedObjType>
    class forward_pointer_holder
    {
        void* m_pointer;
        bool m_object_was_created;
        const bool m_add_ref;
    public:
        forward_pointer_holder(void* pointer, bool add_ref)
         : m_object_was_created(false), m_pointer(pointer), m_add_ref(add_ref)
        {
        }
        ~forward_pointer_holder()
        {
            if (m_object_was_created)
            {
                reinterpret_cast<WrappedObjType*>(this)->~WrappedObjType();
            }
        }
        operator WrappedObjType()
        {
            return WrappedObjType(m_pointer, m_add_ref);
        }
        WrappedObjType* operator->()
        {
            m_object_was_created = true;
            return new(this) WrappedObjType(m_pointer, m_add_ref);
        }
        void* get_raw_pointer() const
        {
            return m_pointer;
        }
    };
}

#endif /* __cplusplus */

#endif /* BEAUTIFUL_CAPI_SINGLE_FILE_FORWARD_HOLDER_INCLUDED */

#ifndef HELLOWORLD_INCLUDED
#define HELLOWORLD_INCLUDED

#include <memory>

#ifndef HELLOWORLD_CAPI_INCLUDED
#define HELLOWORLD_CAPI_INCLUDED

#ifdef __cplusplus
    #define HELLOWORLD_CAPI_PREFIX extern "C"
#else
    #define HELLOWORLD_CAPI_PREFIX
#endif

#ifdef _WIN32
    #ifdef __GNUC__
        #define HELLOWORLD_API HELLOWORLD_CAPI_PREFIX __attribute__ ((dllimport))
        #define HELLOWORLD_API_CONVENTION __attribute__ ((cdecl))
    #else
        #define HELLOWORLD_API HELLOWORLD_CAPI_PREFIX __declspec(dllimport)
        #define HELLOWORLD_API_CONVENTION __cdecl
    #endif
#elif __APPLE__
    #if defined(__GNUC__) && __GNUC__ >= 4
        #define HELLOWORLD_API HELLOWORLD_CAPI_PREFIX __attribute__ ((visibility ("default")))
    #else
        #define HELLOWORLD_API HELLOWORLD_CAPI_PREFIX
    #endif
    #if defined __i386__
        #define HELLOWORLD_API_CONVENTION __attribute__ ((cdecl))
    #else
        #define HELLOWORLD_API_CONVENTION
    #endif
#elif __unix__ || __linux__
    #if defined(__GNUC__) && __GNUC__ >= 4
        #define HELLOWORLD_API HELLOWORLD_CAPI_PREFIX __attribute__ ((visibility ("default")))
    #else
        #define HELLOWORLD_API HELLOWORLD_CAPI_PREFIX
    #endif
    #if defined __i386__
        #define HELLOWORLD_API_CONVENTION __attribute__ ((cdecl))
    #else
        #define HELLOWORLD_API_CONVENTION
    #endif
#else
    #error "Unknown platform"
#endif

HELLOWORLD_API void* HELLOWORLD_API_CONVENTION helloworld_printer_copy(void* object_pointer);
HELLOWORLD_API void* HELLOWORLD_API_CONVENTION helloworld_printer_default();
HELLOWORLD_API void HELLOWORLD_API_CONVENTION helloworld_printer_delete(void* object_pointer);
HELLOWORLD_API void HELLOWORLD_API_CONVENTION helloworld_printer_show(void* object_pointer);

#endif /* HELLOWORLD_CAPI_INCLUDED */

#ifndef HELLOWORLD_FWD_INCLUDED
#define HELLOWORLD_FWD_INCLUDED

#ifdef __cplusplus


namespace HelloWorld
{
    class Printer;
    typedef beautiful_capi_single_file::forward_pointer_holder<Printer> PrinterFwdPtr;
}

#endif /* __cplusplus */

#endif /* HELLOWORLD_FWD_INCLUDED */

#ifdef __cplusplus

namespace HelloWorld { 

template<typename TargetType, typename SourceType>
TargetType down_cast(const SourceType&);

}

#endif /* __cplusplus */

#endif /* HELLOWORLD_INCLUDED */

#ifndef HELLOWORLD_PRINTER_INCLUDED
#define HELLOWORLD_PRINTER_INCLUDED


#ifdef __cplusplus

namespace HelloWorld { 

class Printer
{
protected:
    void* mObject;
    void SetObject(void* object_pointer)
    {
        mObject = object_pointer;
    }
public:
    Printer(const Printer& other)
    {
        if (other.mObject)
        {
            SetObject(helloworld_printer_copy(other.mObject));
        }
        else
        {
            SetObject(0);
        }
    }
    Printer(void *object_pointer, bool copy_object)
    {
        if (object_pointer && copy_object)
        {
            SetObject(helloworld_printer_copy(object_pointer));
        }
        else
        {
            SetObject(object_pointer);
        }
    }
    bool IsNull() const
    {
        return !mObject;
    }
    bool IsNotNull() const
    {
        return mObject != 0;
    }
    bool operator!() const
    {
        return !mObject;
    }
    Printer* operator->()
    {
        return this;
    }
    const Printer* operator->() const
    {
        return this;
    }
    void* Detach()
    {
        void* result = mObject;
        SetObject(0);
        return result;
    }
    Printer operator=(const Printer& other)
    {
        if (mObject != other.mObject)
        {
            if (mObject)
            {
                helloworld_printer_delete(mObject);
                SetObject(0);
            }
            if (other.mObject)
            {
                SetObject(helloworld_printer_copy(other.mObject));
            }
            else
            {
                SetObject(0);
            }
        }
        return *this;
    }
    Printer()
    {
        SetObject(helloworld_printer_default());
    }
    ~Printer()
    {
        if (mObject)
        {
            helloworld_printer_delete(mObject);
            SetObject(0);
        }
    }
    void Show() const
    {
        helloworld_printer_show(mObject);
    }
};

}

#endif /* __cplusplus */

#endif /* HELLOWORLD_PRINTER_INCLUDED */

