/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#ifndef BEAUTIFUL_CAPI_EXCEPTION_CHECK_AND_THROW_EXCEPTION_INCLUDED
#define BEAUTIFUL_CAPI_EXCEPTION_CHECK_AND_THROW_EXCEPTION_INCLUDED

#ifdef __cplusplus

#include <stdexcept>
#include <cassert>
#include "Exception/NullArgument.h"
#include "Exception/BadArgument.h"
#include "Exception/DivisionByZero.h"
#include "Exception/Generic.h"

namespace beautiful_capi_Exception
{
    inline void check_and_throw_exception(int exception_code, void* exception_object)
    {
        switch (exception_code)
        {
            case 0:
                return;
            case 1:
                throw Exception::Generic(Exception::Generic::force_creating_from_raw_pointer, exception_object, false);
            case 2:
                throw Exception::BadArgument(Exception::BadArgument::force_creating_from_raw_pointer, exception_object, false);
            case 3:
                throw Exception::NullArgument(Exception::NullArgument::force_creating_from_raw_pointer, exception_object, false);
            case 4:
                throw Exception::DivisionByZero(Exception::DivisionByZero::force_creating_from_raw_pointer, exception_object, false);
            default:
                assert(false);
            case -1:
                throw std::runtime_error("unknown exception");
        }
    }
}

#endif /* __cplusplus */

#endif /* BEAUTIFUL_CAPI_EXCEPTION_CHECK_AND_THROW_EXCEPTION_INCLUDED */

