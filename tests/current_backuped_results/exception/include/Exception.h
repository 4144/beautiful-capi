/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#ifndef EXCEPTION_INCLUDED
#define EXCEPTION_INCLUDED

#include "ExceptionCapi.h"
#include "ExceptionFwd.h"
#include "Exception/Generic.h"
#include "Exception/BadArgument.h"
#include "Exception/NullArgument.h"
#include "Exception/DivisionByZero.h"
#include "Exception/common/check_and_throw_exception.h"
#include "Example.h"
#include "Exception.h"

#ifdef __cplusplus

namespace Exception { 

template<typename TargetType, typename SourceType>
TargetType down_cast(const SourceType&);

template<>
inline Exception::BadArgument down_cast(const Exception::Generic& input_object)
{
    struct raw_pointer_holder { void* raw_pointer; };
    return Exception::BadArgument(exception_generic_cast_to_exception_badargument(reinterpret_cast<const raw_pointer_holder*>(&input_object)->raw_pointer), true);
}

template<>
inline Exception::NullArgument down_cast(const Exception::BadArgument& input_object)
{
    struct raw_pointer_holder { void* raw_pointer; };
    return Exception::NullArgument(exception_badargument_cast_to_exception_nullargument(reinterpret_cast<const raw_pointer_holder*>(&input_object)->raw_pointer), true);
}

template<>
inline Exception::NullArgument down_cast(const Exception::Generic& input_object)
{
    struct raw_pointer_holder { void* raw_pointer; };
    return Exception::NullArgument(exception_generic_cast_to_exception_nullargument(reinterpret_cast<const raw_pointer_holder*>(&input_object)->raw_pointer), true);
}

template<>
inline Exception::DivisionByZero down_cast(const Exception::Generic& input_object)
{
    struct raw_pointer_holder { void* raw_pointer; };
    return Exception::DivisionByZero(exception_generic_cast_to_exception_divisionbyzero(reinterpret_cast<const raw_pointer_holder*>(&input_object)->raw_pointer), true);
}

}

#endif /* __cplusplus */

#endif /* EXCEPTION_INCLUDED */

#ifndef EXCEPTION_H_INCLUDED
#define EXCEPTION_H_INCLUDED


#endif /* EXCEPTION_H_INCLUDED */

