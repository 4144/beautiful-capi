/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#ifndef EXAMPLE_SCANNER_DEFINITION_INCLUDED
#define EXAMPLE_SCANNER_DEFINITION_INCLUDED

#include "Example/ScannerDecl.h"
#include "Exception/common/check_and_throw_exception.h"

#ifdef __cplusplus

inline Example::ScannerPtr::ScannerPtr()
{
    beautiful_capi_exception_exception_info_t exception_info;
    void* result(example_scanner_new(&exception_info));
    beautiful_capi_Exception::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
    SetObject(result);
}

inline const char* Example::ScannerPtr::ScanText()
{
    beautiful_capi_exception_exception_info_t exception_info;
    const char* result(example_scanner_scan_text(&exception_info, this->GetRawPointer()));
    beautiful_capi_Exception::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
    return result;
}

inline void Example::ScannerPtr::PowerOn()
{
    beautiful_capi_exception_exception_info_t exception_info;
    example_scanner_power_on(&exception_info, this->GetRawPointer());
    beautiful_capi_Exception::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
}

inline void Example::ScannerPtr::PowerOff()
{
    example_scanner_power_off(this->GetRawPointer());
}

inline Example::ScannerPtr::ScannerPtr(const ScannerPtr& other)
{
    SetObject(other.mObject);
    if (other.mObject)
    {
        example_scanner_add_ref(other.mObject);
    }
}

#ifdef EXAMPLE_CPP_COMPILER_HAS_RVALUE_REFERENCES
inline Example::ScannerPtr::ScannerPtr(ScannerPtr&& other)
{
    mObject = other.mObject;
    other.mObject = 0;
}
#endif /* EXAMPLE_CPP_COMPILER_HAS_RVALUE_REFERENCES */

inline Example::ScannerPtr::ScannerPtr(Example::ScannerPtr::ECreateFromRawPointer, void *object_pointer, bool add_ref_object)
{
    SetObject(object_pointer);
    if (add_ref_object && object_pointer)
    {
        example_scanner_add_ref(object_pointer);
    }
}

inline Example::ScannerPtr::~ScannerPtr()
{
    if (mObject && Example::ScannerPtr::mObject)
    {
        example_scanner_release(mObject);
        SetObject(0);
    }
}

inline Example::ScannerPtr& Example::ScannerPtr::operator=(const Example::ScannerPtr& other)
{
    if (mObject != other.mObject)
    {
        if (mObject && Example::ScannerPtr::mObject)
        {
            example_scanner_release(mObject);
            SetObject(0);
        }
        SetObject(other.mObject);
        if (other.mObject)
        {
            example_scanner_add_ref(other.mObject);
        }
    }
    return *this;
}

#ifdef EXAMPLE_CPP_COMPILER_HAS_RVALUE_REFERENCES
inline Example::ScannerPtr& Example::ScannerPtr::operator=(Example::ScannerPtr&& other)
{
    if (mObject != other.mObject)
    {
        if (mObject && Example::ScannerPtr::mObject)
        {
            example_scanner_release(mObject);
            SetObject(0);
        }
        mObject = other.mObject;
        other.mObject = 0;
    }
    return *this;
}
#endif /* EXAMPLE_CPP_COMPILER_HAS_RVALUE_REFERENCES */

inline Example::ScannerPtr Example::ScannerPtr::Null()
{
    return Example::ScannerPtr(Example::ScannerPtr::force_creating_from_raw_pointer, 0, false);
}

inline bool Example::ScannerPtr::IsNull() const
{
    return !mObject;
}

inline bool Example::ScannerPtr::IsNotNull() const
{
    return mObject != 0;
}

inline bool Example::ScannerPtr::operator!() const
{
    return !mObject;
}

inline void* Example::ScannerPtr::Detach()
{
    void* result = mObject;
    SetObject(0);
    return result;
}

inline void* Example::ScannerPtr::GetRawPointer() const
{
    return mObject;
}

inline Example::ScannerPtr* Example::ScannerPtr::operator->()
{
    return this;
}

inline const Example::ScannerPtr* Example::ScannerPtr::operator->() const
{
    return this;
}

inline void Example::ScannerPtr::SetObject(void* object_pointer)
{
    mObject = object_pointer;
}

#endif /* __cplusplus */

#endif /* EXAMPLE_SCANNER_DEFINITION_INCLUDED */

