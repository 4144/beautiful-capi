/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#include <stdexcept>
#include <cassert>
#include "PrinterImpl.h"
#include "ScannerImpl.h"
#include "Exception/GenericImpl.h"
#include "Exception/BadArgumentImpl.h"
#include "Exception/NullArgumentImpl.h"
#include "Exception/DivisionByZeroImpl.h"

#ifndef BEAUTIFUL_CAPI_EXCEPTION_EXCEPTION_INFO_DEFINED
#define BEAUTIFUL_CAPI_EXCEPTION_EXCEPTION_INFO_DEFINED

struct beautiful_capi_exception_exception_info_t
{
    int code; /* value from beautiful_capi_exception_exception_code_t enumeration */
    void* object_pointer;
};

enum beautiful_capi_exception_exception_code_t
{
    no_exception = 0,
    exception_generic = 1,
    exception_bad_argument = 2,
    exception_null_argument = 3,
    exception_division_by_zero = 4,
    unknown_exception = -1
};

#endif /* BEAUTIFUL_CAPI_EXCEPTION_EXCEPTION_INFO_DEFINED */

#ifdef _WIN32
    #ifdef __GNUC__
        #define EXAMPLE_API extern "C" __attribute__ ((dllexport))
        #define EXAMPLE_API_CONVENTION __attribute__ ((cdecl))
    #else
        #define EXAMPLE_API extern "C" __declspec(dllexport)
        #define EXAMPLE_API_CONVENTION __cdecl
    #endif
#elif __APPLE__
    #if defined(__GNUC__) && __GNUC__ >= 4
        #define EXAMPLE_API extern "C" __attribute__ ((visibility ("default")))
    #else
        #define EXAMPLE_API extern "C"
    #endif
    #ifdef __i386__
        #define EXAMPLE_API_CONVENTION __attribute__ ((cdecl))
    #else /* __i386__ */
        #define EXAMPLE_API_CONVENTION
    #endif /* __i386__ */
#elif __unix__ || __linux__
    #if defined(__GNUC__) && __GNUC__ >= 4
        #define EXAMPLE_API extern "C" __attribute__ ((visibility ("default")))
    #else
        #define EXAMPLE_API extern "C"
    #endif
    #ifdef __i386__
        #define EXAMPLE_API_CONVENTION __attribute__ ((cdecl))
    #else /* __i386__ */
        #define EXAMPLE_API_CONVENTION
    #endif /* __i386__ */
#else
    #error "Unknown platform"
#endif

int AutoGen_Internal_Exception_ExampleGetMajorVersionImpl()
{
    return 1;
}

int AutoGen_Internal_Exception_ExampleGetMinorVersionImpl()
{
    return 0;
}

int AutoGen_Internal_Exception_ExampleGetPatchVersionImpl()
{
    return 0;
}

#ifdef _WIN32
    #ifdef __GNUC__
        #define EXCEPTION_API extern "C" __attribute__ ((dllexport))
        #define EXCEPTION_API_CONVENTION __attribute__ ((cdecl))
    #else
        #define EXCEPTION_API extern "C" __declspec(dllexport)
        #define EXCEPTION_API_CONVENTION __cdecl
    #endif
#elif __APPLE__
    #if defined(__GNUC__) && __GNUC__ >= 4
        #define EXCEPTION_API extern "C" __attribute__ ((visibility ("default")))
    #else
        #define EXCEPTION_API extern "C"
    #endif
    #ifdef __i386__
        #define EXCEPTION_API_CONVENTION __attribute__ ((cdecl))
    #else /* __i386__ */
        #define EXCEPTION_API_CONVENTION
    #endif /* __i386__ */
#elif __unix__ || __linux__
    #if defined(__GNUC__) && __GNUC__ >= 4
        #define EXCEPTION_API extern "C" __attribute__ ((visibility ("default")))
    #else
        #define EXCEPTION_API extern "C"
    #endif
    #ifdef __i386__
        #define EXCEPTION_API_CONVENTION __attribute__ ((cdecl))
    #else /* __i386__ */
        #define EXCEPTION_API_CONVENTION
    #endif /* __i386__ */
#else
    #error "Unknown platform"
#endif

int AutoGen_Internal_Exception_ExceptionGetMajorVersionImpl()
{
    return 1;
}

int AutoGen_Internal_Exception_ExceptionGetMinorVersionImpl()
{
    return 0;
}

int AutoGen_Internal_Exception_ExceptionGetPatchVersionImpl()
{
    return 0;
}

EXCEPTION_API int EXCEPTION_API_CONVENTION example_get_major_version()
{
    return AutoGen_Internal_Exception_ExampleGetMajorVersionImpl();
}

EXCEPTION_API int EXCEPTION_API_CONVENTION example_get_minor_version()
{
    return AutoGen_Internal_Exception_ExampleGetMinorVersionImpl();
}

EXCEPTION_API int EXCEPTION_API_CONVENTION example_get_patch_version()
{
    return AutoGen_Internal_Exception_ExampleGetPatchVersionImpl();
}

EXCEPTION_API void* EXCEPTION_API_CONVENTION example_printer_new(beautiful_capi_exception_exception_info_t* exception_info)
{
    beautiful_capi_exception_exception_info_t exception_info_default;
    if (!exception_info)
    {
        exception_info = &exception_info_default;
    }
    try
    {
        exception_info->code = 0;
        exception_info->object_pointer = 0;
        return new Example::PrinterImpl();
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        exception_info->code = 3;
        try
        {
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        exception_info->code = 3;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        exception_info->code = 2;
        try
        {
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        exception_info->code = 2;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        exception_info->code = 4;
        try
        {
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        exception_info->code = 4;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::GenericImpl& exception_object)
    {
        exception_info->code = 1;
        try
        {
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        exception_info->code = 1;
        exception_info->object_pointer = exception_object;
    }
    catch (...)
    {
        exception_info->code = -2;
    }
    return static_cast<void*>(0);
}

EXCEPTION_API const char* EXCEPTION_API_CONVENTION example_printer_show(beautiful_capi_exception_exception_info_t* exception_info, void* object_pointer, const char* text)
{
    Example::PrinterImpl* self = static_cast<Example::PrinterImpl*>(object_pointer);
    beautiful_capi_exception_exception_info_t exception_info_default;
    if (!exception_info)
    {
        exception_info = &exception_info_default;
    }
    try
    {
        exception_info->code = 0;
        exception_info->object_pointer = 0;
        return self->Show(text);
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        exception_info->code = 3;
        try
        {
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        exception_info->code = 3;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        exception_info->code = 2;
        try
        {
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        exception_info->code = 2;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        exception_info->code = 4;
        try
        {
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        exception_info->code = 4;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::GenericImpl& exception_object)
    {
        exception_info->code = 1;
        try
        {
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        exception_info->code = 1;
        exception_info->object_pointer = exception_object;
    }
    catch (...)
    {
        exception_info->code = -2;
    }
    return static_cast<const char*>(0);
}

EXCEPTION_API void EXCEPTION_API_CONVENTION example_printer_power_on(beautiful_capi_exception_exception_info_t* exception_info, void* object_pointer)
{
    Example::PrinterImpl* self = static_cast<Example::PrinterImpl*>(object_pointer);
    beautiful_capi_exception_exception_info_t exception_info_default;
    if (!exception_info)
    {
        exception_info = &exception_info_default;
    }
    try
    {
        exception_info->code = 0;
        exception_info->object_pointer = 0;
        self->PowerOn();
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        exception_info->code = 3;
        try
        {
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        exception_info->code = 3;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        exception_info->code = 2;
        try
        {
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        exception_info->code = 2;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        exception_info->code = 4;
        try
        {
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        exception_info->code = 4;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::GenericImpl& exception_object)
    {
        exception_info->code = 1;
        try
        {
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        exception_info->code = 1;
        exception_info->object_pointer = exception_object;
    }
    catch (...)
    {
        exception_info->code = -2;
    }
}

EXCEPTION_API void EXCEPTION_API_CONVENTION example_printer_power_off(void* object_pointer)
{
    Example::PrinterImpl* self = static_cast<Example::PrinterImpl*>(object_pointer);
    self->PowerOff();
}

EXCEPTION_API void* EXCEPTION_API_CONVENTION example_printer_copy(beautiful_capi_exception_exception_info_t* exception_info, void* object_pointer)
{
    beautiful_capi_exception_exception_info_t exception_info_default;
    if (!exception_info)
    {
        exception_info = &exception_info_default;
    }
    try
    {
        exception_info->code = 0;
        exception_info->object_pointer = 0;
        return new Example::PrinterImpl(*static_cast<Example::PrinterImpl*>(object_pointer));
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        exception_info->code = 3;
        try
        {
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        exception_info->code = 3;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        exception_info->code = 2;
        try
        {
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        exception_info->code = 2;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        exception_info->code = 4;
        try
        {
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        exception_info->code = 4;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::GenericImpl& exception_object)
    {
        exception_info->code = 1;
        try
        {
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        exception_info->code = 1;
        exception_info->object_pointer = exception_object;
    }
    catch (...)
    {
        exception_info->code = -2;
    }
    return static_cast<void*>(0);
}

EXCEPTION_API void EXCEPTION_API_CONVENTION example_printer_delete(void* object_pointer)
{
    delete static_cast<Example::PrinterImpl*>(object_pointer);
}

EXCEPTION_API void* EXCEPTION_API_CONVENTION example_scanner_new(beautiful_capi_exception_exception_info_t* exception_info)
{
    beautiful_capi_exception_exception_info_t exception_info_default;
    if (!exception_info)
    {
        exception_info = &exception_info_default;
    }
    try
    {
        exception_info->code = 0;
        exception_info->object_pointer = 0;
        return new Example::ScannerImpl();
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        exception_info->code = 3;
        try
        {
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        exception_info->code = 3;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        exception_info->code = 2;
        try
        {
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        exception_info->code = 2;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        exception_info->code = 4;
        try
        {
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        exception_info->code = 4;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::GenericImpl& exception_object)
    {
        exception_info->code = 1;
        try
        {
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        exception_info->code = 1;
        exception_info->object_pointer = exception_object;
    }
    catch (...)
    {
        exception_info->code = -2;
    }
    return static_cast<void*>(0);
}

EXCEPTION_API const char* EXCEPTION_API_CONVENTION example_scanner_scan_text(beautiful_capi_exception_exception_info_t* exception_info, void* object_pointer)
{
    Example::ScannerImpl* self = static_cast<Example::ScannerImpl*>(object_pointer);
    beautiful_capi_exception_exception_info_t exception_info_default;
    if (!exception_info)
    {
        exception_info = &exception_info_default;
    }
    try
    {
        exception_info->code = 0;
        exception_info->object_pointer = 0;
        return self->ScanText();
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        exception_info->code = 3;
        try
        {
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        exception_info->code = 3;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        exception_info->code = 2;
        try
        {
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        exception_info->code = 2;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        exception_info->code = 4;
        try
        {
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        exception_info->code = 4;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::GenericImpl& exception_object)
    {
        exception_info->code = 1;
        try
        {
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        exception_info->code = 1;
        exception_info->object_pointer = exception_object;
    }
    catch (...)
    {
        exception_info->code = -2;
    }
    return static_cast<const char*>(0);
}

EXCEPTION_API void EXCEPTION_API_CONVENTION example_scanner_power_on(beautiful_capi_exception_exception_info_t* exception_info, void* object_pointer)
{
    Example::ScannerImpl* self = static_cast<Example::ScannerImpl*>(object_pointer);
    beautiful_capi_exception_exception_info_t exception_info_default;
    if (!exception_info)
    {
        exception_info = &exception_info_default;
    }
    try
    {
        exception_info->code = 0;
        exception_info->object_pointer = 0;
        self->PowerOn();
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        exception_info->code = 3;
        try
        {
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        exception_info->code = 3;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        exception_info->code = 2;
        try
        {
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        exception_info->code = 2;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        exception_info->code = 4;
        try
        {
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        exception_info->code = 4;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::GenericImpl& exception_object)
    {
        exception_info->code = 1;
        try
        {
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        exception_info->code = 1;
        exception_info->object_pointer = exception_object;
    }
    catch (...)
    {
        exception_info->code = -2;
    }
}

EXCEPTION_API void EXCEPTION_API_CONVENTION example_scanner_power_off(void* object_pointer)
{
    Example::ScannerImpl* self = static_cast<Example::ScannerImpl*>(object_pointer);
    self->PowerOff();
}

EXCEPTION_API void EXCEPTION_API_CONVENTION example_scanner_add_ref(void* object_pointer)
{
    intrusive_ptr_add_ref(static_cast<Example::ScannerImpl*>(object_pointer));
}

EXCEPTION_API void EXCEPTION_API_CONVENTION example_scanner_release(void* object_pointer)
{
    intrusive_ptr_release(static_cast<Example::ScannerImpl*>(object_pointer));
}

EXCEPTION_API int EXCEPTION_API_CONVENTION exception_get_major_version()
{
    return AutoGen_Internal_Exception_ExceptionGetMajorVersionImpl();
}

EXCEPTION_API int EXCEPTION_API_CONVENTION exception_get_minor_version()
{
    return AutoGen_Internal_Exception_ExceptionGetMinorVersionImpl();
}

EXCEPTION_API int EXCEPTION_API_CONVENTION exception_get_patch_version()
{
    return AutoGen_Internal_Exception_ExceptionGetPatchVersionImpl();
}

EXCEPTION_API void* EXCEPTION_API_CONVENTION exception_generic_new(beautiful_capi_exception_exception_info_t* exception_info)
{
    beautiful_capi_exception_exception_info_t exception_info_default;
    if (!exception_info)
    {
        exception_info = &exception_info_default;
    }
    try
    {
        exception_info->code = 0;
        exception_info->object_pointer = 0;
        return new Exception::GenericImpl();
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        exception_info->code = 3;
        try
        {
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        exception_info->code = 3;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        exception_info->code = 2;
        try
        {
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        exception_info->code = 2;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        exception_info->code = 4;
        try
        {
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        exception_info->code = 4;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::GenericImpl& exception_object)
    {
        exception_info->code = 1;
        try
        {
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        exception_info->code = 1;
        exception_info->object_pointer = exception_object;
    }
    catch (...)
    {
        exception_info->code = -2;
    }
    return static_cast<void*>(0);
}

EXCEPTION_API const char* EXCEPTION_API_CONVENTION exception_generic_get_error_text(void* object_pointer)
{
    const Exception::GenericImpl* self = static_cast<Exception::GenericImpl*>(object_pointer);
    return self->GetErrorText();
}

EXCEPTION_API void* EXCEPTION_API_CONVENTION exception_generic_copy(beautiful_capi_exception_exception_info_t* exception_info, void* object_pointer)
{
    beautiful_capi_exception_exception_info_t exception_info_default;
    if (!exception_info)
    {
        exception_info = &exception_info_default;
    }
    try
    {
        exception_info->code = 0;
        exception_info->object_pointer = 0;
        return new Exception::GenericImpl(*static_cast<Exception::GenericImpl*>(object_pointer));
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        exception_info->code = 3;
        try
        {
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        exception_info->code = 3;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        exception_info->code = 2;
        try
        {
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        exception_info->code = 2;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        exception_info->code = 4;
        try
        {
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        exception_info->code = 4;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::GenericImpl& exception_object)
    {
        exception_info->code = 1;
        try
        {
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        exception_info->code = 1;
        exception_info->object_pointer = exception_object;
    }
    catch (...)
    {
        exception_info->code = -2;
    }
    return static_cast<void*>(0);
}

EXCEPTION_API void EXCEPTION_API_CONVENTION exception_generic_delete(void* object_pointer)
{
    delete static_cast<Exception::GenericImpl*>(object_pointer);
}

EXCEPTION_API void* EXCEPTION_API_CONVENTION exception_bad_argument_new(beautiful_capi_exception_exception_info_t* exception_info)
{
    beautiful_capi_exception_exception_info_t exception_info_default;
    if (!exception_info)
    {
        exception_info = &exception_info_default;
    }
    try
    {
        exception_info->code = 0;
        exception_info->object_pointer = 0;
        return new Exception::BadArgumentImpl();
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        exception_info->code = 3;
        try
        {
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        exception_info->code = 3;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        exception_info->code = 2;
        try
        {
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        exception_info->code = 2;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        exception_info->code = 4;
        try
        {
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        exception_info->code = 4;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::GenericImpl& exception_object)
    {
        exception_info->code = 1;
        try
        {
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        exception_info->code = 1;
        exception_info->object_pointer = exception_object;
    }
    catch (...)
    {
        exception_info->code = -2;
    }
    return static_cast<void*>(0);
}

EXCEPTION_API const char* EXCEPTION_API_CONVENTION exception_bad_argument_get_argument_name(void* object_pointer)
{
    const Exception::BadArgumentImpl* self = static_cast<Exception::BadArgumentImpl*>(object_pointer);
    return self->GetArgumentName();
}

EXCEPTION_API void* EXCEPTION_API_CONVENTION exception_bad_argument_copy(beautiful_capi_exception_exception_info_t* exception_info, void* object_pointer)
{
    beautiful_capi_exception_exception_info_t exception_info_default;
    if (!exception_info)
    {
        exception_info = &exception_info_default;
    }
    try
    {
        exception_info->code = 0;
        exception_info->object_pointer = 0;
        return new Exception::BadArgumentImpl(*static_cast<Exception::BadArgumentImpl*>(object_pointer));
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        exception_info->code = 3;
        try
        {
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        exception_info->code = 3;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        exception_info->code = 2;
        try
        {
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        exception_info->code = 2;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        exception_info->code = 4;
        try
        {
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        exception_info->code = 4;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::GenericImpl& exception_object)
    {
        exception_info->code = 1;
        try
        {
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        exception_info->code = 1;
        exception_info->object_pointer = exception_object;
    }
    catch (...)
    {
        exception_info->code = -2;
    }
    return static_cast<void*>(0);
}

EXCEPTION_API void EXCEPTION_API_CONVENTION exception_bad_argument_delete(void* object_pointer)
{
    delete static_cast<Exception::BadArgumentImpl*>(object_pointer);
}

EXCEPTION_API void* EXCEPTION_API_CONVENTION exception_bad_argument_cast_to_base(void* object_pointer)
{
    return static_cast<Exception::GenericImpl*>(static_cast<Exception::BadArgumentImpl*>(object_pointer));
}

EXCEPTION_API void* EXCEPTION_API_CONVENTION exception_null_argument_new(beautiful_capi_exception_exception_info_t* exception_info)
{
    beautiful_capi_exception_exception_info_t exception_info_default;
    if (!exception_info)
    {
        exception_info = &exception_info_default;
    }
    try
    {
        exception_info->code = 0;
        exception_info->object_pointer = 0;
        return new Exception::NullArgumentImpl();
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        exception_info->code = 3;
        try
        {
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        exception_info->code = 3;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        exception_info->code = 2;
        try
        {
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        exception_info->code = 2;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        exception_info->code = 4;
        try
        {
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        exception_info->code = 4;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::GenericImpl& exception_object)
    {
        exception_info->code = 1;
        try
        {
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        exception_info->code = 1;
        exception_info->object_pointer = exception_object;
    }
    catch (...)
    {
        exception_info->code = -2;
    }
    return static_cast<void*>(0);
}

EXCEPTION_API void* EXCEPTION_API_CONVENTION exception_null_argument_copy(beautiful_capi_exception_exception_info_t* exception_info, void* object_pointer)
{
    beautiful_capi_exception_exception_info_t exception_info_default;
    if (!exception_info)
    {
        exception_info = &exception_info_default;
    }
    try
    {
        exception_info->code = 0;
        exception_info->object_pointer = 0;
        return new Exception::NullArgumentImpl(*static_cast<Exception::NullArgumentImpl*>(object_pointer));
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        exception_info->code = 3;
        try
        {
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        exception_info->code = 3;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        exception_info->code = 2;
        try
        {
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        exception_info->code = 2;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        exception_info->code = 4;
        try
        {
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        exception_info->code = 4;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::GenericImpl& exception_object)
    {
        exception_info->code = 1;
        try
        {
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        exception_info->code = 1;
        exception_info->object_pointer = exception_object;
    }
    catch (...)
    {
        exception_info->code = -2;
    }
    return static_cast<void*>(0);
}

EXCEPTION_API void EXCEPTION_API_CONVENTION exception_null_argument_delete(void* object_pointer)
{
    delete static_cast<Exception::NullArgumentImpl*>(object_pointer);
}

EXCEPTION_API void* EXCEPTION_API_CONVENTION exception_null_argument_cast_to_base(void* object_pointer)
{
    return static_cast<Exception::BadArgumentImpl*>(static_cast<Exception::NullArgumentImpl*>(object_pointer));
}

EXCEPTION_API void* EXCEPTION_API_CONVENTION exception_division_by_zero_new(beautiful_capi_exception_exception_info_t* exception_info)
{
    beautiful_capi_exception_exception_info_t exception_info_default;
    if (!exception_info)
    {
        exception_info = &exception_info_default;
    }
    try
    {
        exception_info->code = 0;
        exception_info->object_pointer = 0;
        return new Exception::DivisionByZeroImpl();
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        exception_info->code = 3;
        try
        {
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        exception_info->code = 3;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        exception_info->code = 2;
        try
        {
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        exception_info->code = 2;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        exception_info->code = 4;
        try
        {
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        exception_info->code = 4;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::GenericImpl& exception_object)
    {
        exception_info->code = 1;
        try
        {
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        exception_info->code = 1;
        exception_info->object_pointer = exception_object;
    }
    catch (...)
    {
        exception_info->code = -2;
    }
    return static_cast<void*>(0);
}

EXCEPTION_API void* EXCEPTION_API_CONVENTION exception_division_by_zero_copy(beautiful_capi_exception_exception_info_t* exception_info, void* object_pointer)
{
    beautiful_capi_exception_exception_info_t exception_info_default;
    if (!exception_info)
    {
        exception_info = &exception_info_default;
    }
    try
    {
        exception_info->code = 0;
        exception_info->object_pointer = 0;
        return new Exception::DivisionByZeroImpl(*static_cast<Exception::DivisionByZeroImpl*>(object_pointer));
    }
    catch (Exception::NullArgumentImpl& exception_object)
    {
        exception_info->code = 3;
        try
        {
            exception_info->object_pointer = new Exception::NullArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::NullArgumentImpl* exception_object)
    {
        exception_info->code = 3;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::BadArgumentImpl& exception_object)
    {
        exception_info->code = 2;
        try
        {
            exception_info->object_pointer = new Exception::BadArgumentImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::BadArgumentImpl* exception_object)
    {
        exception_info->code = 2;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::DivisionByZeroImpl& exception_object)
    {
        exception_info->code = 4;
        try
        {
            exception_info->object_pointer = new Exception::DivisionByZeroImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::DivisionByZeroImpl* exception_object)
    {
        exception_info->code = 4;
        exception_info->object_pointer = exception_object;
    }
    catch (Exception::GenericImpl& exception_object)
    {
        exception_info->code = 1;
        try
        {
            exception_info->object_pointer = new Exception::GenericImpl(exception_object);
        }
        catch (...)
        {
            exception_info->code = -1;
            assert(false);
        }
    }
    catch (Exception::GenericImpl* exception_object)
    {
        exception_info->code = 1;
        exception_info->object_pointer = exception_object;
    }
    catch (...)
    {
        exception_info->code = -2;
    }
    return static_cast<void*>(0);
}

EXCEPTION_API void EXCEPTION_API_CONVENTION exception_division_by_zero_delete(void* object_pointer)
{
    delete static_cast<Exception::DivisionByZeroImpl*>(object_pointer);
}

EXCEPTION_API void* EXCEPTION_API_CONVENTION exception_division_by_zero_cast_to_base(void* object_pointer)
{
    return static_cast<Exception::GenericImpl*>(static_cast<Exception::DivisionByZeroImpl*>(object_pointer));
}
