/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#ifndef EXAMPLE_INCLUDED
#define EXAMPLE_INCLUDED

#include "ExampleCapi.h"
#include "ExampleFwd.h"
#include "Example/Position_float.h"
#include "Example/Position_double.h"
#include "Example/Position4D_float.h"
#include "Example/Position4D_double.h"
#include "Example/Model_float.h"
#include "Example/Model_double.h"
#include "Example/VectorOf_int.h"
#include "Example/VectorOf_double.h"
#include "Example/VectorOf_ExamplePosition_float.h"
#include "Example/VectorOf_ExamplePosition_double.h"
#include "Example/VectorOf_ExamplePosition4D_float.h"
#include "Example/VectorOf_ExamplePosition4D_double.h"
#include "Example/VectorOf_ExampleVectorOf_ExamplePosition4D_float.h"
#include "Example/VectorOfObjects_ExampleModelPtr_float.h"
#include "Example/VectorOfObjects_ExampleModelPtr_double.h"
#include "Example/VectorOfObjectsDerived_ExampleModelPtr_float.h"
#include "Example/VectorOfObjectsDerived_ExampleModelPtr_double.h"

#ifdef __cplusplus

namespace Example { 

template<typename TargetType, typename SourceType>
TargetType down_cast(const SourceType&);

template<>
inline Example::VectorOfObjectsDerivedPtr<Example::ModelPtr<float> > down_cast(const Example::VectorOfObjectsPtr<Example::ModelPtr<float> >& input_object)
{
    struct raw_pointer_holder { void* raw_pointer; };
    return Example::VectorOfObjectsDerivedPtr<Example::ModelPtr<float> >(example_vectorofobjects_examplemodelptr_float_cast_to_example_vectorofobjectsderived_examplemodelptr_float(reinterpret_cast<const raw_pointer_holder*>(&input_object)->raw_pointer), true);
}

template<>
inline Example::VectorOfObjectsDerivedPtr<Example::ModelPtr<double> > down_cast(const Example::VectorOfObjectsPtr<Example::ModelPtr<double> >& input_object)
{
    struct raw_pointer_holder { void* raw_pointer; };
    return Example::VectorOfObjectsDerivedPtr<Example::ModelPtr<double> >(example_vectorofobjects_examplemodelptr_double_cast_to_example_vectorofobjectsderived_examplemodelptr_double(reinterpret_cast<const raw_pointer_holder*>(&input_object)->raw_pointer), true);
}

}

#endif /* __cplusplus */

#endif /* EXAMPLE_INCLUDED */

