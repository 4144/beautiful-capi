/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#ifndef EXAMPLE_FWD_INCLUDED
#define EXAMPLE_FWD_INCLUDED

#ifdef __cplusplus

#include <memory>
#include "Template/common/forward_holder.h"

namespace Example
{
    template<typename WorkType>
    class Position;
    template<typename WorkType>
    class Position4D;
    template<typename WorkType>
    class ModelPtr;
    template<typename T>
    class VectorOf;
    template<typename T>
    class VectorOfObjectsPtr;
    template<typename T>
    class VectorOfObjectsDerivedPtr;
    template<>
    class Position<float>;
    template<>
    class Position<double>;
    template<>
    class Position4D<float>;
    template<>
    class Position4D<double>;
    template<>
    class ModelPtr<float>;
    template<>
    class ModelPtr<double>;
    template<>
    class VectorOf<int>;
    template<>
    class VectorOf<double>;
    template<>
    class VectorOf<Example::Position<float> >;
    template<>
    class VectorOf<Example::Position<double> >;
    template<>
    class VectorOf<Example::Position4D<float> >;
    template<>
    class VectorOf<Example::Position4D<double> >;
    template<>
    class VectorOf<Example::VectorOf<Example::Position4D<float> > >;
    template<>
    class VectorOfObjectsPtr<Example::ModelPtr<float> >;
    template<>
    class VectorOfObjectsPtr<Example::ModelPtr<double> >;
    template<>
    class VectorOfObjectsDerivedPtr<Example::ModelPtr<float> >;
    template<>
    class VectorOfObjectsDerivedPtr<Example::ModelPtr<double> >;
}

#endif /* __cplusplus */

#endif /* EXAMPLE_FWD_INCLUDED */

