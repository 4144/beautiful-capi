/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#ifndef EXAMPLE_POSITION_DOUBLE_DEFINITION_INCLUDED
#define EXAMPLE_POSITION_DOUBLE_DEFINITION_INCLUDED

#include "Example/PositiondoubleDecl.h"

#ifdef __cplusplus

inline Example::Position<double>::Position()
{
    SetObject(example_position_double_default());
}

inline double Example::Position<double>::GetX() const
{
    return example_position_double_get_x(this->get_raw_pointer());
}

inline void Example::Position<double>::SetX(double x)
{
    example_position_double_set_x(this->get_raw_pointer(), x);
}

inline double Example::Position<double>::GetY() const
{
    return example_position_double_get_y(this->get_raw_pointer());
}

inline void Example::Position<double>::SetY(double y)
{
    example_position_double_set_y(this->get_raw_pointer(), y);
}

inline double Example::Position<double>::GetZ() const
{
    return example_position_double_get_z(this->get_raw_pointer());
}

inline void Example::Position<double>::SetZ(double z)
{
    example_position_double_set_z(this->get_raw_pointer(), z);
}

inline Example::Position<double>::Position(const Position<double>& other)
{
    if (other.mObject)
    {
        SetObject(example_position_double_copy(other.mObject));
    }
    else
    {
        SetObject(0);
    }
}

inline Example::Position<double>::Position(Example::Position<double>::ECreateFromRawPointer, void *object_pointer, bool copy_object)
{
    if (object_pointer && copy_object)
    {
        SetObject(example_position_double_copy(object_pointer));
    }
    else
    {
        SetObject(object_pointer);
    }
}

inline Example::Position<double>::~Position()
{
    if (mObject)
    {
        example_position_double_delete(mObject);
        SetObject(0);
    }
}

inline Example::Position<double>& Example::Position<double>::operator=(const Example::Position<double>& other)
{
    if (mObject != other.mObject)
    {
        if (mObject)
        {
            example_position_double_delete(mObject);
            SetObject(0);
        }
        if (other.mObject)
        {
            SetObject(example_position_double_copy(other.mObject));
        }
        else
        {
            SetObject(0);
        }
    }
    return *this;
}

inline bool Example::Position<double>::IsNull() const
{
    return !mObject;
}

inline bool Example::Position<double>::IsNotNull() const
{
    return mObject != 0;
}

inline bool Example::Position<double>::operator!() const
{
    return !mObject;
}

inline void* Example::Position<double>::Detach()
{
    void* result = mObject;
    SetObject(0);
    return result;
}

inline void* Example::Position<double>::get_raw_pointer() const
{
    return mObject;
}

inline void Example::Position<double>::SetObject(void* object_pointer)
{
    mObject = object_pointer;
}

#endif /* __cplusplus */

#endif /* EXAMPLE_POSITION_DOUBLE_DEFINITION_INCLUDED */

