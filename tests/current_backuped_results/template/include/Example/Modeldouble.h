/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#ifndef EXAMPLE_MODEL_DOUBLE_DEFINITION_INCLUDED
#define EXAMPLE_MODEL_DOUBLE_DEFINITION_INCLUDED

#include "Example/ModeldoubleDecl.h"
#include "Example/Positiondouble.h"

#ifdef __cplusplus

inline Example::ModelPtr<double>::ModelPtr()
{
    SetObject(example_model_double_default());
}

inline const char* Example::ModelPtr<double>::GetName() const
{
    return example_model_double_get_name(this->GetRawPointer());
}

inline void Example::ModelPtr<double>::SetName(const char* name)
{
    example_model_double_set_name(this->GetRawPointer(), name);
}

inline Example::Position<double> Example::ModelPtr<double>::GetPosition() const
{
    return Example::Position<double>(Example::Position<double>::force_creating_from_raw_pointer, example_model_double_get_position(this->GetRawPointer()), false);
}

inline void Example::ModelPtr<double>::SetPosition(const Example::Position<double>& position)
{
    example_model_double_set_position(this->GetRawPointer(), position.GetRawPointer());
}

inline Example::ModelPtr<double>::ModelPtr(const ModelPtr<double>& other)
{
    SetObject(other.mObject);
    if (other.mObject)
    {
        example_model_double_add_ref(other.mObject);
    }
}

inline Example::ModelPtr<double>::ModelPtr(Example::ModelPtr<double>::ECreateFromRawPointer, void *object_pointer, bool add_ref_object)
{
    SetObject(object_pointer);
    if (add_ref_object && object_pointer)
    {
        example_model_double_add_ref(object_pointer);
    }
}

inline Example::ModelPtr<double>::~ModelPtr()
{
    if (mObject)
    {
        example_model_double_release(mObject);
        SetObject(0);
    }
}

inline Example::ModelPtr<double>& Example::ModelPtr<double>::operator=(const Example::ModelPtr<double>& other)
{
    if (mObject != other.mObject)
    {
        if (mObject)
        {
            example_model_double_release(mObject);
            SetObject(0);
        }
        SetObject(other.mObject);
        if (other.mObject)
        {
            example_model_double_add_ref(other.mObject);
        }
    }
    return *this;
}

inline bool Example::ModelPtr<double>::IsNull() const
{
    return !mObject;
}

inline bool Example::ModelPtr<double>::IsNotNull() const
{
    return mObject != 0;
}

inline bool Example::ModelPtr<double>::operator!() const
{
    return !mObject;
}

inline void* Example::ModelPtr<double>::Detach()
{
    void* result = mObject;
    SetObject(0);
    return result;
}

inline void* Example::ModelPtr<double>::GetRawPointer() const
{
    return mObject;
}

inline Example::ModelPtr<double>* Example::ModelPtr<double>::operator->()
{
    return this;
}

inline const Example::ModelPtr<double>* Example::ModelPtr<double>::operator->() const
{
    return this;
}

inline void Example::ModelPtr<double>::SetObject(void* object_pointer)
{
    mObject = object_pointer;
}

#endif /* __cplusplus */

#endif /* EXAMPLE_MODEL_DOUBLE_DEFINITION_INCLUDED */

