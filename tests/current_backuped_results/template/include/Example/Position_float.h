/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#ifndef EXAMPLE_POSITION_FLOAT_INCLUDED
#define EXAMPLE_POSITION_FLOAT_INCLUDED

#include "ExampleCapi.h"
#include "ExampleFwd.h"

#ifdef __cplusplus

namespace Example { 

template<>
class Position<float>
{
protected:
    void* mObject;
    void SetObject(void* object_pointer)
    {
        mObject = object_pointer;
    }
public:
    Position<float>(const Position<float>& other)
    {
        if (other.mObject)
        {
            SetObject(example_position_float_copy(other.mObject));
        }
        else
        {
            SetObject(0);
        }
    }
    Position<float>(void *object_pointer, bool copy_object)
    {
        if (object_pointer && copy_object)
        {
            SetObject(example_position_float_copy(object_pointer));
        }
        else
        {
            SetObject(object_pointer);
        }
    }
    bool IsNull() const
    {
        return !mObject;
    }
    bool IsNotNull() const
    {
        return mObject != 0;
    }
    bool operator!() const
    {
        return !mObject;
    }
    Position<float>* operator->()
    {
        return this;
    }
    const Position<float>* operator->() const
    {
        return this;
    }
    void* Detach()
    {
        void* result = mObject;
        SetObject(0);
        return result;
    }
    Position<float> operator=(const Position<float>& other)
    {
        if (mObject != other.mObject)
        {
            if (mObject)
            {
                example_position_float_delete(mObject);
                SetObject(0);
            }
            if (other.mObject)
            {
                SetObject(example_position_float_copy(other.mObject));
            }
            else
            {
                SetObject(0);
            }
        }
        return *this;
    }
    Position<float>()
    {
        SetObject(example_position_float_default());
    }
    ~Position<float>()
    {
        if (mObject)
        {
            example_position_float_delete(mObject);
            SetObject(0);
        }
    }
    float GetX() const
    {
        return example_position_float_getx(mObject);
    }
    void SetX(float x)
    {
        example_position_float_setx(mObject, x);
    }
    float GetY() const
    {
        return example_position_float_gety(mObject);
    }
    void SetY(float y)
    {
        example_position_float_sety(mObject, y);
    }
    float GetZ() const
    {
        return example_position_float_getz(mObject);
    }
    void SetZ(float z)
    {
        example_position_float_setz(mObject, z);
    }
};

}

#endif /* __cplusplus */

#endif /* EXAMPLE_POSITION_FLOAT_INCLUDED */

