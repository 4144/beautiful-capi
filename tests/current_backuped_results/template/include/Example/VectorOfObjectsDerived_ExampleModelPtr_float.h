/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#ifndef EXAMPLE_VECTOROFOBJECTSDERIVED_EXAMPLEMODELPTR_FLOAT_INCLUDED
#define EXAMPLE_VECTOROFOBJECTSDERIVED_EXAMPLEMODELPTR_FLOAT_INCLUDED

#include "ExampleCapi.h"
#include "ExampleFwd.h"
#include "Example/VectorOfObjects_ExampleModelPtr_float.h"

#ifdef __cplusplus

namespace Example { 

template<>
class VectorOfObjectsDerivedPtr<Example::ModelPtr<float> > : public Example::VectorOfObjectsPtr<Example::ModelPtr<float> >
{
protected:
    void* mObject;
    void SetObject(void* object_pointer)
    {
        mObject = object_pointer;
        if (mObject)
        {
            Example::VectorOfObjectsPtr<Example::ModelPtr<float> >::SetObject(example_vectorofobjectsderived_examplemodelptr_float_cast_to_base(mObject));
        }
        else
        {
            Example::VectorOfObjectsPtr<Example::ModelPtr<float> >::SetObject(0);
        }
    }
public:
    VectorOfObjectsDerivedPtr<Example::ModelPtr<float> >(const VectorOfObjectsDerivedPtr<Example::ModelPtr<float> >& other) : Example::VectorOfObjectsPtr<Example::ModelPtr<float> >(0, false)
    {
        SetObject(other.mObject);
        if (mObject)
        {
            example_vectorofobjectsderived_examplemodelptr_float_add_ref(mObject);
        }
    }
    VectorOfObjectsDerivedPtr<Example::ModelPtr<float> >(void *object_pointer, bool add_ref) : Example::VectorOfObjectsPtr<Example::ModelPtr<float> >(0, false)
    {
        SetObject(object_pointer);
        if (add_ref && object_pointer)
        {
            example_vectorofobjectsderived_examplemodelptr_float_add_ref(mObject);
        }
    }
    bool IsNull() const
    {
        return !mObject;
    }
    bool IsNotNull() const
    {
        return mObject != 0;
    }
    bool operator!() const
    {
        return !mObject;
    }
    VectorOfObjectsDerivedPtr<Example::ModelPtr<float> >* operator->()
    {
        return this;
    }
    const VectorOfObjectsDerivedPtr<Example::ModelPtr<float> >* operator->() const
    {
        return this;
    }
    void* Detach()
    {
        void* result = mObject;
        SetObject(0);
        return result;
    }
    VectorOfObjectsDerivedPtr<Example::ModelPtr<float> > operator=(const VectorOfObjectsDerivedPtr<Example::ModelPtr<float> >& other)
    {
        if (mObject != other.mObject)
        {
            if (mObject)
            {
                example_vectorofobjectsderived_examplemodelptr_float_release(mObject);
                SetObject(0);
            }
            SetObject(other.mObject);
            if (mObject)
            {
                example_vectorofobjectsderived_examplemodelptr_float_add_ref(mObject);
            }
        }
        return *this;
    }
    VectorOfObjectsDerivedPtr<Example::ModelPtr<float> >() : Example::VectorOfObjectsPtr<Example::ModelPtr<float> >(0, false)
    {
        SetObject(example_vectorofobjectsderived_examplemodelptr_float_default());
    }
    ~VectorOfObjectsDerivedPtr<Example::ModelPtr<float> >()
    {
        if (mObject)
        {
            example_vectorofobjectsderived_examplemodelptr_float_release(mObject);
            SetObject(0);
        }
    }
    int GetA() const
    {
        return example_vectorofobjectsderived_examplemodelptr_float_geta(mObject);
    }
};

}

#endif /* __cplusplus */

#endif /* EXAMPLE_VECTOROFOBJECTSDERIVED_EXAMPLEMODELPTR_FLOAT_INCLUDED */

