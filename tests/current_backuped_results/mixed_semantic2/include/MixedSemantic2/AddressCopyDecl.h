/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#ifndef MIXEDSEMANTIC2_ADDRESSCOPY_DECLARATION_INCLUDED
#define MIXEDSEMANTIC2_ADDRESSCOPY_DECLARATION_INCLUDED

#include "MixedSemantic2Capi.h"
#include "MixedSemantic2Fwd.h"

#ifdef __cplusplus

namespace MixedSemantic2 {

class AddressCopy
{
public:
    inline AddressCopy();
    inline const char* GetStreetName() const;
    inline void SetStreetName(const char* street_name);
    inline const char* GetCity() const;
    inline void SetCity(const char* city);
    inline unsigned int GetState() const;
    inline void SetState(unsigned int state);

    inline AddressCopy(const AddressCopy& other);
    #ifdef MIXEDSEMANTIC2_CPP_COMPILER_HAS_RVALUE_REFERENCES
    inline AddressCopy(AddressCopy&& other);
    #endif /* MIXEDSEMANTIC2_CPP_COMPILER_HAS_RVALUE_REFERENCES */
    enum ECreateFromRawPointer { force_creating_from_raw_pointer };
    inline AddressCopy(ECreateFromRawPointer, void *object_pointer, bool copy_object);
    inline ~AddressCopy();
    inline AddressCopy& operator=(const AddressCopy& other);
    #ifdef MIXEDSEMANTIC2_CPP_COMPILER_HAS_RVALUE_REFERENCES
    inline AddressCopy& operator=(AddressCopy&& other);
    #endif /* MIXEDSEMANTIC2_CPP_COMPILER_HAS_RVALUE_REFERENCES */
    static inline AddressCopy Null();
    inline bool IsNull() const;
    inline bool IsNotNull() const;
    inline bool operator!() const;
    inline void* Detach();
    inline void* GetRawPointer() const;
    inline MixedSemantic2::AddressPtr GetRefCounted() const;
    inline operator MixedSemantic2::AddressRawPtr() const;
    inline AddressCopy(const MixedSemantic2::AddressPtr& value);
    inline AddressCopy(const MixedSemantic2::AddressRawPtr& value);
protected:
    inline void SetObject(void* object_pointer);
    void* mObject;
};

}

#endif /* __cplusplus */

#endif /* MIXEDSEMANTIC2_ADDRESSCOPY_DECLARATION_INCLUDED */

