/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#ifndef STL_CAPI_INCLUDED
#define STL_CAPI_INCLUDED

#include <stddef.h>

#ifndef BEAUTIFUL_CAPI_IMPLEMENTATIONCODE_EXCEPTION_INFO_DEFINED
#define BEAUTIFUL_CAPI_IMPLEMENTATIONCODE_EXCEPTION_INFO_DEFINED

struct beautiful_capi_implementationcode_exception_info_t
{
    uint32_t code; /* value from beautiful_capi_implementationcode_exception_code_t enumeration */
    void* object_pointer; /* exception object pointer */
};

enum beautiful_capi_implementationcode_exception_code_t
{
    no_exception = 0,
    unknown_exception = 1,
    copy_exception_error = 2,
    stl_exception = 100
};

#endif /* BEAUTIFUL_CAPI_IMPLEMENTATIONCODE_EXCEPTION_INFO_DEFINED */

#ifdef __cplusplus
    #define STL_CAPI_PREFIX extern "C"
#else /* __cplusplus */
    #define STL_CAPI_PREFIX
#endif /* __cplusplus */

#ifdef _WIN32
    #ifdef __GNUC__
        #define STL_API STL_CAPI_PREFIX __attribute__ ((dllimport))
        #define STL_API_CONVENTION __attribute__ ((cdecl))
    #else
        #define STL_API STL_CAPI_PREFIX __declspec(dllimport)
        #define STL_API_CONVENTION __cdecl
    #endif
#elif __APPLE__
    #if defined(__GNUC__) && __GNUC__ >= 4
        #define STL_API STL_CAPI_PREFIX __attribute__ ((visibility ("default")))
    #else
        #define STL_API STL_CAPI_PREFIX
    #endif
    #ifdef __i386__
        #define STL_API_CONVENTION __attribute__ ((cdecl))
    #else /* __i386__ */
        #define STL_API_CONVENTION
    #endif /* __i386__ */
#elif __unix__ || __linux__
    #if defined(__GNUC__) && __GNUC__ >= 4
        #define STL_API STL_CAPI_PREFIX __attribute__ ((visibility ("default")))
    #else
        #define STL_API STL_CAPI_PREFIX
    #endif
    #ifdef __i386__
        #define STL_API_CONVENTION __attribute__ ((cdecl))
    #else /* __i386__ */
        #define STL_API_CONVENTION
    #endif /* __i386__ */
#else
    #error "Unknown platform"
#endif

#define STL_MAJOR_VERSION 1
#define STL_MINOR_VERSION 0
#define STL_PATCH_VERSION 0

#ifdef __cplusplus
    #ifdef _MSC_VER
        #if _MSC_VER >= 1900
            #define STL_NOEXCEPT noexcept
        #else /* _MSC_VER >= 1900 */
            #define STL_NOEXCEPT
        #endif /* _MSC_VER >= 1900 */
        #if _MSC_VER >= 1600
            #define STL_CPP_COMPILER_HAS_RVALUE_REFERENCES
        #endif /* _MSC_VER >= 1600 */
        #if _MSC_VER >= 1800
            #define STL_CPP_COMPILER_HAS_MOVE_CONSTRUCTOR_DELETE
        #endif /* _MSC_VER >= 1800 */
    #else /* _MSC_VER */
        #if __cplusplus >= 201103L
            #define STL_NOEXCEPT noexcept
            #define STL_CPP_COMPILER_HAS_RVALUE_REFERENCES
            #define STL_CPP_COMPILER_HAS_MOVE_CONSTRUCTOR_DELETE
        #else /* __cplusplus >= 201103L */
            #define STL_NOEXCEPT
        #endif /* __cplusplus >= 201103L */
    #endif /* _MSC_VER */
#endif /* __cplusplus */

#ifndef STL_CAPI_USE_DYNAMIC_LOADER

    STL_API double STL_API_CONVENTION stl_sin_degree(beautiful_capi_implementationcode_exception_info_t* exception_info, double angle_in_degree);
    STL_API int STL_API_CONVENTION stl_get_major_version();
    STL_API int STL_API_CONVENTION stl_get_minor_version();
    STL_API int STL_API_CONVENTION stl_get_patch_version();
    STL_API void* STL_API_CONVENTION stl_exception_range_error(beautiful_capi_implementationcode_exception_info_t* exception_info, void* error_text);
    STL_API const char* STL_API_CONVENTION stl_exception_what_const(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    STL_API void* STL_API_CONVENTION stl_exception_copy(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    STL_API void STL_API_CONVENTION stl_exception_delete(void* object_pointer);
    STL_API void* STL_API_CONVENTION stl_string_from_cstr(beautiful_capi_implementationcode_exception_info_t* exception_info, const char* value);
    STL_API size_t STL_API_CONVENTION stl_string_get_size_const(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    STL_API const char* STL_API_CONVENTION stl_string_cstr_const(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    STL_API void STL_API_CONVENTION stl_string_set_value(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, const char* value);
    STL_API void* STL_API_CONVENTION stl_string_copy(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    STL_API void STL_API_CONVENTION stl_string_delete(void* object_pointer);
    STL_API void* STL_API_CONVENTION stl_person_default(beautiful_capi_implementationcode_exception_info_t* exception_info);
    STL_API unsigned int STL_API_CONVENTION stl_person_get_age_const(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    STL_API void STL_API_CONVENTION stl_person_set_age(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, unsigned int age);
    STL_API void* STL_API_CONVENTION stl_person_get_first_name_const(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    STL_API void STL_API_CONVENTION stl_person_set_first_name(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, void* first_name);
    STL_API void* STL_API_CONVENTION stl_person_get_second_name_const(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    STL_API void STL_API_CONVENTION stl_person_set_second_name(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, void* second_name);
    STL_API void* STL_API_CONVENTION stl_person_copy(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    STL_API void STL_API_CONVENTION stl_person_delete(void* object_pointer);
    STL_API void* STL_API_CONVENTION stl_community_default(beautiful_capi_implementationcode_exception_info_t* exception_info);
    STL_API void* STL_API_CONVENTION stl_community_members(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    STL_API void* STL_API_CONVENTION stl_community_get_title_const(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    STL_API void STL_API_CONVENTION stl_community_set_title(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, void* title);
    STL_API void* STL_API_CONVENTION stl_community_get_members_const(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    STL_API void STL_API_CONVENTION stl_community_set_members(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, void* members);
    STL_API void* STL_API_CONVENTION stl_community_copy(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    STL_API void STL_API_CONVENTION stl_community_delete(void* object_pointer);
    STL_API void* STL_API_CONVENTION stl_vector_int_default(beautiful_capi_implementationcode_exception_info_t* exception_info);
    STL_API size_t STL_API_CONVENTION stl_vector_int_get_size_const(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    STL_API int STL_API_CONVENTION stl_vector_int_get_element_const(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, size_t index);
    STL_API void STL_API_CONVENTION stl_vector_int_set_element(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, size_t index, int value);
    STL_API void STL_API_CONVENTION stl_vector_int_push_back(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, int value);
    STL_API void* STL_API_CONVENTION stl_vector_int_copy(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    STL_API void STL_API_CONVENTION stl_vector_int_delete(void* object_pointer);
    STL_API void* STL_API_CONVENTION stl_vector_char_default(beautiful_capi_implementationcode_exception_info_t* exception_info);
    STL_API size_t STL_API_CONVENTION stl_vector_char_get_size_const(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    STL_API char STL_API_CONVENTION stl_vector_char_get_element_const(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, size_t index);
    STL_API void STL_API_CONVENTION stl_vector_char_set_element(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, size_t index, char value);
    STL_API void STL_API_CONVENTION stl_vector_char_push_back(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, char value);
    STL_API void* STL_API_CONVENTION stl_vector_char_copy(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    STL_API void STL_API_CONVENTION stl_vector_char_delete(void* object_pointer);
    STL_API void* STL_API_CONVENTION stl_vector_double_default(beautiful_capi_implementationcode_exception_info_t* exception_info);
    STL_API size_t STL_API_CONVENTION stl_vector_double_get_size_const(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    STL_API double STL_API_CONVENTION stl_vector_double_get_element_const(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, size_t index);
    STL_API void STL_API_CONVENTION stl_vector_double_set_element(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, size_t index, double value);
    STL_API void STL_API_CONVENTION stl_vector_double_push_back(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, double value);
    STL_API void* STL_API_CONVENTION stl_vector_double_copy(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    STL_API void STL_API_CONVENTION stl_vector_double_delete(void* object_pointer);
    STL_API void* STL_API_CONVENTION stl_vector_of_structures_stl_person_default(beautiful_capi_implementationcode_exception_info_t* exception_info);
    STL_API size_t STL_API_CONVENTION stl_vector_of_structures_stl_person_get_size_const(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    STL_API void* STL_API_CONVENTION stl_vector_of_structures_stl_person_get_element_const(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, size_t index);
    STL_API void* STL_API_CONVENTION stl_vector_of_structures_stl_person_element_const(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, size_t index);
    STL_API void STL_API_CONVENTION stl_vector_of_structures_stl_person_set_element(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, size_t index, void* value);
    STL_API void STL_API_CONVENTION stl_vector_of_structures_stl_person_push_back(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, void* value);
    STL_API void* STL_API_CONVENTION stl_vector_of_structures_stl_person_copy(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    STL_API void STL_API_CONVENTION stl_vector_of_structures_stl_person_delete(void* object_pointer);
    STL_API void* STL_API_CONVENTION stl_person_raw_ptr_default(beautiful_capi_implementationcode_exception_info_t* exception_info);
    STL_API unsigned int STL_API_CONVENTION stl_person_raw_ptr_get_age_const(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    STL_API void STL_API_CONVENTION stl_person_raw_ptr_set_age(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, unsigned int age);
    STL_API void* STL_API_CONVENTION stl_person_raw_ptr_get_first_name_const(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    STL_API void STL_API_CONVENTION stl_person_raw_ptr_set_first_name(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, void* first_name);
    STL_API void* STL_API_CONVENTION stl_person_raw_ptr_get_second_name_const(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    STL_API void STL_API_CONVENTION stl_person_raw_ptr_set_second_name(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, void* second_name);
    STL_API void STL_API_CONVENTION stl_person_raw_ptr_delete(void* object_pointer);
    STL_API void* STL_API_CONVENTION stl_vector_of_structures_raw_ptr_stl_person_default(beautiful_capi_implementationcode_exception_info_t* exception_info);
    STL_API size_t STL_API_CONVENTION stl_vector_of_structures_raw_ptr_stl_person_get_size_const(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    STL_API void* STL_API_CONVENTION stl_vector_of_structures_raw_ptr_stl_person_get_element_const(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, size_t index);
    STL_API void* STL_API_CONVENTION stl_vector_of_structures_raw_ptr_stl_person_element_const(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, size_t index);
    STL_API void STL_API_CONVENTION stl_vector_of_structures_raw_ptr_stl_person_set_element(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, size_t index, void* value);
    STL_API void STL_API_CONVENTION stl_vector_of_structures_raw_ptr_stl_person_push_back(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, void* value);
    STL_API void STL_API_CONVENTION stl_vector_of_structures_raw_ptr_stl_person_delete(void* object_pointer);

    #ifdef __cplusplus

    #include <stdexcept>
    #include <sstream>

    namespace STL
    {
        class Initialization
        {
        public:
            Initialization()
            {
                const int major_version = stl_get_major_version();
                const int minor_version = stl_get_minor_version();
                const int patch_version = stl_get_patch_version();
                if (major_version != STL_MAJOR_VERSION || minor_version != STL_MINOR_VERSION || patch_version != STL_PATCH_VERSION)
                {
                    std::stringstream error_message;
                    error_message << "Incorrect version of library. ";
                    error_message << "Expected version is " << STL_MAJOR_VERSION << "." << STL_MINOR_VERSION << "." << STL_PATCH_VERSION << ". ";
                    error_message << "Found version is " << major_version << "." << minor_version << "." << patch_version << ".";
                    throw std::runtime_error(error_message.str());
                }
            }
        };
    }

    #endif /* __cplusplus */

#else /* STL_CAPI_USE_DYNAMIC_LOADER */

    typedef double (STL_API_CONVENTION *stl_sin_degree_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, double angle_in_degree);
    typedef int (STL_API_CONVENTION *stl_get_major_version_function_type)();
    typedef int (STL_API_CONVENTION *stl_get_minor_version_function_type)();
    typedef int (STL_API_CONVENTION *stl_get_patch_version_function_type)();
    typedef void* (STL_API_CONVENTION *stl_exception_range_error_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* error_text);
    typedef const char* (STL_API_CONVENTION *stl_exception_what_const_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    typedef void* (STL_API_CONVENTION *stl_exception_copy_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    typedef void (STL_API_CONVENTION *stl_exception_delete_function_type)(void* object_pointer);
    typedef void* (STL_API_CONVENTION *stl_string_from_cstr_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, const char* value);
    typedef size_t (STL_API_CONVENTION *stl_string_get_size_const_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    typedef const char* (STL_API_CONVENTION *stl_string_cstr_const_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    typedef void (STL_API_CONVENTION *stl_string_set_value_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, const char* value);
    typedef void* (STL_API_CONVENTION *stl_string_copy_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    typedef void (STL_API_CONVENTION *stl_string_delete_function_type)(void* object_pointer);
    typedef void* (STL_API_CONVENTION *stl_person_default_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info);
    typedef unsigned int (STL_API_CONVENTION *stl_person_get_age_const_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    typedef void (STL_API_CONVENTION *stl_person_set_age_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, unsigned int age);
    typedef void* (STL_API_CONVENTION *stl_person_get_first_name_const_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    typedef void (STL_API_CONVENTION *stl_person_set_first_name_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, void* first_name);
    typedef void* (STL_API_CONVENTION *stl_person_get_second_name_const_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    typedef void (STL_API_CONVENTION *stl_person_set_second_name_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, void* second_name);
    typedef void* (STL_API_CONVENTION *stl_person_copy_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    typedef void (STL_API_CONVENTION *stl_person_delete_function_type)(void* object_pointer);
    typedef void* (STL_API_CONVENTION *stl_community_default_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info);
    typedef void* (STL_API_CONVENTION *stl_community_members_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    typedef void* (STL_API_CONVENTION *stl_community_get_title_const_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    typedef void (STL_API_CONVENTION *stl_community_set_title_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, void* title);
    typedef void* (STL_API_CONVENTION *stl_community_get_members_const_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    typedef void (STL_API_CONVENTION *stl_community_set_members_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, void* members);
    typedef void* (STL_API_CONVENTION *stl_community_copy_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    typedef void (STL_API_CONVENTION *stl_community_delete_function_type)(void* object_pointer);
    typedef void* (STL_API_CONVENTION *stl_vector_int_default_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info);
    typedef size_t (STL_API_CONVENTION *stl_vector_int_get_size_const_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    typedef int (STL_API_CONVENTION *stl_vector_int_get_element_const_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, size_t index);
    typedef void (STL_API_CONVENTION *stl_vector_int_set_element_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, size_t index, int value);
    typedef void (STL_API_CONVENTION *stl_vector_int_push_back_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, int value);
    typedef void* (STL_API_CONVENTION *stl_vector_int_copy_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    typedef void (STL_API_CONVENTION *stl_vector_int_delete_function_type)(void* object_pointer);
    typedef void* (STL_API_CONVENTION *stl_vector_char_default_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info);
    typedef size_t (STL_API_CONVENTION *stl_vector_char_get_size_const_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    typedef char (STL_API_CONVENTION *stl_vector_char_get_element_const_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, size_t index);
    typedef void (STL_API_CONVENTION *stl_vector_char_set_element_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, size_t index, char value);
    typedef void (STL_API_CONVENTION *stl_vector_char_push_back_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, char value);
    typedef void* (STL_API_CONVENTION *stl_vector_char_copy_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    typedef void (STL_API_CONVENTION *stl_vector_char_delete_function_type)(void* object_pointer);
    typedef void* (STL_API_CONVENTION *stl_vector_double_default_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info);
    typedef size_t (STL_API_CONVENTION *stl_vector_double_get_size_const_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    typedef double (STL_API_CONVENTION *stl_vector_double_get_element_const_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, size_t index);
    typedef void (STL_API_CONVENTION *stl_vector_double_set_element_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, size_t index, double value);
    typedef void (STL_API_CONVENTION *stl_vector_double_push_back_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, double value);
    typedef void* (STL_API_CONVENTION *stl_vector_double_copy_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    typedef void (STL_API_CONVENTION *stl_vector_double_delete_function_type)(void* object_pointer);
    typedef void* (STL_API_CONVENTION *stl_vector_of_structures_stl_person_default_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info);
    typedef size_t (STL_API_CONVENTION *stl_vector_of_structures_stl_person_get_size_const_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    typedef void* (STL_API_CONVENTION *stl_vector_of_structures_stl_person_get_element_const_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, size_t index);
    typedef void* (STL_API_CONVENTION *stl_vector_of_structures_stl_person_element_const_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, size_t index);
    typedef void (STL_API_CONVENTION *stl_vector_of_structures_stl_person_set_element_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, size_t index, void* value);
    typedef void (STL_API_CONVENTION *stl_vector_of_structures_stl_person_push_back_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, void* value);
    typedef void* (STL_API_CONVENTION *stl_vector_of_structures_stl_person_copy_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    typedef void (STL_API_CONVENTION *stl_vector_of_structures_stl_person_delete_function_type)(void* object_pointer);
    typedef void* (STL_API_CONVENTION *stl_person_raw_ptr_default_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info);
    typedef unsigned int (STL_API_CONVENTION *stl_person_raw_ptr_get_age_const_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    typedef void (STL_API_CONVENTION *stl_person_raw_ptr_set_age_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, unsigned int age);
    typedef void* (STL_API_CONVENTION *stl_person_raw_ptr_get_first_name_const_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    typedef void (STL_API_CONVENTION *stl_person_raw_ptr_set_first_name_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, void* first_name);
    typedef void* (STL_API_CONVENTION *stl_person_raw_ptr_get_second_name_const_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    typedef void (STL_API_CONVENTION *stl_person_raw_ptr_set_second_name_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, void* second_name);
    typedef void (STL_API_CONVENTION *stl_person_raw_ptr_delete_function_type)(void* object_pointer);
    typedef void* (STL_API_CONVENTION *stl_vector_of_structures_raw_ptr_stl_person_default_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info);
    typedef size_t (STL_API_CONVENTION *stl_vector_of_structures_raw_ptr_stl_person_get_size_const_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer);
    typedef void* (STL_API_CONVENTION *stl_vector_of_structures_raw_ptr_stl_person_get_element_const_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, size_t index);
    typedef void* (STL_API_CONVENTION *stl_vector_of_structures_raw_ptr_stl_person_element_const_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, size_t index);
    typedef void (STL_API_CONVENTION *stl_vector_of_structures_raw_ptr_stl_person_set_element_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, size_t index, void* value);
    typedef void (STL_API_CONVENTION *stl_vector_of_structures_raw_ptr_stl_person_push_back_function_type)(beautiful_capi_implementationcode_exception_info_t* exception_info, void* object_pointer, void* value);
    typedef void (STL_API_CONVENTION *stl_vector_of_structures_raw_ptr_stl_person_delete_function_type)(void* object_pointer);

    #ifdef STL_CAPI_DEFINE_FUNCTION_POINTERS

        #ifdef stl_sin_degree_define_function_pointer_var
            stl_sin_degree_define_function_pointer_var
        #else
            stl_sin_degree_function_type stl_sin_degree = 0;
        #endif
        #ifdef stl_get_major_version_define_function_pointer_var
            stl_get_major_version_define_function_pointer_var
        #else
            stl_get_major_version_function_type stl_get_major_version = 0;
        #endif
        #ifdef stl_get_minor_version_define_function_pointer_var
            stl_get_minor_version_define_function_pointer_var
        #else
            stl_get_minor_version_function_type stl_get_minor_version = 0;
        #endif
        #ifdef stl_get_patch_version_define_function_pointer_var
            stl_get_patch_version_define_function_pointer_var
        #else
            stl_get_patch_version_function_type stl_get_patch_version = 0;
        #endif
        #ifdef stl_exception_range_error_define_function_pointer_var
            stl_exception_range_error_define_function_pointer_var
        #else
            stl_exception_range_error_function_type stl_exception_range_error = 0;
        #endif
        #ifdef stl_exception_what_const_define_function_pointer_var
            stl_exception_what_const_define_function_pointer_var
        #else
            stl_exception_what_const_function_type stl_exception_what_const = 0;
        #endif
        #ifdef stl_exception_copy_define_function_pointer_var
            stl_exception_copy_define_function_pointer_var
        #else
            stl_exception_copy_function_type stl_exception_copy = 0;
        #endif
        #ifdef stl_exception_delete_define_function_pointer_var
            stl_exception_delete_define_function_pointer_var
        #else
            stl_exception_delete_function_type stl_exception_delete = 0;
        #endif
        #ifdef stl_string_from_cstr_define_function_pointer_var
            stl_string_from_cstr_define_function_pointer_var
        #else
            stl_string_from_cstr_function_type stl_string_from_cstr = 0;
        #endif
        #ifdef stl_string_get_size_const_define_function_pointer_var
            stl_string_get_size_const_define_function_pointer_var
        #else
            stl_string_get_size_const_function_type stl_string_get_size_const = 0;
        #endif
        #ifdef stl_string_cstr_const_define_function_pointer_var
            stl_string_cstr_const_define_function_pointer_var
        #else
            stl_string_cstr_const_function_type stl_string_cstr_const = 0;
        #endif
        #ifdef stl_string_set_value_define_function_pointer_var
            stl_string_set_value_define_function_pointer_var
        #else
            stl_string_set_value_function_type stl_string_set_value = 0;
        #endif
        #ifdef stl_string_copy_define_function_pointer_var
            stl_string_copy_define_function_pointer_var
        #else
            stl_string_copy_function_type stl_string_copy = 0;
        #endif
        #ifdef stl_string_delete_define_function_pointer_var
            stl_string_delete_define_function_pointer_var
        #else
            stl_string_delete_function_type stl_string_delete = 0;
        #endif
        #ifdef stl_person_default_define_function_pointer_var
            stl_person_default_define_function_pointer_var
        #else
            stl_person_default_function_type stl_person_default = 0;
        #endif
        #ifdef stl_person_get_age_const_define_function_pointer_var
            stl_person_get_age_const_define_function_pointer_var
        #else
            stl_person_get_age_const_function_type stl_person_get_age_const = 0;
        #endif
        #ifdef stl_person_set_age_define_function_pointer_var
            stl_person_set_age_define_function_pointer_var
        #else
            stl_person_set_age_function_type stl_person_set_age = 0;
        #endif
        #ifdef stl_person_get_first_name_const_define_function_pointer_var
            stl_person_get_first_name_const_define_function_pointer_var
        #else
            stl_person_get_first_name_const_function_type stl_person_get_first_name_const = 0;
        #endif
        #ifdef stl_person_set_first_name_define_function_pointer_var
            stl_person_set_first_name_define_function_pointer_var
        #else
            stl_person_set_first_name_function_type stl_person_set_first_name = 0;
        #endif
        #ifdef stl_person_get_second_name_const_define_function_pointer_var
            stl_person_get_second_name_const_define_function_pointer_var
        #else
            stl_person_get_second_name_const_function_type stl_person_get_second_name_const = 0;
        #endif
        #ifdef stl_person_set_second_name_define_function_pointer_var
            stl_person_set_second_name_define_function_pointer_var
        #else
            stl_person_set_second_name_function_type stl_person_set_second_name = 0;
        #endif
        #ifdef stl_person_copy_define_function_pointer_var
            stl_person_copy_define_function_pointer_var
        #else
            stl_person_copy_function_type stl_person_copy = 0;
        #endif
        #ifdef stl_person_delete_define_function_pointer_var
            stl_person_delete_define_function_pointer_var
        #else
            stl_person_delete_function_type stl_person_delete = 0;
        #endif
        #ifdef stl_community_default_define_function_pointer_var
            stl_community_default_define_function_pointer_var
        #else
            stl_community_default_function_type stl_community_default = 0;
        #endif
        #ifdef stl_community_members_define_function_pointer_var
            stl_community_members_define_function_pointer_var
        #else
            stl_community_members_function_type stl_community_members = 0;
        #endif
        #ifdef stl_community_get_title_const_define_function_pointer_var
            stl_community_get_title_const_define_function_pointer_var
        #else
            stl_community_get_title_const_function_type stl_community_get_title_const = 0;
        #endif
        #ifdef stl_community_set_title_define_function_pointer_var
            stl_community_set_title_define_function_pointer_var
        #else
            stl_community_set_title_function_type stl_community_set_title = 0;
        #endif
        #ifdef stl_community_get_members_const_define_function_pointer_var
            stl_community_get_members_const_define_function_pointer_var
        #else
            stl_community_get_members_const_function_type stl_community_get_members_const = 0;
        #endif
        #ifdef stl_community_set_members_define_function_pointer_var
            stl_community_set_members_define_function_pointer_var
        #else
            stl_community_set_members_function_type stl_community_set_members = 0;
        #endif
        #ifdef stl_community_copy_define_function_pointer_var
            stl_community_copy_define_function_pointer_var
        #else
            stl_community_copy_function_type stl_community_copy = 0;
        #endif
        #ifdef stl_community_delete_define_function_pointer_var
            stl_community_delete_define_function_pointer_var
        #else
            stl_community_delete_function_type stl_community_delete = 0;
        #endif
        #ifdef stl_vector_int_default_define_function_pointer_var
            stl_vector_int_default_define_function_pointer_var
        #else
            stl_vector_int_default_function_type stl_vector_int_default = 0;
        #endif
        #ifdef stl_vector_int_get_size_const_define_function_pointer_var
            stl_vector_int_get_size_const_define_function_pointer_var
        #else
            stl_vector_int_get_size_const_function_type stl_vector_int_get_size_const = 0;
        #endif
        #ifdef stl_vector_int_get_element_const_define_function_pointer_var
            stl_vector_int_get_element_const_define_function_pointer_var
        #else
            stl_vector_int_get_element_const_function_type stl_vector_int_get_element_const = 0;
        #endif
        #ifdef stl_vector_int_set_element_define_function_pointer_var
            stl_vector_int_set_element_define_function_pointer_var
        #else
            stl_vector_int_set_element_function_type stl_vector_int_set_element = 0;
        #endif
        #ifdef stl_vector_int_push_back_define_function_pointer_var
            stl_vector_int_push_back_define_function_pointer_var
        #else
            stl_vector_int_push_back_function_type stl_vector_int_push_back = 0;
        #endif
        #ifdef stl_vector_int_copy_define_function_pointer_var
            stl_vector_int_copy_define_function_pointer_var
        #else
            stl_vector_int_copy_function_type stl_vector_int_copy = 0;
        #endif
        #ifdef stl_vector_int_delete_define_function_pointer_var
            stl_vector_int_delete_define_function_pointer_var
        #else
            stl_vector_int_delete_function_type stl_vector_int_delete = 0;
        #endif
        #ifdef stl_vector_char_default_define_function_pointer_var
            stl_vector_char_default_define_function_pointer_var
        #else
            stl_vector_char_default_function_type stl_vector_char_default = 0;
        #endif
        #ifdef stl_vector_char_get_size_const_define_function_pointer_var
            stl_vector_char_get_size_const_define_function_pointer_var
        #else
            stl_vector_char_get_size_const_function_type stl_vector_char_get_size_const = 0;
        #endif
        #ifdef stl_vector_char_get_element_const_define_function_pointer_var
            stl_vector_char_get_element_const_define_function_pointer_var
        #else
            stl_vector_char_get_element_const_function_type stl_vector_char_get_element_const = 0;
        #endif
        #ifdef stl_vector_char_set_element_define_function_pointer_var
            stl_vector_char_set_element_define_function_pointer_var
        #else
            stl_vector_char_set_element_function_type stl_vector_char_set_element = 0;
        #endif
        #ifdef stl_vector_char_push_back_define_function_pointer_var
            stl_vector_char_push_back_define_function_pointer_var
        #else
            stl_vector_char_push_back_function_type stl_vector_char_push_back = 0;
        #endif
        #ifdef stl_vector_char_copy_define_function_pointer_var
            stl_vector_char_copy_define_function_pointer_var
        #else
            stl_vector_char_copy_function_type stl_vector_char_copy = 0;
        #endif
        #ifdef stl_vector_char_delete_define_function_pointer_var
            stl_vector_char_delete_define_function_pointer_var
        #else
            stl_vector_char_delete_function_type stl_vector_char_delete = 0;
        #endif
        #ifdef stl_vector_double_default_define_function_pointer_var
            stl_vector_double_default_define_function_pointer_var
        #else
            stl_vector_double_default_function_type stl_vector_double_default = 0;
        #endif
        #ifdef stl_vector_double_get_size_const_define_function_pointer_var
            stl_vector_double_get_size_const_define_function_pointer_var
        #else
            stl_vector_double_get_size_const_function_type stl_vector_double_get_size_const = 0;
        #endif
        #ifdef stl_vector_double_get_element_const_define_function_pointer_var
            stl_vector_double_get_element_const_define_function_pointer_var
        #else
            stl_vector_double_get_element_const_function_type stl_vector_double_get_element_const = 0;
        #endif
        #ifdef stl_vector_double_set_element_define_function_pointer_var
            stl_vector_double_set_element_define_function_pointer_var
        #else
            stl_vector_double_set_element_function_type stl_vector_double_set_element = 0;
        #endif
        #ifdef stl_vector_double_push_back_define_function_pointer_var
            stl_vector_double_push_back_define_function_pointer_var
        #else
            stl_vector_double_push_back_function_type stl_vector_double_push_back = 0;
        #endif
        #ifdef stl_vector_double_copy_define_function_pointer_var
            stl_vector_double_copy_define_function_pointer_var
        #else
            stl_vector_double_copy_function_type stl_vector_double_copy = 0;
        #endif
        #ifdef stl_vector_double_delete_define_function_pointer_var
            stl_vector_double_delete_define_function_pointer_var
        #else
            stl_vector_double_delete_function_type stl_vector_double_delete = 0;
        #endif
        #ifdef stl_vector_of_structures_stl_person_default_define_function_pointer_var
            stl_vector_of_structures_stl_person_default_define_function_pointer_var
        #else
            stl_vector_of_structures_stl_person_default_function_type stl_vector_of_structures_stl_person_default = 0;
        #endif
        #ifdef stl_vector_of_structures_stl_person_get_size_const_define_function_pointer_var
            stl_vector_of_structures_stl_person_get_size_const_define_function_pointer_var
        #else
            stl_vector_of_structures_stl_person_get_size_const_function_type stl_vector_of_structures_stl_person_get_size_const = 0;
        #endif
        #ifdef stl_vector_of_structures_stl_person_get_element_const_define_function_pointer_var
            stl_vector_of_structures_stl_person_get_element_const_define_function_pointer_var
        #else
            stl_vector_of_structures_stl_person_get_element_const_function_type stl_vector_of_structures_stl_person_get_element_const = 0;
        #endif
        #ifdef stl_vector_of_structures_stl_person_element_const_define_function_pointer_var
            stl_vector_of_structures_stl_person_element_const_define_function_pointer_var
        #else
            stl_vector_of_structures_stl_person_element_const_function_type stl_vector_of_structures_stl_person_element_const = 0;
        #endif
        #ifdef stl_vector_of_structures_stl_person_set_element_define_function_pointer_var
            stl_vector_of_structures_stl_person_set_element_define_function_pointer_var
        #else
            stl_vector_of_structures_stl_person_set_element_function_type stl_vector_of_structures_stl_person_set_element = 0;
        #endif
        #ifdef stl_vector_of_structures_stl_person_push_back_define_function_pointer_var
            stl_vector_of_structures_stl_person_push_back_define_function_pointer_var
        #else
            stl_vector_of_structures_stl_person_push_back_function_type stl_vector_of_structures_stl_person_push_back = 0;
        #endif
        #ifdef stl_vector_of_structures_stl_person_copy_define_function_pointer_var
            stl_vector_of_structures_stl_person_copy_define_function_pointer_var
        #else
            stl_vector_of_structures_stl_person_copy_function_type stl_vector_of_structures_stl_person_copy = 0;
        #endif
        #ifdef stl_vector_of_structures_stl_person_delete_define_function_pointer_var
            stl_vector_of_structures_stl_person_delete_define_function_pointer_var
        #else
            stl_vector_of_structures_stl_person_delete_function_type stl_vector_of_structures_stl_person_delete = 0;
        #endif
        #ifdef stl_person_raw_ptr_default_define_function_pointer_var
            stl_person_raw_ptr_default_define_function_pointer_var
        #else
            stl_person_raw_ptr_default_function_type stl_person_raw_ptr_default = 0;
        #endif
        #ifdef stl_person_raw_ptr_get_age_const_define_function_pointer_var
            stl_person_raw_ptr_get_age_const_define_function_pointer_var
        #else
            stl_person_raw_ptr_get_age_const_function_type stl_person_raw_ptr_get_age_const = 0;
        #endif
        #ifdef stl_person_raw_ptr_set_age_define_function_pointer_var
            stl_person_raw_ptr_set_age_define_function_pointer_var
        #else
            stl_person_raw_ptr_set_age_function_type stl_person_raw_ptr_set_age = 0;
        #endif
        #ifdef stl_person_raw_ptr_get_first_name_const_define_function_pointer_var
            stl_person_raw_ptr_get_first_name_const_define_function_pointer_var
        #else
            stl_person_raw_ptr_get_first_name_const_function_type stl_person_raw_ptr_get_first_name_const = 0;
        #endif
        #ifdef stl_person_raw_ptr_set_first_name_define_function_pointer_var
            stl_person_raw_ptr_set_first_name_define_function_pointer_var
        #else
            stl_person_raw_ptr_set_first_name_function_type stl_person_raw_ptr_set_first_name = 0;
        #endif
        #ifdef stl_person_raw_ptr_get_second_name_const_define_function_pointer_var
            stl_person_raw_ptr_get_second_name_const_define_function_pointer_var
        #else
            stl_person_raw_ptr_get_second_name_const_function_type stl_person_raw_ptr_get_second_name_const = 0;
        #endif
        #ifdef stl_person_raw_ptr_set_second_name_define_function_pointer_var
            stl_person_raw_ptr_set_second_name_define_function_pointer_var
        #else
            stl_person_raw_ptr_set_second_name_function_type stl_person_raw_ptr_set_second_name = 0;
        #endif
        #ifdef stl_person_raw_ptr_delete_define_function_pointer_var
            stl_person_raw_ptr_delete_define_function_pointer_var
        #else
            stl_person_raw_ptr_delete_function_type stl_person_raw_ptr_delete = 0;
        #endif
        #ifdef stl_vector_of_structures_raw_ptr_stl_person_default_define_function_pointer_var
            stl_vector_of_structures_raw_ptr_stl_person_default_define_function_pointer_var
        #else
            stl_vector_of_structures_raw_ptr_stl_person_default_function_type stl_vector_of_structures_raw_ptr_stl_person_default = 0;
        #endif
        #ifdef stl_vector_of_structures_raw_ptr_stl_person_get_size_const_define_function_pointer_var
            stl_vector_of_structures_raw_ptr_stl_person_get_size_const_define_function_pointer_var
        #else
            stl_vector_of_structures_raw_ptr_stl_person_get_size_const_function_type stl_vector_of_structures_raw_ptr_stl_person_get_size_const = 0;
        #endif
        #ifdef stl_vector_of_structures_raw_ptr_stl_person_get_element_const_define_function_pointer_var
            stl_vector_of_structures_raw_ptr_stl_person_get_element_const_define_function_pointer_var
        #else
            stl_vector_of_structures_raw_ptr_stl_person_get_element_const_function_type stl_vector_of_structures_raw_ptr_stl_person_get_element_const = 0;
        #endif
        #ifdef stl_vector_of_structures_raw_ptr_stl_person_element_const_define_function_pointer_var
            stl_vector_of_structures_raw_ptr_stl_person_element_const_define_function_pointer_var
        #else
            stl_vector_of_structures_raw_ptr_stl_person_element_const_function_type stl_vector_of_structures_raw_ptr_stl_person_element_const = 0;
        #endif
        #ifdef stl_vector_of_structures_raw_ptr_stl_person_set_element_define_function_pointer_var
            stl_vector_of_structures_raw_ptr_stl_person_set_element_define_function_pointer_var
        #else
            stl_vector_of_structures_raw_ptr_stl_person_set_element_function_type stl_vector_of_structures_raw_ptr_stl_person_set_element = 0;
        #endif
        #ifdef stl_vector_of_structures_raw_ptr_stl_person_push_back_define_function_pointer_var
            stl_vector_of_structures_raw_ptr_stl_person_push_back_define_function_pointer_var
        #else
            stl_vector_of_structures_raw_ptr_stl_person_push_back_function_type stl_vector_of_structures_raw_ptr_stl_person_push_back = 0;
        #endif
        #ifdef stl_vector_of_structures_raw_ptr_stl_person_delete_define_function_pointer_var
            stl_vector_of_structures_raw_ptr_stl_person_delete_define_function_pointer_var
        #else
            stl_vector_of_structures_raw_ptr_stl_person_delete_function_type stl_vector_of_structures_raw_ptr_stl_person_delete = 0;
        #endif

    #else /* STL_CAPI_DEFINE_FUNCTION_POINTERS */

        extern stl_sin_degree_function_type stl_sin_degree;
        extern stl_get_major_version_function_type stl_get_major_version;
        extern stl_get_minor_version_function_type stl_get_minor_version;
        extern stl_get_patch_version_function_type stl_get_patch_version;
        extern stl_exception_range_error_function_type stl_exception_range_error;
        extern stl_exception_what_const_function_type stl_exception_what_const;
        extern stl_exception_copy_function_type stl_exception_copy;
        extern stl_exception_delete_function_type stl_exception_delete;
        extern stl_string_from_cstr_function_type stl_string_from_cstr;
        extern stl_string_get_size_const_function_type stl_string_get_size_const;
        extern stl_string_cstr_const_function_type stl_string_cstr_const;
        extern stl_string_set_value_function_type stl_string_set_value;
        extern stl_string_copy_function_type stl_string_copy;
        extern stl_string_delete_function_type stl_string_delete;
        extern stl_person_default_function_type stl_person_default;
        extern stl_person_get_age_const_function_type stl_person_get_age_const;
        extern stl_person_set_age_function_type stl_person_set_age;
        extern stl_person_get_first_name_const_function_type stl_person_get_first_name_const;
        extern stl_person_set_first_name_function_type stl_person_set_first_name;
        extern stl_person_get_second_name_const_function_type stl_person_get_second_name_const;
        extern stl_person_set_second_name_function_type stl_person_set_second_name;
        extern stl_person_copy_function_type stl_person_copy;
        extern stl_person_delete_function_type stl_person_delete;
        extern stl_community_default_function_type stl_community_default;
        extern stl_community_members_function_type stl_community_members;
        extern stl_community_get_title_const_function_type stl_community_get_title_const;
        extern stl_community_set_title_function_type stl_community_set_title;
        extern stl_community_get_members_const_function_type stl_community_get_members_const;
        extern stl_community_set_members_function_type stl_community_set_members;
        extern stl_community_copy_function_type stl_community_copy;
        extern stl_community_delete_function_type stl_community_delete;
        extern stl_vector_int_default_function_type stl_vector_int_default;
        extern stl_vector_int_get_size_const_function_type stl_vector_int_get_size_const;
        extern stl_vector_int_get_element_const_function_type stl_vector_int_get_element_const;
        extern stl_vector_int_set_element_function_type stl_vector_int_set_element;
        extern stl_vector_int_push_back_function_type stl_vector_int_push_back;
        extern stl_vector_int_copy_function_type stl_vector_int_copy;
        extern stl_vector_int_delete_function_type stl_vector_int_delete;
        extern stl_vector_char_default_function_type stl_vector_char_default;
        extern stl_vector_char_get_size_const_function_type stl_vector_char_get_size_const;
        extern stl_vector_char_get_element_const_function_type stl_vector_char_get_element_const;
        extern stl_vector_char_set_element_function_type stl_vector_char_set_element;
        extern stl_vector_char_push_back_function_type stl_vector_char_push_back;
        extern stl_vector_char_copy_function_type stl_vector_char_copy;
        extern stl_vector_char_delete_function_type stl_vector_char_delete;
        extern stl_vector_double_default_function_type stl_vector_double_default;
        extern stl_vector_double_get_size_const_function_type stl_vector_double_get_size_const;
        extern stl_vector_double_get_element_const_function_type stl_vector_double_get_element_const;
        extern stl_vector_double_set_element_function_type stl_vector_double_set_element;
        extern stl_vector_double_push_back_function_type stl_vector_double_push_back;
        extern stl_vector_double_copy_function_type stl_vector_double_copy;
        extern stl_vector_double_delete_function_type stl_vector_double_delete;
        extern stl_vector_of_structures_stl_person_default_function_type stl_vector_of_structures_stl_person_default;
        extern stl_vector_of_structures_stl_person_get_size_const_function_type stl_vector_of_structures_stl_person_get_size_const;
        extern stl_vector_of_structures_stl_person_get_element_const_function_type stl_vector_of_structures_stl_person_get_element_const;
        extern stl_vector_of_structures_stl_person_element_const_function_type stl_vector_of_structures_stl_person_element_const;
        extern stl_vector_of_structures_stl_person_set_element_function_type stl_vector_of_structures_stl_person_set_element;
        extern stl_vector_of_structures_stl_person_push_back_function_type stl_vector_of_structures_stl_person_push_back;
        extern stl_vector_of_structures_stl_person_copy_function_type stl_vector_of_structures_stl_person_copy;
        extern stl_vector_of_structures_stl_person_delete_function_type stl_vector_of_structures_stl_person_delete;
        extern stl_person_raw_ptr_default_function_type stl_person_raw_ptr_default;
        extern stl_person_raw_ptr_get_age_const_function_type stl_person_raw_ptr_get_age_const;
        extern stl_person_raw_ptr_set_age_function_type stl_person_raw_ptr_set_age;
        extern stl_person_raw_ptr_get_first_name_const_function_type stl_person_raw_ptr_get_first_name_const;
        extern stl_person_raw_ptr_set_first_name_function_type stl_person_raw_ptr_set_first_name;
        extern stl_person_raw_ptr_get_second_name_const_function_type stl_person_raw_ptr_get_second_name_const;
        extern stl_person_raw_ptr_set_second_name_function_type stl_person_raw_ptr_set_second_name;
        extern stl_person_raw_ptr_delete_function_type stl_person_raw_ptr_delete;
        extern stl_vector_of_structures_raw_ptr_stl_person_default_function_type stl_vector_of_structures_raw_ptr_stl_person_default;
        extern stl_vector_of_structures_raw_ptr_stl_person_get_size_const_function_type stl_vector_of_structures_raw_ptr_stl_person_get_size_const;
        extern stl_vector_of_structures_raw_ptr_stl_person_get_element_const_function_type stl_vector_of_structures_raw_ptr_stl_person_get_element_const;
        extern stl_vector_of_structures_raw_ptr_stl_person_element_const_function_type stl_vector_of_structures_raw_ptr_stl_person_element_const;
        extern stl_vector_of_structures_raw_ptr_stl_person_set_element_function_type stl_vector_of_structures_raw_ptr_stl_person_set_element;
        extern stl_vector_of_structures_raw_ptr_stl_person_push_back_function_type stl_vector_of_structures_raw_ptr_stl_person_push_back;
        extern stl_vector_of_structures_raw_ptr_stl_person_delete_function_type stl_vector_of_structures_raw_ptr_stl_person_delete;

    #endif /* STL_CAPI_DEFINE_FUNCTION_POINTERS */

    #ifdef __cplusplus

    #include <stdexcept>
    #include <sstream>

    #ifdef _WIN32
        #include <Windows.h>
    #else /* _WIN32 */
        #include <dlfcn.h>
    #endif /* _WIN32 */

    namespace STL
    {
        class Initialization
        {
            #ifdef _WIN32
                HINSTANCE handle;
            #else /* _WIN32 */
                void* handle;
            #endif /* _WIN32 */

            template<class FunctionPointerType>
            void load_function(FunctionPointerType& to_init, const char* name)
            {
                #ifdef _WIN32
                    to_init = reinterpret_cast<FunctionPointerType>(GetProcAddress(handle, name));
                #else /* _WIN32 */
                    to_init = reinterpret_cast<FunctionPointerType>(dlsym(handle, name));
                #endif /* _WIN32 */
                if (!to_init)
                {
                    std::stringstream error_message;
                    error_message << "Can't obtain function " << name;
                    throw std::runtime_error(error_message.str());
                }
            }

            void load_module(const char* shared_library_name)
            {
                if (!shared_library_name) throw std::runtime_error("Null library name was passed");
                #ifdef _WIN32
                    handle = LoadLibraryA(shared_library_name);
                #else /* _WIN32 */
                    handle = dlopen(shared_library_name, RTLD_NOW);
                #endif /* _WIN32 */
                if (!handle)
                {
                    std::stringstream error_message;
                    error_message << "Can't load shared library " << shared_library_name;
                    throw std::runtime_error(error_message.str());
                }
                #ifdef stl_sin_degree_load_function_call
                    stl_sin_degree_load_function_call
                #else /* stl_sin_degree_load_function_call */
                    load_function<stl_sin_degree_function_type>(stl_sin_degree, "stl_sin_degree");
                #endif /* stl_sin_degree_load_function_call */
                #ifdef stl_get_major_version_load_function_call
                    stl_get_major_version_load_function_call
                #else /* stl_get_major_version_load_function_call */
                    load_function<stl_get_major_version_function_type>(stl_get_major_version, "stl_get_major_version");
                #endif /* stl_get_major_version_load_function_call */
                #ifdef stl_get_minor_version_load_function_call
                    stl_get_minor_version_load_function_call
                #else /* stl_get_minor_version_load_function_call */
                    load_function<stl_get_minor_version_function_type>(stl_get_minor_version, "stl_get_minor_version");
                #endif /* stl_get_minor_version_load_function_call */
                #ifdef stl_get_patch_version_load_function_call
                    stl_get_patch_version_load_function_call
                #else /* stl_get_patch_version_load_function_call */
                    load_function<stl_get_patch_version_function_type>(stl_get_patch_version, "stl_get_patch_version");
                #endif /* stl_get_patch_version_load_function_call */
                #ifdef stl_exception_range_error_load_function_call
                    stl_exception_range_error_load_function_call
                #else /* stl_exception_range_error_load_function_call */
                    load_function<stl_exception_range_error_function_type>(stl_exception_range_error, "stl_exception_range_error");
                #endif /* stl_exception_range_error_load_function_call */
                #ifdef stl_exception_what_const_load_function_call
                    stl_exception_what_const_load_function_call
                #else /* stl_exception_what_const_load_function_call */
                    load_function<stl_exception_what_const_function_type>(stl_exception_what_const, "stl_exception_what_const");
                #endif /* stl_exception_what_const_load_function_call */
                #ifdef stl_exception_copy_load_function_call
                    stl_exception_copy_load_function_call
                #else /* stl_exception_copy_load_function_call */
                    load_function<stl_exception_copy_function_type>(stl_exception_copy, "stl_exception_copy");
                #endif /* stl_exception_copy_load_function_call */
                #ifdef stl_exception_delete_load_function_call
                    stl_exception_delete_load_function_call
                #else /* stl_exception_delete_load_function_call */
                    load_function<stl_exception_delete_function_type>(stl_exception_delete, "stl_exception_delete");
                #endif /* stl_exception_delete_load_function_call */
                #ifdef stl_string_from_cstr_load_function_call
                    stl_string_from_cstr_load_function_call
                #else /* stl_string_from_cstr_load_function_call */
                    load_function<stl_string_from_cstr_function_type>(stl_string_from_cstr, "stl_string_from_cstr");
                #endif /* stl_string_from_cstr_load_function_call */
                #ifdef stl_string_get_size_const_load_function_call
                    stl_string_get_size_const_load_function_call
                #else /* stl_string_get_size_const_load_function_call */
                    load_function<stl_string_get_size_const_function_type>(stl_string_get_size_const, "stl_string_get_size_const");
                #endif /* stl_string_get_size_const_load_function_call */
                #ifdef stl_string_cstr_const_load_function_call
                    stl_string_cstr_const_load_function_call
                #else /* stl_string_cstr_const_load_function_call */
                    load_function<stl_string_cstr_const_function_type>(stl_string_cstr_const, "stl_string_cstr_const");
                #endif /* stl_string_cstr_const_load_function_call */
                #ifdef stl_string_set_value_load_function_call
                    stl_string_set_value_load_function_call
                #else /* stl_string_set_value_load_function_call */
                    load_function<stl_string_set_value_function_type>(stl_string_set_value, "stl_string_set_value");
                #endif /* stl_string_set_value_load_function_call */
                #ifdef stl_string_copy_load_function_call
                    stl_string_copy_load_function_call
                #else /* stl_string_copy_load_function_call */
                    load_function<stl_string_copy_function_type>(stl_string_copy, "stl_string_copy");
                #endif /* stl_string_copy_load_function_call */
                #ifdef stl_string_delete_load_function_call
                    stl_string_delete_load_function_call
                #else /* stl_string_delete_load_function_call */
                    load_function<stl_string_delete_function_type>(stl_string_delete, "stl_string_delete");
                #endif /* stl_string_delete_load_function_call */
                #ifdef stl_person_default_load_function_call
                    stl_person_default_load_function_call
                #else /* stl_person_default_load_function_call */
                    load_function<stl_person_default_function_type>(stl_person_default, "stl_person_default");
                #endif /* stl_person_default_load_function_call */
                #ifdef stl_person_get_age_const_load_function_call
                    stl_person_get_age_const_load_function_call
                #else /* stl_person_get_age_const_load_function_call */
                    load_function<stl_person_get_age_const_function_type>(stl_person_get_age_const, "stl_person_get_age_const");
                #endif /* stl_person_get_age_const_load_function_call */
                #ifdef stl_person_set_age_load_function_call
                    stl_person_set_age_load_function_call
                #else /* stl_person_set_age_load_function_call */
                    load_function<stl_person_set_age_function_type>(stl_person_set_age, "stl_person_set_age");
                #endif /* stl_person_set_age_load_function_call */
                #ifdef stl_person_get_first_name_const_load_function_call
                    stl_person_get_first_name_const_load_function_call
                #else /* stl_person_get_first_name_const_load_function_call */
                    load_function<stl_person_get_first_name_const_function_type>(stl_person_get_first_name_const, "stl_person_get_first_name_const");
                #endif /* stl_person_get_first_name_const_load_function_call */
                #ifdef stl_person_set_first_name_load_function_call
                    stl_person_set_first_name_load_function_call
                #else /* stl_person_set_first_name_load_function_call */
                    load_function<stl_person_set_first_name_function_type>(stl_person_set_first_name, "stl_person_set_first_name");
                #endif /* stl_person_set_first_name_load_function_call */
                #ifdef stl_person_get_second_name_const_load_function_call
                    stl_person_get_second_name_const_load_function_call
                #else /* stl_person_get_second_name_const_load_function_call */
                    load_function<stl_person_get_second_name_const_function_type>(stl_person_get_second_name_const, "stl_person_get_second_name_const");
                #endif /* stl_person_get_second_name_const_load_function_call */
                #ifdef stl_person_set_second_name_load_function_call
                    stl_person_set_second_name_load_function_call
                #else /* stl_person_set_second_name_load_function_call */
                    load_function<stl_person_set_second_name_function_type>(stl_person_set_second_name, "stl_person_set_second_name");
                #endif /* stl_person_set_second_name_load_function_call */
                #ifdef stl_person_copy_load_function_call
                    stl_person_copy_load_function_call
                #else /* stl_person_copy_load_function_call */
                    load_function<stl_person_copy_function_type>(stl_person_copy, "stl_person_copy");
                #endif /* stl_person_copy_load_function_call */
                #ifdef stl_person_delete_load_function_call
                    stl_person_delete_load_function_call
                #else /* stl_person_delete_load_function_call */
                    load_function<stl_person_delete_function_type>(stl_person_delete, "stl_person_delete");
                #endif /* stl_person_delete_load_function_call */
                #ifdef stl_community_default_load_function_call
                    stl_community_default_load_function_call
                #else /* stl_community_default_load_function_call */
                    load_function<stl_community_default_function_type>(stl_community_default, "stl_community_default");
                #endif /* stl_community_default_load_function_call */
                #ifdef stl_community_members_load_function_call
                    stl_community_members_load_function_call
                #else /* stl_community_members_load_function_call */
                    load_function<stl_community_members_function_type>(stl_community_members, "stl_community_members");
                #endif /* stl_community_members_load_function_call */
                #ifdef stl_community_get_title_const_load_function_call
                    stl_community_get_title_const_load_function_call
                #else /* stl_community_get_title_const_load_function_call */
                    load_function<stl_community_get_title_const_function_type>(stl_community_get_title_const, "stl_community_get_title_const");
                #endif /* stl_community_get_title_const_load_function_call */
                #ifdef stl_community_set_title_load_function_call
                    stl_community_set_title_load_function_call
                #else /* stl_community_set_title_load_function_call */
                    load_function<stl_community_set_title_function_type>(stl_community_set_title, "stl_community_set_title");
                #endif /* stl_community_set_title_load_function_call */
                #ifdef stl_community_get_members_const_load_function_call
                    stl_community_get_members_const_load_function_call
                #else /* stl_community_get_members_const_load_function_call */
                    load_function<stl_community_get_members_const_function_type>(stl_community_get_members_const, "stl_community_get_members_const");
                #endif /* stl_community_get_members_const_load_function_call */
                #ifdef stl_community_set_members_load_function_call
                    stl_community_set_members_load_function_call
                #else /* stl_community_set_members_load_function_call */
                    load_function<stl_community_set_members_function_type>(stl_community_set_members, "stl_community_set_members");
                #endif /* stl_community_set_members_load_function_call */
                #ifdef stl_community_copy_load_function_call
                    stl_community_copy_load_function_call
                #else /* stl_community_copy_load_function_call */
                    load_function<stl_community_copy_function_type>(stl_community_copy, "stl_community_copy");
                #endif /* stl_community_copy_load_function_call */
                #ifdef stl_community_delete_load_function_call
                    stl_community_delete_load_function_call
                #else /* stl_community_delete_load_function_call */
                    load_function<stl_community_delete_function_type>(stl_community_delete, "stl_community_delete");
                #endif /* stl_community_delete_load_function_call */
                #ifdef stl_vector_int_default_load_function_call
                    stl_vector_int_default_load_function_call
                #else /* stl_vector_int_default_load_function_call */
                    load_function<stl_vector_int_default_function_type>(stl_vector_int_default, "stl_vector_int_default");
                #endif /* stl_vector_int_default_load_function_call */
                #ifdef stl_vector_int_get_size_const_load_function_call
                    stl_vector_int_get_size_const_load_function_call
                #else /* stl_vector_int_get_size_const_load_function_call */
                    load_function<stl_vector_int_get_size_const_function_type>(stl_vector_int_get_size_const, "stl_vector_int_get_size_const");
                #endif /* stl_vector_int_get_size_const_load_function_call */
                #ifdef stl_vector_int_get_element_const_load_function_call
                    stl_vector_int_get_element_const_load_function_call
                #else /* stl_vector_int_get_element_const_load_function_call */
                    load_function<stl_vector_int_get_element_const_function_type>(stl_vector_int_get_element_const, "stl_vector_int_get_element_const");
                #endif /* stl_vector_int_get_element_const_load_function_call */
                #ifdef stl_vector_int_set_element_load_function_call
                    stl_vector_int_set_element_load_function_call
                #else /* stl_vector_int_set_element_load_function_call */
                    load_function<stl_vector_int_set_element_function_type>(stl_vector_int_set_element, "stl_vector_int_set_element");
                #endif /* stl_vector_int_set_element_load_function_call */
                #ifdef stl_vector_int_push_back_load_function_call
                    stl_vector_int_push_back_load_function_call
                #else /* stl_vector_int_push_back_load_function_call */
                    load_function<stl_vector_int_push_back_function_type>(stl_vector_int_push_back, "stl_vector_int_push_back");
                #endif /* stl_vector_int_push_back_load_function_call */
                #ifdef stl_vector_int_copy_load_function_call
                    stl_vector_int_copy_load_function_call
                #else /* stl_vector_int_copy_load_function_call */
                    load_function<stl_vector_int_copy_function_type>(stl_vector_int_copy, "stl_vector_int_copy");
                #endif /* stl_vector_int_copy_load_function_call */
                #ifdef stl_vector_int_delete_load_function_call
                    stl_vector_int_delete_load_function_call
                #else /* stl_vector_int_delete_load_function_call */
                    load_function<stl_vector_int_delete_function_type>(stl_vector_int_delete, "stl_vector_int_delete");
                #endif /* stl_vector_int_delete_load_function_call */
                #ifdef stl_vector_char_default_load_function_call
                    stl_vector_char_default_load_function_call
                #else /* stl_vector_char_default_load_function_call */
                    load_function<stl_vector_char_default_function_type>(stl_vector_char_default, "stl_vector_char_default");
                #endif /* stl_vector_char_default_load_function_call */
                #ifdef stl_vector_char_get_size_const_load_function_call
                    stl_vector_char_get_size_const_load_function_call
                #else /* stl_vector_char_get_size_const_load_function_call */
                    load_function<stl_vector_char_get_size_const_function_type>(stl_vector_char_get_size_const, "stl_vector_char_get_size_const");
                #endif /* stl_vector_char_get_size_const_load_function_call */
                #ifdef stl_vector_char_get_element_const_load_function_call
                    stl_vector_char_get_element_const_load_function_call
                #else /* stl_vector_char_get_element_const_load_function_call */
                    load_function<stl_vector_char_get_element_const_function_type>(stl_vector_char_get_element_const, "stl_vector_char_get_element_const");
                #endif /* stl_vector_char_get_element_const_load_function_call */
                #ifdef stl_vector_char_set_element_load_function_call
                    stl_vector_char_set_element_load_function_call
                #else /* stl_vector_char_set_element_load_function_call */
                    load_function<stl_vector_char_set_element_function_type>(stl_vector_char_set_element, "stl_vector_char_set_element");
                #endif /* stl_vector_char_set_element_load_function_call */
                #ifdef stl_vector_char_push_back_load_function_call
                    stl_vector_char_push_back_load_function_call
                #else /* stl_vector_char_push_back_load_function_call */
                    load_function<stl_vector_char_push_back_function_type>(stl_vector_char_push_back, "stl_vector_char_push_back");
                #endif /* stl_vector_char_push_back_load_function_call */
                #ifdef stl_vector_char_copy_load_function_call
                    stl_vector_char_copy_load_function_call
                #else /* stl_vector_char_copy_load_function_call */
                    load_function<stl_vector_char_copy_function_type>(stl_vector_char_copy, "stl_vector_char_copy");
                #endif /* stl_vector_char_copy_load_function_call */
                #ifdef stl_vector_char_delete_load_function_call
                    stl_vector_char_delete_load_function_call
                #else /* stl_vector_char_delete_load_function_call */
                    load_function<stl_vector_char_delete_function_type>(stl_vector_char_delete, "stl_vector_char_delete");
                #endif /* stl_vector_char_delete_load_function_call */
                #ifdef stl_vector_double_default_load_function_call
                    stl_vector_double_default_load_function_call
                #else /* stl_vector_double_default_load_function_call */
                    load_function<stl_vector_double_default_function_type>(stl_vector_double_default, "stl_vector_double_default");
                #endif /* stl_vector_double_default_load_function_call */
                #ifdef stl_vector_double_get_size_const_load_function_call
                    stl_vector_double_get_size_const_load_function_call
                #else /* stl_vector_double_get_size_const_load_function_call */
                    load_function<stl_vector_double_get_size_const_function_type>(stl_vector_double_get_size_const, "stl_vector_double_get_size_const");
                #endif /* stl_vector_double_get_size_const_load_function_call */
                #ifdef stl_vector_double_get_element_const_load_function_call
                    stl_vector_double_get_element_const_load_function_call
                #else /* stl_vector_double_get_element_const_load_function_call */
                    load_function<stl_vector_double_get_element_const_function_type>(stl_vector_double_get_element_const, "stl_vector_double_get_element_const");
                #endif /* stl_vector_double_get_element_const_load_function_call */
                #ifdef stl_vector_double_set_element_load_function_call
                    stl_vector_double_set_element_load_function_call
                #else /* stl_vector_double_set_element_load_function_call */
                    load_function<stl_vector_double_set_element_function_type>(stl_vector_double_set_element, "stl_vector_double_set_element");
                #endif /* stl_vector_double_set_element_load_function_call */
                #ifdef stl_vector_double_push_back_load_function_call
                    stl_vector_double_push_back_load_function_call
                #else /* stl_vector_double_push_back_load_function_call */
                    load_function<stl_vector_double_push_back_function_type>(stl_vector_double_push_back, "stl_vector_double_push_back");
                #endif /* stl_vector_double_push_back_load_function_call */
                #ifdef stl_vector_double_copy_load_function_call
                    stl_vector_double_copy_load_function_call
                #else /* stl_vector_double_copy_load_function_call */
                    load_function<stl_vector_double_copy_function_type>(stl_vector_double_copy, "stl_vector_double_copy");
                #endif /* stl_vector_double_copy_load_function_call */
                #ifdef stl_vector_double_delete_load_function_call
                    stl_vector_double_delete_load_function_call
                #else /* stl_vector_double_delete_load_function_call */
                    load_function<stl_vector_double_delete_function_type>(stl_vector_double_delete, "stl_vector_double_delete");
                #endif /* stl_vector_double_delete_load_function_call */
                #ifdef stl_vector_of_structures_stl_person_default_load_function_call
                    stl_vector_of_structures_stl_person_default_load_function_call
                #else /* stl_vector_of_structures_stl_person_default_load_function_call */
                    load_function<stl_vector_of_structures_stl_person_default_function_type>(stl_vector_of_structures_stl_person_default, "stl_vector_of_structures_stl_person_default");
                #endif /* stl_vector_of_structures_stl_person_default_load_function_call */
                #ifdef stl_vector_of_structures_stl_person_get_size_const_load_function_call
                    stl_vector_of_structures_stl_person_get_size_const_load_function_call
                #else /* stl_vector_of_structures_stl_person_get_size_const_load_function_call */
                    load_function<stl_vector_of_structures_stl_person_get_size_const_function_type>(stl_vector_of_structures_stl_person_get_size_const, "stl_vector_of_structures_stl_person_get_size_const");
                #endif /* stl_vector_of_structures_stl_person_get_size_const_load_function_call */
                #ifdef stl_vector_of_structures_stl_person_get_element_const_load_function_call
                    stl_vector_of_structures_stl_person_get_element_const_load_function_call
                #else /* stl_vector_of_structures_stl_person_get_element_const_load_function_call */
                    load_function<stl_vector_of_structures_stl_person_get_element_const_function_type>(stl_vector_of_structures_stl_person_get_element_const, "stl_vector_of_structures_stl_person_get_element_const");
                #endif /* stl_vector_of_structures_stl_person_get_element_const_load_function_call */
                #ifdef stl_vector_of_structures_stl_person_element_const_load_function_call
                    stl_vector_of_structures_stl_person_element_const_load_function_call
                #else /* stl_vector_of_structures_stl_person_element_const_load_function_call */
                    load_function<stl_vector_of_structures_stl_person_element_const_function_type>(stl_vector_of_structures_stl_person_element_const, "stl_vector_of_structures_stl_person_element_const");
                #endif /* stl_vector_of_structures_stl_person_element_const_load_function_call */
                #ifdef stl_vector_of_structures_stl_person_set_element_load_function_call
                    stl_vector_of_structures_stl_person_set_element_load_function_call
                #else /* stl_vector_of_structures_stl_person_set_element_load_function_call */
                    load_function<stl_vector_of_structures_stl_person_set_element_function_type>(stl_vector_of_structures_stl_person_set_element, "stl_vector_of_structures_stl_person_set_element");
                #endif /* stl_vector_of_structures_stl_person_set_element_load_function_call */
                #ifdef stl_vector_of_structures_stl_person_push_back_load_function_call
                    stl_vector_of_structures_stl_person_push_back_load_function_call
                #else /* stl_vector_of_structures_stl_person_push_back_load_function_call */
                    load_function<stl_vector_of_structures_stl_person_push_back_function_type>(stl_vector_of_structures_stl_person_push_back, "stl_vector_of_structures_stl_person_push_back");
                #endif /* stl_vector_of_structures_stl_person_push_back_load_function_call */
                #ifdef stl_vector_of_structures_stl_person_copy_load_function_call
                    stl_vector_of_structures_stl_person_copy_load_function_call
                #else /* stl_vector_of_structures_stl_person_copy_load_function_call */
                    load_function<stl_vector_of_structures_stl_person_copy_function_type>(stl_vector_of_structures_stl_person_copy, "stl_vector_of_structures_stl_person_copy");
                #endif /* stl_vector_of_structures_stl_person_copy_load_function_call */
                #ifdef stl_vector_of_structures_stl_person_delete_load_function_call
                    stl_vector_of_structures_stl_person_delete_load_function_call
                #else /* stl_vector_of_structures_stl_person_delete_load_function_call */
                    load_function<stl_vector_of_structures_stl_person_delete_function_type>(stl_vector_of_structures_stl_person_delete, "stl_vector_of_structures_stl_person_delete");
                #endif /* stl_vector_of_structures_stl_person_delete_load_function_call */
                #ifdef stl_person_raw_ptr_default_load_function_call
                    stl_person_raw_ptr_default_load_function_call
                #else /* stl_person_raw_ptr_default_load_function_call */
                    load_function<stl_person_raw_ptr_default_function_type>(stl_person_raw_ptr_default, "stl_person_raw_ptr_default");
                #endif /* stl_person_raw_ptr_default_load_function_call */
                #ifdef stl_person_raw_ptr_get_age_const_load_function_call
                    stl_person_raw_ptr_get_age_const_load_function_call
                #else /* stl_person_raw_ptr_get_age_const_load_function_call */
                    load_function<stl_person_raw_ptr_get_age_const_function_type>(stl_person_raw_ptr_get_age_const, "stl_person_raw_ptr_get_age_const");
                #endif /* stl_person_raw_ptr_get_age_const_load_function_call */
                #ifdef stl_person_raw_ptr_set_age_load_function_call
                    stl_person_raw_ptr_set_age_load_function_call
                #else /* stl_person_raw_ptr_set_age_load_function_call */
                    load_function<stl_person_raw_ptr_set_age_function_type>(stl_person_raw_ptr_set_age, "stl_person_raw_ptr_set_age");
                #endif /* stl_person_raw_ptr_set_age_load_function_call */
                #ifdef stl_person_raw_ptr_get_first_name_const_load_function_call
                    stl_person_raw_ptr_get_first_name_const_load_function_call
                #else /* stl_person_raw_ptr_get_first_name_const_load_function_call */
                    load_function<stl_person_raw_ptr_get_first_name_const_function_type>(stl_person_raw_ptr_get_first_name_const, "stl_person_raw_ptr_get_first_name_const");
                #endif /* stl_person_raw_ptr_get_first_name_const_load_function_call */
                #ifdef stl_person_raw_ptr_set_first_name_load_function_call
                    stl_person_raw_ptr_set_first_name_load_function_call
                #else /* stl_person_raw_ptr_set_first_name_load_function_call */
                    load_function<stl_person_raw_ptr_set_first_name_function_type>(stl_person_raw_ptr_set_first_name, "stl_person_raw_ptr_set_first_name");
                #endif /* stl_person_raw_ptr_set_first_name_load_function_call */
                #ifdef stl_person_raw_ptr_get_second_name_const_load_function_call
                    stl_person_raw_ptr_get_second_name_const_load_function_call
                #else /* stl_person_raw_ptr_get_second_name_const_load_function_call */
                    load_function<stl_person_raw_ptr_get_second_name_const_function_type>(stl_person_raw_ptr_get_second_name_const, "stl_person_raw_ptr_get_second_name_const");
                #endif /* stl_person_raw_ptr_get_second_name_const_load_function_call */
                #ifdef stl_person_raw_ptr_set_second_name_load_function_call
                    stl_person_raw_ptr_set_second_name_load_function_call
                #else /* stl_person_raw_ptr_set_second_name_load_function_call */
                    load_function<stl_person_raw_ptr_set_second_name_function_type>(stl_person_raw_ptr_set_second_name, "stl_person_raw_ptr_set_second_name");
                #endif /* stl_person_raw_ptr_set_second_name_load_function_call */
                #ifdef stl_person_raw_ptr_delete_load_function_call
                    stl_person_raw_ptr_delete_load_function_call
                #else /* stl_person_raw_ptr_delete_load_function_call */
                    load_function<stl_person_raw_ptr_delete_function_type>(stl_person_raw_ptr_delete, "stl_person_raw_ptr_delete");
                #endif /* stl_person_raw_ptr_delete_load_function_call */
                #ifdef stl_vector_of_structures_raw_ptr_stl_person_default_load_function_call
                    stl_vector_of_structures_raw_ptr_stl_person_default_load_function_call
                #else /* stl_vector_of_structures_raw_ptr_stl_person_default_load_function_call */
                    load_function<stl_vector_of_structures_raw_ptr_stl_person_default_function_type>(stl_vector_of_structures_raw_ptr_stl_person_default, "stl_vector_of_structures_raw_ptr_stl_person_default");
                #endif /* stl_vector_of_structures_raw_ptr_stl_person_default_load_function_call */
                #ifdef stl_vector_of_structures_raw_ptr_stl_person_get_size_const_load_function_call
                    stl_vector_of_structures_raw_ptr_stl_person_get_size_const_load_function_call
                #else /* stl_vector_of_structures_raw_ptr_stl_person_get_size_const_load_function_call */
                    load_function<stl_vector_of_structures_raw_ptr_stl_person_get_size_const_function_type>(stl_vector_of_structures_raw_ptr_stl_person_get_size_const, "stl_vector_of_structures_raw_ptr_stl_person_get_size_const");
                #endif /* stl_vector_of_structures_raw_ptr_stl_person_get_size_const_load_function_call */
                #ifdef stl_vector_of_structures_raw_ptr_stl_person_get_element_const_load_function_call
                    stl_vector_of_structures_raw_ptr_stl_person_get_element_const_load_function_call
                #else /* stl_vector_of_structures_raw_ptr_stl_person_get_element_const_load_function_call */
                    load_function<stl_vector_of_structures_raw_ptr_stl_person_get_element_const_function_type>(stl_vector_of_structures_raw_ptr_stl_person_get_element_const, "stl_vector_of_structures_raw_ptr_stl_person_get_element_const");
                #endif /* stl_vector_of_structures_raw_ptr_stl_person_get_element_const_load_function_call */
                #ifdef stl_vector_of_structures_raw_ptr_stl_person_element_const_load_function_call
                    stl_vector_of_structures_raw_ptr_stl_person_element_const_load_function_call
                #else /* stl_vector_of_structures_raw_ptr_stl_person_element_const_load_function_call */
                    load_function<stl_vector_of_structures_raw_ptr_stl_person_element_const_function_type>(stl_vector_of_structures_raw_ptr_stl_person_element_const, "stl_vector_of_structures_raw_ptr_stl_person_element_const");
                #endif /* stl_vector_of_structures_raw_ptr_stl_person_element_const_load_function_call */
                #ifdef stl_vector_of_structures_raw_ptr_stl_person_set_element_load_function_call
                    stl_vector_of_structures_raw_ptr_stl_person_set_element_load_function_call
                #else /* stl_vector_of_structures_raw_ptr_stl_person_set_element_load_function_call */
                    load_function<stl_vector_of_structures_raw_ptr_stl_person_set_element_function_type>(stl_vector_of_structures_raw_ptr_stl_person_set_element, "stl_vector_of_structures_raw_ptr_stl_person_set_element");
                #endif /* stl_vector_of_structures_raw_ptr_stl_person_set_element_load_function_call */
                #ifdef stl_vector_of_structures_raw_ptr_stl_person_push_back_load_function_call
                    stl_vector_of_structures_raw_ptr_stl_person_push_back_load_function_call
                #else /* stl_vector_of_structures_raw_ptr_stl_person_push_back_load_function_call */
                    load_function<stl_vector_of_structures_raw_ptr_stl_person_push_back_function_type>(stl_vector_of_structures_raw_ptr_stl_person_push_back, "stl_vector_of_structures_raw_ptr_stl_person_push_back");
                #endif /* stl_vector_of_structures_raw_ptr_stl_person_push_back_load_function_call */
                #ifdef stl_vector_of_structures_raw_ptr_stl_person_delete_load_function_call
                    stl_vector_of_structures_raw_ptr_stl_person_delete_load_function_call
                #else /* stl_vector_of_structures_raw_ptr_stl_person_delete_load_function_call */
                    load_function<stl_vector_of_structures_raw_ptr_stl_person_delete_function_type>(stl_vector_of_structures_raw_ptr_stl_person_delete, "stl_vector_of_structures_raw_ptr_stl_person_delete");
                #endif /* stl_vector_of_structures_raw_ptr_stl_person_delete_load_function_call */
                const int major_version = stl_get_major_version();
                const int minor_version = stl_get_minor_version();
                const int patch_version = stl_get_patch_version();
                if (major_version != STL_MAJOR_VERSION || minor_version != STL_MINOR_VERSION || patch_version != STL_PATCH_VERSION)
                {
                    std::stringstream error_message;
                    error_message << "Incorrect version of " << shared_library_name << " library. ";
                    error_message << "Expected version is " << STL_MAJOR_VERSION << "." << STL_MINOR_VERSION << "." << STL_PATCH_VERSION << ". ";
                    error_message << "Found version is " << major_version << "." << minor_version << "." << patch_version << ".";
                    throw std::runtime_error(error_message.str());
                }
            }

            Initialization();
            Initialization(const Initialization&);
            #ifdef STL_CPP_COMPILER_HAS_MOVE_CONSTRUCTOR_DELETE
                Initialization(Initialization &&) = delete;
            #endif /* STL_CPP_COMPILER_HAS_MOVE_CONSTRUCTOR_DELETE */
        public:
            Initialization(const char* shared_library_name)
            {
                load_module(shared_library_name);
            }
            ~Initialization()
            {
                #ifdef _WIN32
                    FreeLibrary(handle);
                #else /* _WIN32 */
                    dlclose(handle);
                #endif /* _WIN32 */
                #ifdef stl_sin_degree_zero_function_pointer
                    stl_sin_degree_zero_function_pointer
                #else /* stl_sin_degree_zero_function_pointer */
                    stl_sin_degree = 0;
                #endif /* stl_sin_degree_zero_function_pointer */
                #ifdef stl_get_major_version_zero_function_pointer
                    stl_get_major_version_zero_function_pointer
                #else /* stl_get_major_version_zero_function_pointer */
                    stl_get_major_version = 0;
                #endif /* stl_get_major_version_zero_function_pointer */
                #ifdef stl_get_minor_version_zero_function_pointer
                    stl_get_minor_version_zero_function_pointer
                #else /* stl_get_minor_version_zero_function_pointer */
                    stl_get_minor_version = 0;
                #endif /* stl_get_minor_version_zero_function_pointer */
                #ifdef stl_get_patch_version_zero_function_pointer
                    stl_get_patch_version_zero_function_pointer
                #else /* stl_get_patch_version_zero_function_pointer */
                    stl_get_patch_version = 0;
                #endif /* stl_get_patch_version_zero_function_pointer */
                #ifdef stl_exception_range_error_zero_function_pointer
                    stl_exception_range_error_zero_function_pointer
                #else /* stl_exception_range_error_zero_function_pointer */
                    stl_exception_range_error = 0;
                #endif /* stl_exception_range_error_zero_function_pointer */
                #ifdef stl_exception_what_const_zero_function_pointer
                    stl_exception_what_const_zero_function_pointer
                #else /* stl_exception_what_const_zero_function_pointer */
                    stl_exception_what_const = 0;
                #endif /* stl_exception_what_const_zero_function_pointer */
                #ifdef stl_exception_copy_zero_function_pointer
                    stl_exception_copy_zero_function_pointer
                #else /* stl_exception_copy_zero_function_pointer */
                    stl_exception_copy = 0;
                #endif /* stl_exception_copy_zero_function_pointer */
                #ifdef stl_exception_delete_zero_function_pointer
                    stl_exception_delete_zero_function_pointer
                #else /* stl_exception_delete_zero_function_pointer */
                    stl_exception_delete = 0;
                #endif /* stl_exception_delete_zero_function_pointer */
                #ifdef stl_string_from_cstr_zero_function_pointer
                    stl_string_from_cstr_zero_function_pointer
                #else /* stl_string_from_cstr_zero_function_pointer */
                    stl_string_from_cstr = 0;
                #endif /* stl_string_from_cstr_zero_function_pointer */
                #ifdef stl_string_get_size_const_zero_function_pointer
                    stl_string_get_size_const_zero_function_pointer
                #else /* stl_string_get_size_const_zero_function_pointer */
                    stl_string_get_size_const = 0;
                #endif /* stl_string_get_size_const_zero_function_pointer */
                #ifdef stl_string_cstr_const_zero_function_pointer
                    stl_string_cstr_const_zero_function_pointer
                #else /* stl_string_cstr_const_zero_function_pointer */
                    stl_string_cstr_const = 0;
                #endif /* stl_string_cstr_const_zero_function_pointer */
                #ifdef stl_string_set_value_zero_function_pointer
                    stl_string_set_value_zero_function_pointer
                #else /* stl_string_set_value_zero_function_pointer */
                    stl_string_set_value = 0;
                #endif /* stl_string_set_value_zero_function_pointer */
                #ifdef stl_string_copy_zero_function_pointer
                    stl_string_copy_zero_function_pointer
                #else /* stl_string_copy_zero_function_pointer */
                    stl_string_copy = 0;
                #endif /* stl_string_copy_zero_function_pointer */
                #ifdef stl_string_delete_zero_function_pointer
                    stl_string_delete_zero_function_pointer
                #else /* stl_string_delete_zero_function_pointer */
                    stl_string_delete = 0;
                #endif /* stl_string_delete_zero_function_pointer */
                #ifdef stl_person_default_zero_function_pointer
                    stl_person_default_zero_function_pointer
                #else /* stl_person_default_zero_function_pointer */
                    stl_person_default = 0;
                #endif /* stl_person_default_zero_function_pointer */
                #ifdef stl_person_get_age_const_zero_function_pointer
                    stl_person_get_age_const_zero_function_pointer
                #else /* stl_person_get_age_const_zero_function_pointer */
                    stl_person_get_age_const = 0;
                #endif /* stl_person_get_age_const_zero_function_pointer */
                #ifdef stl_person_set_age_zero_function_pointer
                    stl_person_set_age_zero_function_pointer
                #else /* stl_person_set_age_zero_function_pointer */
                    stl_person_set_age = 0;
                #endif /* stl_person_set_age_zero_function_pointer */
                #ifdef stl_person_get_first_name_const_zero_function_pointer
                    stl_person_get_first_name_const_zero_function_pointer
                #else /* stl_person_get_first_name_const_zero_function_pointer */
                    stl_person_get_first_name_const = 0;
                #endif /* stl_person_get_first_name_const_zero_function_pointer */
                #ifdef stl_person_set_first_name_zero_function_pointer
                    stl_person_set_first_name_zero_function_pointer
                #else /* stl_person_set_first_name_zero_function_pointer */
                    stl_person_set_first_name = 0;
                #endif /* stl_person_set_first_name_zero_function_pointer */
                #ifdef stl_person_get_second_name_const_zero_function_pointer
                    stl_person_get_second_name_const_zero_function_pointer
                #else /* stl_person_get_second_name_const_zero_function_pointer */
                    stl_person_get_second_name_const = 0;
                #endif /* stl_person_get_second_name_const_zero_function_pointer */
                #ifdef stl_person_set_second_name_zero_function_pointer
                    stl_person_set_second_name_zero_function_pointer
                #else /* stl_person_set_second_name_zero_function_pointer */
                    stl_person_set_second_name = 0;
                #endif /* stl_person_set_second_name_zero_function_pointer */
                #ifdef stl_person_copy_zero_function_pointer
                    stl_person_copy_zero_function_pointer
                #else /* stl_person_copy_zero_function_pointer */
                    stl_person_copy = 0;
                #endif /* stl_person_copy_zero_function_pointer */
                #ifdef stl_person_delete_zero_function_pointer
                    stl_person_delete_zero_function_pointer
                #else /* stl_person_delete_zero_function_pointer */
                    stl_person_delete = 0;
                #endif /* stl_person_delete_zero_function_pointer */
                #ifdef stl_community_default_zero_function_pointer
                    stl_community_default_zero_function_pointer
                #else /* stl_community_default_zero_function_pointer */
                    stl_community_default = 0;
                #endif /* stl_community_default_zero_function_pointer */
                #ifdef stl_community_members_zero_function_pointer
                    stl_community_members_zero_function_pointer
                #else /* stl_community_members_zero_function_pointer */
                    stl_community_members = 0;
                #endif /* stl_community_members_zero_function_pointer */
                #ifdef stl_community_get_title_const_zero_function_pointer
                    stl_community_get_title_const_zero_function_pointer
                #else /* stl_community_get_title_const_zero_function_pointer */
                    stl_community_get_title_const = 0;
                #endif /* stl_community_get_title_const_zero_function_pointer */
                #ifdef stl_community_set_title_zero_function_pointer
                    stl_community_set_title_zero_function_pointer
                #else /* stl_community_set_title_zero_function_pointer */
                    stl_community_set_title = 0;
                #endif /* stl_community_set_title_zero_function_pointer */
                #ifdef stl_community_get_members_const_zero_function_pointer
                    stl_community_get_members_const_zero_function_pointer
                #else /* stl_community_get_members_const_zero_function_pointer */
                    stl_community_get_members_const = 0;
                #endif /* stl_community_get_members_const_zero_function_pointer */
                #ifdef stl_community_set_members_zero_function_pointer
                    stl_community_set_members_zero_function_pointer
                #else /* stl_community_set_members_zero_function_pointer */
                    stl_community_set_members = 0;
                #endif /* stl_community_set_members_zero_function_pointer */
                #ifdef stl_community_copy_zero_function_pointer
                    stl_community_copy_zero_function_pointer
                #else /* stl_community_copy_zero_function_pointer */
                    stl_community_copy = 0;
                #endif /* stl_community_copy_zero_function_pointer */
                #ifdef stl_community_delete_zero_function_pointer
                    stl_community_delete_zero_function_pointer
                #else /* stl_community_delete_zero_function_pointer */
                    stl_community_delete = 0;
                #endif /* stl_community_delete_zero_function_pointer */
                #ifdef stl_vector_int_default_zero_function_pointer
                    stl_vector_int_default_zero_function_pointer
                #else /* stl_vector_int_default_zero_function_pointer */
                    stl_vector_int_default = 0;
                #endif /* stl_vector_int_default_zero_function_pointer */
                #ifdef stl_vector_int_get_size_const_zero_function_pointer
                    stl_vector_int_get_size_const_zero_function_pointer
                #else /* stl_vector_int_get_size_const_zero_function_pointer */
                    stl_vector_int_get_size_const = 0;
                #endif /* stl_vector_int_get_size_const_zero_function_pointer */
                #ifdef stl_vector_int_get_element_const_zero_function_pointer
                    stl_vector_int_get_element_const_zero_function_pointer
                #else /* stl_vector_int_get_element_const_zero_function_pointer */
                    stl_vector_int_get_element_const = 0;
                #endif /* stl_vector_int_get_element_const_zero_function_pointer */
                #ifdef stl_vector_int_set_element_zero_function_pointer
                    stl_vector_int_set_element_zero_function_pointer
                #else /* stl_vector_int_set_element_zero_function_pointer */
                    stl_vector_int_set_element = 0;
                #endif /* stl_vector_int_set_element_zero_function_pointer */
                #ifdef stl_vector_int_push_back_zero_function_pointer
                    stl_vector_int_push_back_zero_function_pointer
                #else /* stl_vector_int_push_back_zero_function_pointer */
                    stl_vector_int_push_back = 0;
                #endif /* stl_vector_int_push_back_zero_function_pointer */
                #ifdef stl_vector_int_copy_zero_function_pointer
                    stl_vector_int_copy_zero_function_pointer
                #else /* stl_vector_int_copy_zero_function_pointer */
                    stl_vector_int_copy = 0;
                #endif /* stl_vector_int_copy_zero_function_pointer */
                #ifdef stl_vector_int_delete_zero_function_pointer
                    stl_vector_int_delete_zero_function_pointer
                #else /* stl_vector_int_delete_zero_function_pointer */
                    stl_vector_int_delete = 0;
                #endif /* stl_vector_int_delete_zero_function_pointer */
                #ifdef stl_vector_char_default_zero_function_pointer
                    stl_vector_char_default_zero_function_pointer
                #else /* stl_vector_char_default_zero_function_pointer */
                    stl_vector_char_default = 0;
                #endif /* stl_vector_char_default_zero_function_pointer */
                #ifdef stl_vector_char_get_size_const_zero_function_pointer
                    stl_vector_char_get_size_const_zero_function_pointer
                #else /* stl_vector_char_get_size_const_zero_function_pointer */
                    stl_vector_char_get_size_const = 0;
                #endif /* stl_vector_char_get_size_const_zero_function_pointer */
                #ifdef stl_vector_char_get_element_const_zero_function_pointer
                    stl_vector_char_get_element_const_zero_function_pointer
                #else /* stl_vector_char_get_element_const_zero_function_pointer */
                    stl_vector_char_get_element_const = 0;
                #endif /* stl_vector_char_get_element_const_zero_function_pointer */
                #ifdef stl_vector_char_set_element_zero_function_pointer
                    stl_vector_char_set_element_zero_function_pointer
                #else /* stl_vector_char_set_element_zero_function_pointer */
                    stl_vector_char_set_element = 0;
                #endif /* stl_vector_char_set_element_zero_function_pointer */
                #ifdef stl_vector_char_push_back_zero_function_pointer
                    stl_vector_char_push_back_zero_function_pointer
                #else /* stl_vector_char_push_back_zero_function_pointer */
                    stl_vector_char_push_back = 0;
                #endif /* stl_vector_char_push_back_zero_function_pointer */
                #ifdef stl_vector_char_copy_zero_function_pointer
                    stl_vector_char_copy_zero_function_pointer
                #else /* stl_vector_char_copy_zero_function_pointer */
                    stl_vector_char_copy = 0;
                #endif /* stl_vector_char_copy_zero_function_pointer */
                #ifdef stl_vector_char_delete_zero_function_pointer
                    stl_vector_char_delete_zero_function_pointer
                #else /* stl_vector_char_delete_zero_function_pointer */
                    stl_vector_char_delete = 0;
                #endif /* stl_vector_char_delete_zero_function_pointer */
                #ifdef stl_vector_double_default_zero_function_pointer
                    stl_vector_double_default_zero_function_pointer
                #else /* stl_vector_double_default_zero_function_pointer */
                    stl_vector_double_default = 0;
                #endif /* stl_vector_double_default_zero_function_pointer */
                #ifdef stl_vector_double_get_size_const_zero_function_pointer
                    stl_vector_double_get_size_const_zero_function_pointer
                #else /* stl_vector_double_get_size_const_zero_function_pointer */
                    stl_vector_double_get_size_const = 0;
                #endif /* stl_vector_double_get_size_const_zero_function_pointer */
                #ifdef stl_vector_double_get_element_const_zero_function_pointer
                    stl_vector_double_get_element_const_zero_function_pointer
                #else /* stl_vector_double_get_element_const_zero_function_pointer */
                    stl_vector_double_get_element_const = 0;
                #endif /* stl_vector_double_get_element_const_zero_function_pointer */
                #ifdef stl_vector_double_set_element_zero_function_pointer
                    stl_vector_double_set_element_zero_function_pointer
                #else /* stl_vector_double_set_element_zero_function_pointer */
                    stl_vector_double_set_element = 0;
                #endif /* stl_vector_double_set_element_zero_function_pointer */
                #ifdef stl_vector_double_push_back_zero_function_pointer
                    stl_vector_double_push_back_zero_function_pointer
                #else /* stl_vector_double_push_back_zero_function_pointer */
                    stl_vector_double_push_back = 0;
                #endif /* stl_vector_double_push_back_zero_function_pointer */
                #ifdef stl_vector_double_copy_zero_function_pointer
                    stl_vector_double_copy_zero_function_pointer
                #else /* stl_vector_double_copy_zero_function_pointer */
                    stl_vector_double_copy = 0;
                #endif /* stl_vector_double_copy_zero_function_pointer */
                #ifdef stl_vector_double_delete_zero_function_pointer
                    stl_vector_double_delete_zero_function_pointer
                #else /* stl_vector_double_delete_zero_function_pointer */
                    stl_vector_double_delete = 0;
                #endif /* stl_vector_double_delete_zero_function_pointer */
                #ifdef stl_vector_of_structures_stl_person_default_zero_function_pointer
                    stl_vector_of_structures_stl_person_default_zero_function_pointer
                #else /* stl_vector_of_structures_stl_person_default_zero_function_pointer */
                    stl_vector_of_structures_stl_person_default = 0;
                #endif /* stl_vector_of_structures_stl_person_default_zero_function_pointer */
                #ifdef stl_vector_of_structures_stl_person_get_size_const_zero_function_pointer
                    stl_vector_of_structures_stl_person_get_size_const_zero_function_pointer
                #else /* stl_vector_of_structures_stl_person_get_size_const_zero_function_pointer */
                    stl_vector_of_structures_stl_person_get_size_const = 0;
                #endif /* stl_vector_of_structures_stl_person_get_size_const_zero_function_pointer */
                #ifdef stl_vector_of_structures_stl_person_get_element_const_zero_function_pointer
                    stl_vector_of_structures_stl_person_get_element_const_zero_function_pointer
                #else /* stl_vector_of_structures_stl_person_get_element_const_zero_function_pointer */
                    stl_vector_of_structures_stl_person_get_element_const = 0;
                #endif /* stl_vector_of_structures_stl_person_get_element_const_zero_function_pointer */
                #ifdef stl_vector_of_structures_stl_person_element_const_zero_function_pointer
                    stl_vector_of_structures_stl_person_element_const_zero_function_pointer
                #else /* stl_vector_of_structures_stl_person_element_const_zero_function_pointer */
                    stl_vector_of_structures_stl_person_element_const = 0;
                #endif /* stl_vector_of_structures_stl_person_element_const_zero_function_pointer */
                #ifdef stl_vector_of_structures_stl_person_set_element_zero_function_pointer
                    stl_vector_of_structures_stl_person_set_element_zero_function_pointer
                #else /* stl_vector_of_structures_stl_person_set_element_zero_function_pointer */
                    stl_vector_of_structures_stl_person_set_element = 0;
                #endif /* stl_vector_of_structures_stl_person_set_element_zero_function_pointer */
                #ifdef stl_vector_of_structures_stl_person_push_back_zero_function_pointer
                    stl_vector_of_structures_stl_person_push_back_zero_function_pointer
                #else /* stl_vector_of_structures_stl_person_push_back_zero_function_pointer */
                    stl_vector_of_structures_stl_person_push_back = 0;
                #endif /* stl_vector_of_structures_stl_person_push_back_zero_function_pointer */
                #ifdef stl_vector_of_structures_stl_person_copy_zero_function_pointer
                    stl_vector_of_structures_stl_person_copy_zero_function_pointer
                #else /* stl_vector_of_structures_stl_person_copy_zero_function_pointer */
                    stl_vector_of_structures_stl_person_copy = 0;
                #endif /* stl_vector_of_structures_stl_person_copy_zero_function_pointer */
                #ifdef stl_vector_of_structures_stl_person_delete_zero_function_pointer
                    stl_vector_of_structures_stl_person_delete_zero_function_pointer
                #else /* stl_vector_of_structures_stl_person_delete_zero_function_pointer */
                    stl_vector_of_structures_stl_person_delete = 0;
                #endif /* stl_vector_of_structures_stl_person_delete_zero_function_pointer */
                #ifdef stl_person_raw_ptr_default_zero_function_pointer
                    stl_person_raw_ptr_default_zero_function_pointer
                #else /* stl_person_raw_ptr_default_zero_function_pointer */
                    stl_person_raw_ptr_default = 0;
                #endif /* stl_person_raw_ptr_default_zero_function_pointer */
                #ifdef stl_person_raw_ptr_get_age_const_zero_function_pointer
                    stl_person_raw_ptr_get_age_const_zero_function_pointer
                #else /* stl_person_raw_ptr_get_age_const_zero_function_pointer */
                    stl_person_raw_ptr_get_age_const = 0;
                #endif /* stl_person_raw_ptr_get_age_const_zero_function_pointer */
                #ifdef stl_person_raw_ptr_set_age_zero_function_pointer
                    stl_person_raw_ptr_set_age_zero_function_pointer
                #else /* stl_person_raw_ptr_set_age_zero_function_pointer */
                    stl_person_raw_ptr_set_age = 0;
                #endif /* stl_person_raw_ptr_set_age_zero_function_pointer */
                #ifdef stl_person_raw_ptr_get_first_name_const_zero_function_pointer
                    stl_person_raw_ptr_get_first_name_const_zero_function_pointer
                #else /* stl_person_raw_ptr_get_first_name_const_zero_function_pointer */
                    stl_person_raw_ptr_get_first_name_const = 0;
                #endif /* stl_person_raw_ptr_get_first_name_const_zero_function_pointer */
                #ifdef stl_person_raw_ptr_set_first_name_zero_function_pointer
                    stl_person_raw_ptr_set_first_name_zero_function_pointer
                #else /* stl_person_raw_ptr_set_first_name_zero_function_pointer */
                    stl_person_raw_ptr_set_first_name = 0;
                #endif /* stl_person_raw_ptr_set_first_name_zero_function_pointer */
                #ifdef stl_person_raw_ptr_get_second_name_const_zero_function_pointer
                    stl_person_raw_ptr_get_second_name_const_zero_function_pointer
                #else /* stl_person_raw_ptr_get_second_name_const_zero_function_pointer */
                    stl_person_raw_ptr_get_second_name_const = 0;
                #endif /* stl_person_raw_ptr_get_second_name_const_zero_function_pointer */
                #ifdef stl_person_raw_ptr_set_second_name_zero_function_pointer
                    stl_person_raw_ptr_set_second_name_zero_function_pointer
                #else /* stl_person_raw_ptr_set_second_name_zero_function_pointer */
                    stl_person_raw_ptr_set_second_name = 0;
                #endif /* stl_person_raw_ptr_set_second_name_zero_function_pointer */
                #ifdef stl_person_raw_ptr_delete_zero_function_pointer
                    stl_person_raw_ptr_delete_zero_function_pointer
                #else /* stl_person_raw_ptr_delete_zero_function_pointer */
                    stl_person_raw_ptr_delete = 0;
                #endif /* stl_person_raw_ptr_delete_zero_function_pointer */
                #ifdef stl_vector_of_structures_raw_ptr_stl_person_default_zero_function_pointer
                    stl_vector_of_structures_raw_ptr_stl_person_default_zero_function_pointer
                #else /* stl_vector_of_structures_raw_ptr_stl_person_default_zero_function_pointer */
                    stl_vector_of_structures_raw_ptr_stl_person_default = 0;
                #endif /* stl_vector_of_structures_raw_ptr_stl_person_default_zero_function_pointer */
                #ifdef stl_vector_of_structures_raw_ptr_stl_person_get_size_const_zero_function_pointer
                    stl_vector_of_structures_raw_ptr_stl_person_get_size_const_zero_function_pointer
                #else /* stl_vector_of_structures_raw_ptr_stl_person_get_size_const_zero_function_pointer */
                    stl_vector_of_structures_raw_ptr_stl_person_get_size_const = 0;
                #endif /* stl_vector_of_structures_raw_ptr_stl_person_get_size_const_zero_function_pointer */
                #ifdef stl_vector_of_structures_raw_ptr_stl_person_get_element_const_zero_function_pointer
                    stl_vector_of_structures_raw_ptr_stl_person_get_element_const_zero_function_pointer
                #else /* stl_vector_of_structures_raw_ptr_stl_person_get_element_const_zero_function_pointer */
                    stl_vector_of_structures_raw_ptr_stl_person_get_element_const = 0;
                #endif /* stl_vector_of_structures_raw_ptr_stl_person_get_element_const_zero_function_pointer */
                #ifdef stl_vector_of_structures_raw_ptr_stl_person_element_const_zero_function_pointer
                    stl_vector_of_structures_raw_ptr_stl_person_element_const_zero_function_pointer
                #else /* stl_vector_of_structures_raw_ptr_stl_person_element_const_zero_function_pointer */
                    stl_vector_of_structures_raw_ptr_stl_person_element_const = 0;
                #endif /* stl_vector_of_structures_raw_ptr_stl_person_element_const_zero_function_pointer */
                #ifdef stl_vector_of_structures_raw_ptr_stl_person_set_element_zero_function_pointer
                    stl_vector_of_structures_raw_ptr_stl_person_set_element_zero_function_pointer
                #else /* stl_vector_of_structures_raw_ptr_stl_person_set_element_zero_function_pointer */
                    stl_vector_of_structures_raw_ptr_stl_person_set_element = 0;
                #endif /* stl_vector_of_structures_raw_ptr_stl_person_set_element_zero_function_pointer */
                #ifdef stl_vector_of_structures_raw_ptr_stl_person_push_back_zero_function_pointer
                    stl_vector_of_structures_raw_ptr_stl_person_push_back_zero_function_pointer
                #else /* stl_vector_of_structures_raw_ptr_stl_person_push_back_zero_function_pointer */
                    stl_vector_of_structures_raw_ptr_stl_person_push_back = 0;
                #endif /* stl_vector_of_structures_raw_ptr_stl_person_push_back_zero_function_pointer */
                #ifdef stl_vector_of_structures_raw_ptr_stl_person_delete_zero_function_pointer
                    stl_vector_of_structures_raw_ptr_stl_person_delete_zero_function_pointer
                #else /* stl_vector_of_structures_raw_ptr_stl_person_delete_zero_function_pointer */
                    stl_vector_of_structures_raw_ptr_stl_person_delete = 0;
                #endif /* stl_vector_of_structures_raw_ptr_stl_person_delete_zero_function_pointer */
            }
        };
    }

    #endif /* __cplusplus */

#endif /* STL_CAPI_USE_DYNAMIC_LOADER */

#endif /* STL_CAPI_INCLUDED */

