/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#ifndef STL_VECTOROFSTRUCTURESRAWPTR_ELEMENTTYPE_DEFINITION_INCLUDED
#define STL_VECTOROFSTRUCTURESRAWPTR_ELEMENTTYPE_DEFINITION_INCLUDED

#include "STL/VectorOfStructuresRawPtrElementTypeDecl.h"
#include "ImplementationCode/common/check_and_throw_exception.h"
#include "STL/Person.h"
#include "STL/VectorOfStructuresSTLPersonDecl.h"

#ifdef __cplusplus

inline STL::VectorOfStructuresRawPtr::VectorOfStructuresRawPtr()
{
    beautiful_capi_implementationcode_exception_info_t exception_info;
    STL::VectorOfStructuresRawPtr result(STL::VectorOfStructuresRawPtr::force_creating_from_raw_pointer, stl_vector_of_structures_raw_ptr_element_type_default(&exception_info), false);
    beautiful_capi_ImplementationCode::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
    SetObject(result.Detach());
}

inline size_t STL::VectorOfStructuresRawPtr::GetSize() const
{
    beautiful_capi_implementationcode_exception_info_t exception_info;
    size_t result(stl_vector_of_structures_raw_ptr_element_type_get_size_const(&exception_info, GetRawPointer()));
    beautiful_capi_ImplementationCode::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
    return result;
}

inline STL::Person STL::VectorOfStructuresRawPtr::GetElement(size_t index) const
{
    beautiful_capi_implementationcode_exception_info_t exception_info;
    STL::Person result(STL::Person::force_creating_from_raw_pointer, stl_vector_of_structures_raw_ptr_element_type_get_element_const(&exception_info, GetRawPointer(), index), false);
    beautiful_capi_ImplementationCode::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
    return result;
}

inline void STL::VectorOfStructuresRawPtr::SetElement(size_t index, const STL::Person& value)
{
    beautiful_capi_implementationcode_exception_info_t exception_info;
    stl_vector_of_structures_raw_ptr_element_type_set_element(&exception_info, GetRawPointer(), index, value.GetRawPointer());
    beautiful_capi_ImplementationCode::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
}

inline void STL::VectorOfStructuresRawPtr::PushBack(const STL::Person& value)
{
    beautiful_capi_implementationcode_exception_info_t exception_info;
    stl_vector_of_structures_raw_ptr_element_type_push_back(&exception_info, GetRawPointer(), value.GetRawPointer());
    beautiful_capi_ImplementationCode::check_and_throw_exception(exception_info.code, exception_info.object_pointer);
}

inline STL::VectorOfStructuresRawPtr::VectorOfStructuresRawPtr(const VectorOfStructuresRawPtr& other)
{
    SetObject(other.GetRawPointer());
}

#ifdef STL_CPP_COMPILER_HAS_RVALUE_REFERENCES
inline STL::VectorOfStructuresRawPtr::VectorOfStructuresRawPtr(VectorOfStructuresRawPtr&& other)
{
    mObject = other.mObject;
    other.mObject = 0;
}
#endif /* STL_CPP_COMPILER_HAS_RVALUE_REFERENCES */

inline STL::VectorOfStructuresRawPtr::VectorOfStructuresRawPtr(STL::VectorOfStructuresRawPtr::ECreateFromRawPointer, void *object_pointer, bool)
{
    SetObject(object_pointer);
}

inline void STL::VectorOfStructuresRawPtr::Delete()
{
    if (GetRawPointer())
    {
        stl_vector_of_structures_raw_ptr_element_type_delete(GetRawPointer());
        SetObject(0);
    }
}

inline STL::VectorOfStructuresRawPtr& STL::VectorOfStructuresRawPtr::operator=(const STL::VectorOfStructuresRawPtr& other)
{
    if (this != &other)
    {
        SetObject(other.GetRawPointer());
    }
    return *this;
}

#ifdef STL_CPP_COMPILER_HAS_RVALUE_REFERENCES
inline STL::VectorOfStructuresRawPtr& STL::VectorOfStructuresRawPtr::operator=(STL::VectorOfStructuresRawPtr&& other)
{
    if (this != &other)
    {
        mObject = other.mObject;
        other.mObject = 0;
    }
    return *this;
}
#endif /* STL_CPP_COMPILER_HAS_RVALUE_REFERENCES */

inline STL::VectorOfStructuresRawPtr STL::VectorOfStructuresRawPtr::Null()
{
    return STL::VectorOfStructuresRawPtr(STL::VectorOfStructuresRawPtr::force_creating_from_raw_pointer, static_cast<void*>(0), false);
}

inline bool STL::VectorOfStructuresRawPtr::IsNull() const
{
    return !GetRawPointer();
}

inline bool STL::VectorOfStructuresRawPtr::IsNotNull() const
{
    return GetRawPointer() != 0;
}

inline bool STL::VectorOfStructuresRawPtr::operator!() const
{
    return !GetRawPointer();
}

inline void* STL::VectorOfStructuresRawPtr::Detach()
{
    void* result = GetRawPointer();
    SetObject(0);
    return result;
}

inline void* STL::VectorOfStructuresRawPtr::GetRawPointer() const
{
    return STL::VectorOfStructuresRawPtr::mObject ? mObject: 0;
}

inline STL::VectorOfStructuresRawPtr* STL::VectorOfStructuresRawPtr::operator->()
{
    return this;
}

inline const STL::VectorOfStructuresRawPtr* STL::VectorOfStructuresRawPtr::operator->() const
{
    return this;
}

inline STL::VectorOfStructuresRawPtr::operator STL::VectorOfStructures<STL::Person>() const
{
    return STL::VectorOfStructures<STL::Person>(STL::VectorOfStructures<STL::Person>::force_creating_from_raw_pointer, GetRawPointer(), true);
}

inline STL::VectorOfStructuresRawPtr::VectorOfStructuresRawPtr(const STL::VectorOfStructures<STL::Person>& value)
{
    void* object_pointer = value.GetRawPointer();
    SetObject(object_pointer);
}


inline void STL::VectorOfStructuresRawPtr::SetObject(void* object_pointer)
{
    mObject = object_pointer;
}

#endif /* __cplusplus */

#endif /* STL_VECTOROFSTRUCTURESRAWPTR_ELEMENTTYPE_DEFINITION_INCLUDED */

