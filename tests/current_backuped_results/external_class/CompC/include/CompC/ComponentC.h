/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#ifndef COMPC_COMPONENTC_DEFINITION_INCLUDED
#define COMPC_COMPONENTC_DEFINITION_INCLUDED

#include "CompC/ComponentCDecl.h"
#include "Classes/ClassA.h"
#include "Classes/ClassB.h"
#include "Classes/ClassC.h"

#ifdef __cplusplus

inline CompC::ComponentCPtr::ComponentCPtr()
{
    SetObject(CompC::ComponentCPtr(CompC::ComponentCPtr::force_creating_from_raw_pointer, comp_c_component_c_default(), false).DetachObject());
}

inline Classes::ClassA CompC::ComponentCPtr::GetA() const
{
    return Classes::ClassA(Classes::ClassA::force_creating_from_raw_pointer, comp_c_component_c_get_a_const(GetPtr()), false);
}

inline void CompC::ComponentCPtr::SetA(const Classes::ClassA& a)
{
    comp_c_component_c_set_a(GetPtr(), a.GetRawPtr());
}

inline Classes::ClassBRawPtr CompC::ComponentCPtr::GetB() const
{
    return Classes::ClassBRawPtr(Classes::ClassBRawPtr::force_creating_from_raw_pointer, comp_c_component_c_get_b_const(GetPtr()), false);
}

inline void CompC::ComponentCPtr::SetB(const Classes::ClassBRawPtr& b)
{
    comp_c_component_c_set_b(GetPtr(), b.GetRawPtr());
}

inline Classes::ClassCPtr CompC::ComponentCPtr::GetC() const
{
    return Classes::ClassCPtr(Classes::ClassCPtr::force_creating_from_raw_pointer, comp_c_component_c_get_c_const(GetPtr()), false);
}

inline void CompC::ComponentCPtr::SetC(const Classes::ClassCPtr& c)
{
    comp_c_component_c_set_c(GetPtr(), c.GetRawPtr());
}

inline CompC::ComponentCPtr::ComponentCPtr(const ComponentCPtr& other)
{
    SetObject(other.GetPtr());
    if (other.GetPtr())
    {
        comp_c_component_c_add_ref(other.GetPtr());
    }
}

#ifdef COMPC_CPP_COMPILER_HAS_RVALUE_REFERENCES
inline CompC::ComponentCPtr::ComponentCPtr(ComponentCPtr&& other)
{
    mObject = other.mObject;
    other.mObject = 0;
}
#endif /* COMPC_CPP_COMPILER_HAS_RVALUE_REFERENCES */

inline CompC::ComponentCPtr::ComponentCPtr(CompC::ComponentCPtr::ECreateFromRawPointer, void *object_pointer, bool add_ref_object)
{
    SetObject(object_pointer);
    if (add_ref_object && object_pointer)
    {
        comp_c_component_c_add_ref(object_pointer);
    }
}

inline CompC::ComponentCPtr::~ComponentCPtr()
{
    if (GetPtr())
    {
        comp_c_component_c_release(GetPtr());
        SetObject(0);
    }
}

inline CompC::ComponentCPtr& CompC::ComponentCPtr::operator=(const CompC::ComponentCPtr& other)
{
    if (GetPtr() != other.GetPtr())
    {
        if (GetPtr())
        {
            comp_c_component_c_release(GetPtr());
            SetObject(0);
        }
        SetObject(other.GetPtr());
        if (other.GetPtr())
        {
            comp_c_component_c_add_ref(other.GetPtr());
        }
    }
    return *this;
}

#ifdef COMPC_CPP_COMPILER_HAS_RVALUE_REFERENCES
inline CompC::ComponentCPtr& CompC::ComponentCPtr::operator=(CompC::ComponentCPtr&& other)
{
    if (GetPtr() != other.GetPtr())
    {
        if (GetPtr())
        {
            comp_c_component_c_release(GetPtr());
            SetObject(0);
        }
        mObject = other.mObject;
        other.mObject = 0;
    }
    return *this;
}
#endif /* COMPC_CPP_COMPILER_HAS_RVALUE_REFERENCES */

inline CompC::ComponentCPtr CompC::ComponentCPtr::Null()
{
    return CompC::ComponentCPtr(CompC::ComponentCPtr::force_creating_from_raw_pointer, static_cast<void*>(0), false);
}

inline bool CompC::ComponentCPtr::IsNull() const
{
    return !GetPtr();
}

inline bool CompC::ComponentCPtr::IsNotNull() const
{
    return GetPtr() != 0;
}

inline bool CompC::ComponentCPtr::operator!() const
{
    return !GetPtr();
}

inline void* CompC::ComponentCPtr::DetachObject()
{
    void* result = GetPtr();
    SetObject(0);
    return result;
}

inline void* CompC::ComponentCPtr::GetPtr() const
{
    return CompC::ComponentCPtr::mObject ? mObject: 0;
}

inline CompC::ComponentCPtr* CompC::ComponentCPtr::operator->()
{
    return this;
}

inline const CompC::ComponentCPtr* CompC::ComponentCPtr::operator->() const
{
    return this;
}

inline void CompC::ComponentCPtr::SetObject(void* object_pointer)
{
    mObject = object_pointer;
}

#endif /* __cplusplus */

#endif /* COMPC_COMPONENTC_DEFINITION_INCLUDED */

