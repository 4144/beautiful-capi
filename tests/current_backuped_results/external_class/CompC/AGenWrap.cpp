/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#include <stdexcept>
#include <cassert>
#include "ComponentCImpl.h"

#ifdef _WIN32
    #ifdef __GNUC__
        #define COMPC_API extern "C" __attribute__ ((dllexport))
        #define COMPC_API_CONVENTION __attribute__ ((cdecl))
    #else
        #define COMPC_API extern "C" __declspec(dllexport)
        #define COMPC_API_CONVENTION __cdecl
    #endif
#elif __APPLE__
    #if defined(__GNUC__) && __GNUC__ >= 4
        #define COMPC_API extern "C" __attribute__ ((visibility ("default")))
    #else
        #define COMPC_API extern "C"
    #endif
    #ifdef __i386__
        #define COMPC_API_CONVENTION __attribute__ ((cdecl))
    #else /* __i386__ */
        #define COMPC_API_CONVENTION
    #endif /* __i386__ */
#elif __unix__ || __linux__
    #if defined(__GNUC__) && __GNUC__ >= 4
        #define COMPC_API extern "C" __attribute__ ((visibility ("default")))
    #else
        #define COMPC_API extern "C"
    #endif
    #ifdef __i386__
        #define COMPC_API_CONVENTION __attribute__ ((cdecl))
    #else /* __i386__ */
        #define COMPC_API_CONVENTION
    #endif /* __i386__ */
#else
    #error "Unknown platform"
#endif

int AutoGen_Internal_CompC_CompCGetMajorVersionImpl()
{
    return 1;
}

int AutoGen_Internal_CompC_CompCGetMinorVersionImpl()
{
    return 0;
}

int AutoGen_Internal_CompC_CompCGetPatchVersionImpl()
{
    return 0;
}

COMPC_API int COMPC_API_CONVENTION comp_c_get_major_version()
{
    return AutoGen_Internal_CompC_CompCGetMajorVersionImpl();
}

COMPC_API int COMPC_API_CONVENTION comp_c_get_minor_version()
{
    return AutoGen_Internal_CompC_CompCGetMinorVersionImpl();
}

COMPC_API int COMPC_API_CONVENTION comp_c_get_patch_version()
{
    return AutoGen_Internal_CompC_CompCGetPatchVersionImpl();
}

COMPC_API void* COMPC_API_CONVENTION comp_c_component_c_default()
{
    return new CompC::ComponentC();
}

COMPC_API void* COMPC_API_CONVENTION comp_c_component_c_get_a_const(void* object_pointer)
{
    const CompC::ComponentC* self = static_cast<CompC::ComponentC*>(object_pointer);
    return Classes::ClassA(self->GetA()).detach();
}

COMPC_API void COMPC_API_CONVENTION comp_c_component_c_set_a(void* object_pointer, void* a)
{
    CompC::ComponentC* self = static_cast<CompC::ComponentC*>(object_pointer);
    self->SetA(Classes::ClassA(Classes::ClassA::force_creating_from_raw_pointer, a, true));
}

COMPC_API void* COMPC_API_CONVENTION comp_c_component_c_get_b_const(void* object_pointer)
{
    const CompC::ComponentC* self = static_cast<CompC::ComponentC*>(object_pointer);
    return Classes::ClassBRawPtr(self->GetB()).detach();
}

COMPC_API void COMPC_API_CONVENTION comp_c_component_c_set_b(void* object_pointer, void* b)
{
    CompC::ComponentC* self = static_cast<CompC::ComponentC*>(object_pointer);
    self->SetB(Classes::ClassBRawPtr(Classes::ClassBRawPtr::force_creating_from_raw_pointer, b, true));
}

COMPC_API void* COMPC_API_CONVENTION comp_c_component_c_get_c_const(void* object_pointer)
{
    const CompC::ComponentC* self = static_cast<CompC::ComponentC*>(object_pointer);
    return Classes::ClassCPtr(self->GetC()).detach();
}

COMPC_API void COMPC_API_CONVENTION comp_c_component_c_set_c(void* object_pointer, void* c)
{
    CompC::ComponentC* self = static_cast<CompC::ComponentC*>(object_pointer);
    self->SetC(Classes::ClassCPtr(Classes::ClassCPtr::force_creating_from_raw_pointer, c, true));
}

COMPC_API void COMPC_API_CONVENTION comp_c_component_c_add_ref(void* object_pointer)
{
    intrusive_ptr_add_ref(static_cast<CompC::ComponentC*>(object_pointer));
}

COMPC_API void COMPC_API_CONVENTION comp_c_component_c_release(void* object_pointer)
{
    intrusive_ptr_release(static_cast<CompC::ComponentC*>(object_pointer));
}
