/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#ifndef CLASSES_CLASSA_DEFINITION_INCLUDED
#define CLASSES_CLASSA_DEFINITION_INCLUDED

#include "Classes/ClassADecl.h"

#ifdef __cplusplus

inline Classes::ClassA::ClassA()
{
    SetObject(classes_class_a_default());
}

inline int Classes::ClassA::GetValue() const
{
    return classes_class_a_get_value_const(GetRawPtr());
}

inline void Classes::ClassA::SetValue(int value)
{
    classes_class_a_set_value(GetRawPtr(), value);
}

inline Classes::ClassA::ClassA(const ClassA& other)
{
    if (other.GetRawPtr())
    {
        SetObject(classes_class_a_copy(other.GetRawPtr()));
    }
    else
    {
        SetObject(0);
    }
}

#ifdef CLASSES_CPP_COMPILER_HAS_RVALUE_REFERENCES
inline Classes::ClassA::ClassA(ClassA&& other)
{
    mObject = other.mObject;
    other.mObject = 0;
}
#endif /* CLASSES_CPP_COMPILER_HAS_RVALUE_REFERENCES */

inline Classes::ClassA::ClassA(Classes::ClassA::ECreateFromRawPointer, void *object_pointer, bool copy_object)
{
    if (object_pointer && copy_object)
    {
        SetObject(classes_class_a_copy(object_pointer));
    }
    else
    {
        SetObject(object_pointer);
    }
}

inline Classes::ClassA::~ClassA()
{
    if (GetRawPtr())
    {
        classes_class_a_delete(GetRawPtr());
        SetObject(0);
    }
}

inline Classes::ClassA& Classes::ClassA::operator=(const Classes::ClassA& other)
{
    if (this != &other)
    {
        if (GetRawPtr())
        {
            classes_class_a_delete(GetRawPtr());
            SetObject(0);
        }
        if (other.GetRawPtr())
        {
            SetObject(classes_class_a_copy(other.mObject));
        }
        else
        {
            SetObject(0);
        }
    }
    return *this;
}

#ifdef CLASSES_CPP_COMPILER_HAS_RVALUE_REFERENCES
inline Classes::ClassA& Classes::ClassA::operator=(Classes::ClassA&& other)
{
    if (this != &other)
    {
        if (GetRawPtr())
        {
            classes_class_a_delete(GetRawPtr());
            SetObject(0);
        }
        mObject = other.mObject;
        other.mObject = 0;
    }
    return *this;
}
#endif /* CLASSES_CPP_COMPILER_HAS_RVALUE_REFERENCES */

inline Classes::ClassA Classes::ClassA::Null()
{
    return Classes::ClassA(Classes::ClassA::force_creating_from_raw_pointer, 0, false);
}

inline bool Classes::ClassA::IsNull() const
{
    return !GetRawPtr();
}

inline bool Classes::ClassA::IsNotNull() const
{
    return GetRawPtr() != 0;
}

inline bool Classes::ClassA::operator!() const
{
    return !GetRawPtr();
}

inline void* Classes::ClassA::detach()
{
    void* result = GetRawPtr();
    SetObject(0);
    return result;
}

inline void* Classes::ClassA::GetRawPtr() const
{
    return Classes::ClassA::mObject ? mObject: 0;
}

inline void Classes::ClassA::SetObject(void* object_pointer)
{
    mObject = object_pointer;
}

#endif /* __cplusplus */

#endif /* CLASSES_CLASSA_DEFINITION_INCLUDED */

