/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#ifndef CLASSES_CLASSC_DEFINITION_INCLUDED
#define CLASSES_CLASSC_DEFINITION_INCLUDED

#include "Classes/ClassCDecl.h"

#ifdef __cplusplus

inline Classes::ClassCPtr::ClassCPtr()
{
    SetObject(Classes::ClassCPtr(Classes::ClassCPtr::force_creating_from_raw_pointer, classes_class_c_default(), false).detach());
}

inline double Classes::ClassCPtr::GetValue() const
{
    return classes_class_c_get_value_const(GetRawPtr());
}

inline void Classes::ClassCPtr::SetValue(double value)
{
    classes_class_c_set_value(GetRawPtr(), value);
}

inline Classes::ClassCPtr::ClassCPtr(const ClassCPtr& other)
{
    SetObject(other.GetRawPtr());
    if (other.GetRawPtr())
    {
        classes_class_c_add_ref(other.GetRawPtr());
    }
}

#ifdef CLASSES_CPP_COMPILER_HAS_RVALUE_REFERENCES
inline Classes::ClassCPtr::ClassCPtr(ClassCPtr&& other)
{
    mObject = other.mObject;
    other.mObject = 0;
}
#endif /* CLASSES_CPP_COMPILER_HAS_RVALUE_REFERENCES */

inline Classes::ClassCPtr::ClassCPtr(Classes::ClassCPtr::ECreateFromRawPointer, void *object_pointer, bool add_ref_object)
{
    SetObject(object_pointer);
    if (add_ref_object && object_pointer)
    {
        classes_class_c_add_ref(object_pointer);
    }
}

inline Classes::ClassCPtr::~ClassCPtr()
{
    if (GetRawPtr())
    {
        classes_class_c_release(GetRawPtr());
        SetObject(0);
    }
}

inline Classes::ClassCPtr& Classes::ClassCPtr::operator=(const Classes::ClassCPtr& other)
{
    if (GetRawPtr() != other.GetRawPtr())
    {
        if (GetRawPtr())
        {
            classes_class_c_release(GetRawPtr());
            SetObject(0);
        }
        SetObject(other.GetRawPtr());
        if (other.GetRawPtr())
        {
            classes_class_c_add_ref(other.GetRawPtr());
        }
    }
    return *this;
}

#ifdef CLASSES_CPP_COMPILER_HAS_RVALUE_REFERENCES
inline Classes::ClassCPtr& Classes::ClassCPtr::operator=(Classes::ClassCPtr&& other)
{
    if (GetRawPtr() != other.GetRawPtr())
    {
        if (GetRawPtr())
        {
            classes_class_c_release(GetRawPtr());
            SetObject(0);
        }
        mObject = other.mObject;
        other.mObject = 0;
    }
    return *this;
}
#endif /* CLASSES_CPP_COMPILER_HAS_RVALUE_REFERENCES */

inline Classes::ClassCPtr Classes::ClassCPtr::Null()
{
    return Classes::ClassCPtr(Classes::ClassCPtr::force_creating_from_raw_pointer, static_cast<void*>(0), false);
}

inline bool Classes::ClassCPtr::IsNull() const
{
    return !GetRawPtr();
}

inline bool Classes::ClassCPtr::IsNotNull() const
{
    return GetRawPtr() != 0;
}

inline bool Classes::ClassCPtr::operator!() const
{
    return !GetRawPtr();
}

inline void* Classes::ClassCPtr::detach()
{
    void* result = GetRawPtr();
    SetObject(0);
    return result;
}

inline void* Classes::ClassCPtr::GetRawPtr() const
{
    return Classes::ClassCPtr::mObject ? mObject: 0;
}

inline Classes::ClassCPtr* Classes::ClassCPtr::operator->()
{
    return this;
}

inline const Classes::ClassCPtr* Classes::ClassCPtr::operator->() const
{
    return this;
}

inline void Classes::ClassCPtr::SetObject(void* object_pointer)
{
    mObject = object_pointer;
}

#endif /* __cplusplus */

#endif /* CLASSES_CLASSC_DEFINITION_INCLUDED */

