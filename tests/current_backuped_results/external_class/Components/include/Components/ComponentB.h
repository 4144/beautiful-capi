/*
 * Beautiful Capi generates beautiful C API wrappers for your C++ classes
 * Copyright (C) 2015 Petr Petrovich Petrov
 *
 * This file is part of Beautiful Capi.
 *
 * Beautiful Capi is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * Beautiful Capi is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with Beautiful Capi.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

/*
 * WARNING: This file was automatically generated by Beautiful Capi!
 * Do not edit this file! Please edit the source API description.
 */

#ifndef COMPONENTS_COMPONENTB_DEFINITION_INCLUDED
#define COMPONENTS_COMPONENTB_DEFINITION_INCLUDED

#include "Components/ComponentBDecl.h"
#include "Classes/ClassA.h"
#include "Classes/ClassB.h"
#include "Classes/ClassC.h"

#ifdef __cplusplus

inline Components::ComponentBRawPtr::ComponentBRawPtr()
{
    SetObject(Components::ComponentBRawPtr(Components::ComponentBRawPtr::force_creating_from_raw_pointer, components_component_b_default(), false).Detach());
}

inline Classes::ClassA Components::ComponentBRawPtr::GetA() const
{
    return Classes::ClassA(Classes::ClassA::force_creating_from_raw_pointer, components_component_b_get_a_const(GetRawPointer()), false);
}

inline void Components::ComponentBRawPtr::SetA(const Classes::ClassA& a)
{
    components_component_b_set_a(GetRawPointer(), a.GetRawPtr());
}

inline Classes::ClassBRawPtr Components::ComponentBRawPtr::GetB() const
{
    return Classes::ClassBRawPtr(Classes::ClassBRawPtr::force_creating_from_raw_pointer, components_component_b_get_b_const(GetRawPointer()), false);
}

inline void Components::ComponentBRawPtr::SetB(const Classes::ClassBRawPtr& b)
{
    components_component_b_set_b(GetRawPointer(), b.GetRawPtr());
}

inline Classes::ClassCPtr Components::ComponentBRawPtr::GetC() const
{
    return Classes::ClassCPtr(Classes::ClassCPtr::force_creating_from_raw_pointer, components_component_b_get_c_const(GetRawPointer()), false);
}

inline void Components::ComponentBRawPtr::SetC(const Classes::ClassCPtr& c)
{
    components_component_b_set_c(GetRawPointer(), c.GetRawPtr());
}

inline Components::ComponentBRawPtr::ComponentBRawPtr(const ComponentBRawPtr& other)
{
    SetObject(other.GetRawPointer());
}

#ifdef COMPONENTS_CPP_COMPILER_HAS_RVALUE_REFERENCES
inline Components::ComponentBRawPtr::ComponentBRawPtr(ComponentBRawPtr&& other)
{
    mObject = other.mObject;
    other.mObject = 0;
}
#endif /* COMPONENTS_CPP_COMPILER_HAS_RVALUE_REFERENCES */

inline Components::ComponentBRawPtr::ComponentBRawPtr(Components::ComponentBRawPtr::ECreateFromRawPointer, void *object_pointer, bool)
{
    SetObject(object_pointer);
}

inline void Components::ComponentBRawPtr::Delete()
{
    if (GetRawPointer())
    {
        components_component_b_delete(GetRawPointer());
        SetObject(0);
    }
}

inline Components::ComponentBRawPtr& Components::ComponentBRawPtr::operator=(const Components::ComponentBRawPtr& other)
{
    if (this != &other)
    {
        SetObject(other.GetRawPointer());
    }
    return *this;
}

#ifdef COMPONENTS_CPP_COMPILER_HAS_RVALUE_REFERENCES
inline Components::ComponentBRawPtr& Components::ComponentBRawPtr::operator=(Components::ComponentBRawPtr&& other)
{
    if (this != &other)
    {
        mObject = other.mObject;
        other.mObject = 0;
    }
    return *this;
}
#endif /* COMPONENTS_CPP_COMPILER_HAS_RVALUE_REFERENCES */

inline Components::ComponentBRawPtr Components::ComponentBRawPtr::Null()
{
    return Components::ComponentBRawPtr(Components::ComponentBRawPtr::force_creating_from_raw_pointer, static_cast<void*>(0), false);
}

inline bool Components::ComponentBRawPtr::IsNull() const
{
    return !GetRawPointer();
}

inline bool Components::ComponentBRawPtr::IsNotNull() const
{
    return GetRawPointer() != 0;
}

inline bool Components::ComponentBRawPtr::operator!() const
{
    return !GetRawPointer();
}

inline void* Components::ComponentBRawPtr::Detach()
{
    void* result = GetRawPointer();
    SetObject(0);
    return result;
}

inline void* Components::ComponentBRawPtr::GetRawPointer() const
{
    return Components::ComponentBRawPtr::mObject ? mObject: 0;
}

inline Components::ComponentBRawPtr* Components::ComponentBRawPtr::operator->()
{
    return this;
}

inline const Components::ComponentBRawPtr* Components::ComponentBRawPtr::operator->() const
{
    return this;
}

inline void Components::ComponentBRawPtr::SetObject(void* object_pointer)
{
    mObject = object_pointer;
}

#endif /* __cplusplus */

#endif /* COMPONENTS_COMPONENTB_DEFINITION_INCLUDED */

